
Code_Project_2_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005708  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080058b8  080058b8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058b8  080058b8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080058c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000008c  0800594c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800594c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5c0  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002286  00000000  00000000  0002d675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188d3  00000000  00000000  00031078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dab4  00000000  00000000  0004994b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de53  00000000  00000000  000573ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  000e52a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005800 	.word	0x08005800

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08005800 	.word	0x08005800

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <PID>:

uint16_t preError = 0, error = 0, sumError = 0;
float rateError = 0;

uint8_t PID(uint16_t actualSpeed, uint16_t desireSpeed)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	80fb      	strh	r3, [r7, #6]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	80bb      	strh	r3, [r7, #4]
	error = desireSpeed - actualSpeed;
 8000ea8:	88ba      	ldrh	r2, [r7, #4]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b47      	ldr	r3, [pc, #284]	; (8000fd0 <PID+0x138>)
 8000eb2:	801a      	strh	r2, [r3, #0]
	sumError += error*T;
 8000eb4:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <PID+0x13c>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa3 	bl	8000404 <__aeabi_i2d>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	460d      	mov	r5, r1
 8000ec2:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <PID+0x138>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fa9c 	bl	8000404 <__aeabi_i2d>
 8000ecc:	a33c      	add	r3, pc, #240	; (adr r3, 8000fc0 <PID+0x128>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb01 	bl	80004d8 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4620      	mov	r0, r4
 8000edc:	4629      	mov	r1, r5
 8000ede:	f7ff f945 	bl	800016c <__adddf3>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fd07 	bl	80008fc <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <PID+0x13c>)
 8000ef4:	801a      	strh	r2, [r3, #0]
	rateError =(float)(error - preError)/T;
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <PID+0x138>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <PID+0x140>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe24 	bl	8000b50 <__aeabi_i2f>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fa8c 	bl	8000428 <__aeabi_f2d>
 8000f10:	a32b      	add	r3, pc, #172	; (adr r3, 8000fc0 <PID+0x128>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff fc09 	bl	800072c <__aeabi_ddiv>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fd0b 	bl	800093c <__aeabi_d2f>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <PID+0x144>)
 8000f2a:	6013      	str	r3, [r2, #0]
	uint8_t duty = Kd*error + Ki*sumError + Kd*rateError;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <PID+0x138>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fa67 	bl	8000404 <__aeabi_i2d>
 8000f36:	a324      	add	r3, pc, #144	; (adr r3, 8000fc8 <PID+0x130>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff facc 	bl	80004d8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <PID+0x13c>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa54 	bl	8000404 <__aeabi_i2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff f902 	bl	800016c <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	461d      	mov	r5, r3
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <PID+0x144>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa57 	bl	8000428 <__aeabi_f2d>
 8000f7a:	a313      	add	r3, pc, #76	; (adr r3, 8000fc8 <PID+0x130>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff faaa 	bl	80004d8 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff f8ee 	bl	800016c <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fcb0 	bl	80008fc <__aeabi_d2uiz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]

	if(duty > DUTY_MAX)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <PID+0x112>
	{
		duty = DUTY_MAX;
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	73fb      	strb	r3, [r7, #15]
	}else if(duty < DUTY_MIN)
	{
		duty = DUTY_MIN;
	}
	preError = error;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <PID+0x138>)
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <PID+0x140>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	return duty;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	47ae147b 	.word	0x47ae147b
 8000fc4:	3f847ae1 	.word	0x3f847ae1
 8000fc8:	9999999a 	.word	0x9999999a
 8000fcc:	3fb99999 	.word	0x3fb99999
 8000fd0:	200000aa 	.word	0x200000aa
 8000fd4:	200000ac 	.word	0x200000ac
 8000fd8:	200000a8 	.word	0x200000a8
 8000fdc:	200000b0 	.word	0x200000b0

08000fe0 <read_temp>:

uint16_t cnt = 0, preCnt = 0;


uint8_t read_temp(ADC_HandleTypeDef* hadc, uint16_t* data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)data, 2);
 8000fea:	2202      	movs	r2, #2
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f001 f96c 	bl	80022cc <HAL_ADC_Start_DMA>
	HAL_DMA_PollForTransfer(hadc->DMA_Handle, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fe20 	bl	8002c44 <HAL_DMA_PollForTransfer>
	uint8_t	temp = ((float)data[0]/ 4096) * 3.3 * 100;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fd9d 	bl	8000b48 <__aeabi_ui2f>
 800100e:	4603      	mov	r3, r0
 8001010:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fea3 	bl	8000d60 <__aeabi_fdiv>
 800101a:	4603      	mov	r3, r0
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa03 	bl	8000428 <__aeabi_f2d>
 8001022:	a30d      	add	r3, pc, #52	; (adr r3, 8001058 <read_temp+0x78>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff fa56 	bl	80004d8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <read_temp+0x80>)
 800103a:	f7ff fa4d 	bl	80004d8 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fc59 	bl	80008fc <__aeabi_d2uiz>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
	return temp;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	66666666 	.word	0x66666666
 800105c:	400a6666 	.word	0x400a6666
 8001060:	40590000 	.word	0x40590000

08001064 <read_speed>:

uint16_t read_speed(TIM_HandleTypeDef htim)
{
 8001064:	b084      	sub	sp, #16
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	f107 0c10 	add.w	ip, r7, #16
 8001070:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	cnt = __HAL_TIM_GET_COUNTER(&htim);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <read_speed+0x50>)
 800107c:	801a      	strh	r2, [r3, #0]
	//pulse of 10ms --*100--> pulse of 1s --/334--> rpm
	uint16_t speed = (cnt - preCnt)*100 / 334;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <read_speed+0x50>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <read_speed+0x54>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2264      	movs	r2, #100	; 0x64
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <read_speed+0x58>)
 8001092:	fb82 1203 	smull	r1, r2, r2, r3
 8001096:	11d2      	asrs	r2, r2, #7
 8001098:	17db      	asrs	r3, r3, #31
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	80fb      	strh	r3, [r7, #6]
	preCnt = cnt;
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <read_speed+0x50>)
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <read_speed+0x54>)
 80010a4:	801a      	strh	r2, [r3, #0]
	return speed;
 80010a6:	88fb      	ldrh	r3, [r7, #6]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr
 80010b4:	200000b4 	.word	0x200000b4
 80010b8:	200000b6 	.word	0x200000b6
 80010bc:	621b97c3 	.word	0x621b97c3

080010c0 <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	    Lcd_configure();
 80010c4:	f000 f8f2 	bl	80012ac <Lcd_configure>
			lcd_write_command(0x33);
 80010c8:	2033      	movs	r0, #51	; 0x33
 80010ca:	f000 f993 	bl	80013f4 <lcd_write_command>
			lcd_write_command(0x32);
 80010ce:	2032      	movs	r0, #50	; 0x32
 80010d0:	f000 f990 	bl	80013f4 <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 80010d4:	2028      	movs	r0, #40	; 0x28
 80010d6:	f000 f98d 	bl	80013f4 <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 f98a 	bl	80013f4 <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80010e0:	200c      	movs	r0, #12
 80010e2:	f000 f987 	bl	80013f4 <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 80010e6:	2006      	movs	r0, #6
 80010e8:	f000 f984 	bl	80013f4 <lcd_write_command>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4906      	ldr	r1, [pc, #24]	; (8001118 <Lcd_write_int+0x28>)
 8001100:	4618      	mov	r0, r3
 8001102:	f003 ff43 	bl	8004f8c <siprintf>
	Lcd_write_string(buffer);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f806 	bl	800111c <Lcd_write_string>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08005818 	.word	0x08005818

0800111c <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e009      	b.n	800113e <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f97e 	bl	8001434 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3301      	adds	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	7bfc      	ldrb	r4, [r7, #15]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff f805 	bl	8000150 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	429c      	cmp	r4, r3
 800114a:	d3ee      	bcc.n	800112a <Lcd_write_string+0xe>
	}
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}

08001156 <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	460a      	mov	r2, r1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	4613      	mov	r3, r2
 8001164:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f93d 	bl	80013f4 <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 800117a:	e00a      	b.n	8001192 <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	3340      	adds	r3, #64	; 0x40
 8001180:	b2db      	uxtb	r3, r3
 8001182:	b25b      	sxtb	r3, r3
 8001184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001188:	b25b      	sxtb	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f931 	bl	80013f4 <lcd_write_command>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <Lcd_display1>:
/*****
** Display string
******/

void Lcd_display1(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	Lcd_gotoxy(0, 0);
 80011a0:	2100      	movs	r1, #0
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ffd7 	bl	8001156 <Lcd_gotoxy>
	//write Temperature
	Lcd_write_string("MODE:");
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <Lcd_display1+0x3c>)
 80011aa:	f7ff ffb7 	bl	800111c <Lcd_write_string>
	Lcd_gotoxy(6, 0);
 80011ae:	2100      	movs	r1, #0
 80011b0:	2006      	movs	r0, #6
 80011b2:	f7ff ffd0 	bl	8001156 <Lcd_gotoxy>
	Lcd_write_string("1. ByTemp");
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <Lcd_display1+0x40>)
 80011b8:	f7ff ffb0 	bl	800111c <Lcd_write_string>

	//write Speed
	Lcd_gotoxy(0, 1);
 80011bc:	2101      	movs	r1, #1
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff ffc9 	bl	8001156 <Lcd_gotoxy>
	Lcd_gotoxy(6, 1);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2006      	movs	r0, #6
 80011c8:	f7ff ffc5 	bl	8001156 <Lcd_gotoxy>
	Lcd_write_string("2. Manual");
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <Lcd_display1+0x44>)
 80011ce:	f7ff ffa5 	bl	800111c <Lcd_write_string>
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	0800581c 	.word	0x0800581c
 80011dc:	08005824 	.word	0x08005824
 80011e0:	08005830 	.word	0x08005830

080011e4 <Lcd_display2>:
/*****
** Display temperature, speed
******/

void Lcd_display2(uint8_t temperatute, uint16_t speed)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	80bb      	strh	r3, [r7, #4]
	static uint8_t pre_temperatute = -1;
	static uint16_t pre_speed = -1;
	if(pre_temperatute != temperatute)
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <Lcd_display2+0xac>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d01c      	beq.n	8001238 <Lcd_display2+0x54>
	{
		Lcd_gotoxy(0, 0);
 80011fe:	2100      	movs	r1, #0
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ffa8 	bl	8001156 <Lcd_gotoxy>
		//write Temperature
		Lcd_write_string("Temp :");
 8001206:	4823      	ldr	r0, [pc, #140]	; (8001294 <Lcd_display2+0xb0>)
 8001208:	f7ff ff88 	bl	800111c <Lcd_write_string>
		Lcd_gotoxy(6, 0);
 800120c:	2100      	movs	r1, #0
 800120e:	2006      	movs	r0, #6
 8001210:	f7ff ffa1 	bl	8001156 <Lcd_gotoxy>
		Lcd_write_string("      ");
 8001214:	4820      	ldr	r0, [pc, #128]	; (8001298 <Lcd_display2+0xb4>)
 8001216:	f7ff ff81 	bl	800111c <Lcd_write_string>
		Lcd_gotoxy(6, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	2006      	movs	r0, #6
 800121e:	f7ff ff9a 	bl	8001156 <Lcd_gotoxy>
		Lcd_write_int((int)temperatute);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff63 	bl	80010f0 <Lcd_write_int>
		Lcd_gotoxy(12, 0);
 800122a:	2100      	movs	r1, #0
 800122c:	200c      	movs	r0, #12
 800122e:	f7ff ff92 	bl	8001156 <Lcd_gotoxy>
		Lcd_write_string("C  ");
 8001232:	481a      	ldr	r0, [pc, #104]	; (800129c <Lcd_display2+0xb8>)
 8001234:	f7ff ff72 	bl	800111c <Lcd_write_string>
	}
	if(pre_speed != speed)
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <Lcd_display2+0xbc>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	88ba      	ldrh	r2, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	d01c      	beq.n	800127c <Lcd_display2+0x98>
	{
		//write Speed
		Lcd_gotoxy(0, 1);
 8001242:	2101      	movs	r1, #1
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff86 	bl	8001156 <Lcd_gotoxy>
		Lcd_write_string("Speed:");
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <Lcd_display2+0xc0>)
 800124c:	f7ff ff66 	bl	800111c <Lcd_write_string>
		Lcd_gotoxy(6, 1);
 8001250:	2101      	movs	r1, #1
 8001252:	2006      	movs	r0, #6
 8001254:	f7ff ff7f 	bl	8001156 <Lcd_gotoxy>
		Lcd_write_string("      ");
 8001258:	480f      	ldr	r0, [pc, #60]	; (8001298 <Lcd_display2+0xb4>)
 800125a:	f7ff ff5f 	bl	800111c <Lcd_write_string>
		Lcd_gotoxy(6, 1);
 800125e:	2101      	movs	r1, #1
 8001260:	2006      	movs	r0, #6
 8001262:	f7ff ff78 	bl	8001156 <Lcd_gotoxy>
		Lcd_write_int((int)speed);
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff41 	bl	80010f0 <Lcd_write_int>
		Lcd_gotoxy(12, 1);
 800126e:	2101      	movs	r1, #1
 8001270:	200c      	movs	r0, #12
 8001272:	f7ff ff70 	bl	8001156 <Lcd_gotoxy>
		Lcd_write_string("rpm");
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <Lcd_display2+0xc4>)
 8001278:	f7ff ff50 	bl	800111c <Lcd_write_string>
	}
	pre_speed = speed;
 800127c:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <Lcd_display2+0xbc>)
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	8013      	strh	r3, [r2, #0]
	pre_temperatute = temperatute;
 8001282:	4a03      	ldr	r2, [pc, #12]	; (8001290 <Lcd_display2+0xac>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	7013      	strb	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000018 	.word	0x20000018
 8001294:	0800583c 	.word	0x0800583c
 8001298:	08005844 	.word	0x08005844
 800129c:	0800584c 	.word	0x0800584c
 80012a0:	2000001a 	.word	0x2000001a
 80012a4:	08005850 	.word	0x08005850
 80012a8:	08005858 	.word	0x08005858

080012ac <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <Lcd_configure+0x140>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a49      	ldr	r2, [pc, #292]	; (80013ec <Lcd_configure+0x140>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <Lcd_configure+0x140>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <Lcd_configure+0x140>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a43      	ldr	r2, [pc, #268]	; (80013ec <Lcd_configure+0x140>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <Lcd_configure+0x140>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <Lcd_configure+0x140>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <Lcd_configure+0x140>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <Lcd_configure+0x140>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4834      	ldr	r0, [pc, #208]	; (80013f0 <Lcd_configure+0x144>)
 8001320:	f001 ff4a 	bl	80031b8 <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 8001324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001328:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	482c      	ldr	r0, [pc, #176]	; (80013f0 <Lcd_configure+0x144>)
 800133e:	f001 ff3b 	bl	80031b8 <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 8001342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001346:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	4825      	ldr	r0, [pc, #148]	; (80013f0 <Lcd_configure+0x144>)
 800135c:	f001 ff2c 	bl	80031b8 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001366:	4822      	ldr	r0, [pc, #136]	; (80013f0 <Lcd_configure+0x144>)
 8001368:	f002 f8aa 	bl	80034c0 <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <Lcd_configure+0x144>)
 8001386:	f001 ff17 	bl	80031b8 <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <Lcd_configure+0x144>)
 80013a4:	f001 ff08 	bl	80031b8 <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 80013a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <Lcd_configure+0x144>)
 80013c2:	f001 fef9 	bl	80031b8 <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <Lcd_configure+0x144>)
 80013e0:	f001 feea 	bl	80031b8 <HAL_GPIO_Init>
	
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 80013fe:	2200      	movs	r2, #0
 8001400:	2101      	movs	r1, #1
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <lcd_write_command+0x3c>)
 8001404:	f002 f85c 	bl	80034c0 <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2104      	movs	r1, #4
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f82f 	bl	8001474 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2104      	movs	r1, #4
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f827 	bl	8001474 <lcd_write>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010c00 	.word	0x40010c00

08001434 <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 800143e:	2201      	movs	r2, #1
 8001440:	2101      	movs	r1, #1
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <lcd_write_data+0x3c>)
 8001444:	f002 f83c 	bl	80034c0 <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f80f 	bl	8001474 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2104      	movs	r1, #4
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f807 	bl	8001474 <lcd_write>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40010c00 	.word	0x40010c00

08001474 <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	460a      	mov	r2, r1
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	4613      	mov	r3, r2
 8001482:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e023      	b.n	80014d2 <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	fa42 f303 	asr.w	r3, r2, r3
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	4a18      	ldr	r2, [pc, #96]	; (8001500 <lcd_write+0x8c>)
 800149e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <lcd_write+0x90>)
 80014a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	f002 f807 	bl	80034c0 <HAL_GPIO_WritePin>
 80014b2:	e00b      	b.n	80014cc <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <lcd_write+0x8c>)
 80014b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <lcd_write+0x90>)
 80014c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	f001 fffa 	bl	80034c0 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3d7      	bcc.n	800148a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <lcd_write+0x94>)
 80014e2:	f001 ffed 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 fdd8 	bl	800209c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <lcd_write+0x94>)
 80014f4:	f001 ffe4 	bl	80034c0 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000010 	.word	0x20000010
 8001508:	40010c00 	.word	0x40010c00

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b08f      	sub	sp, #60	; 0x3c
 8001510:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f000 fd61 	bl	8001fd8 <HAL_Init>

  /* USER CODE BEGIN Init */
  Lcd_Init();
 8001516:	f7ff fdd3 	bl	80010c0 <Lcd_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f86f 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f000 fa3f 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001522:	f000 fa1f 	bl	8001964 <MX_DMA_Init>
  MX_ADC1_Init();
 8001526:	f000 f8b9 	bl	800169c <MX_ADC1_Init>
  MX_TIM2_Init();
 800152a:	f000 f905 	bl	8001738 <MX_TIM2_Init>
  MX_TIM3_Init();
 800152e:	f000 f977 	bl	8001820 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001532:	f000 f9c9 	bl	80018c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //LCD display
  Lcd_display1();
 8001536:	f7ff fe31 	bl	800119c <Lcd_display1>
  TIM2_PWM_Set_Duty(duty);
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <main+0xd0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 faac 	bl	8001a9c <TIM2_PWM_Set_Duty>
  TIM2_PWM_Set_Frequency(2000);
 8001544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001548:	f000 fac6 	bl	8001ad8 <TIM2_PWM_Set_Frequency>

  if( HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800154c:	210c      	movs	r1, #12
 800154e:	4824      	ldr	r0, [pc, #144]	; (80015e0 <main+0xd4>)
 8001550:	f002 fde4 	bl	800411c <HAL_TIM_PWM_Start>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d037      	beq.n	80015ca <main+0xbe>
  {
	  Error_Handler();
 800155a:	f000 fb43 	bl	8001be4 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  while((mode == MODE_BYTEMP) || (mode == MODE_MANUAL))
 800155e:	e034      	b.n	80015ca <main+0xbe>
	  {
		  if(!TIM_Check_Enable(htim4))
 8001560:	4e20      	ldr	r6, [pc, #128]	; (80015e4 <main+0xd8>)
 8001562:	466d      	mov	r5, sp
 8001564:	f106 0410 	add.w	r4, r6, #16
 8001568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001574:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001578:	e885 0003 	stmia.w	r5, {r0, r1}
 800157c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001580:	f000 fa76 	bl	8001a70 <TIM_Check_Enable>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <main+0x8e>
		  {
			  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <main+0xd8>)
 800158c:	f002 fcee 	bl	8003f6c <HAL_TIM_Base_Start_IT>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <main+0x8e>
			  {
				  Error_Handler();
 8001596:	f000 fb25 	bl	8001be4 <Error_Handler>
			  }
		  }
		  temp = read_temp(&hadc1, (uint16_t*)data);
 800159a:	4913      	ldr	r1, [pc, #76]	; (80015e8 <main+0xdc>)
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <main+0xe0>)
 800159e:	f7ff fd1f 	bl	8000fe0 <read_temp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <main+0xe4>)
 80015a8:	701a      	strb	r2, [r3, #0]

		  if(mode == MODE_BYTEMP)
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <main+0xe8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
		  {
			//  desireSpeed = manual_to_speed();
		  }

		  //display
		  Lcd_display2(temp, actualSpeed);
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <main+0xe4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <main+0xec>)
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fe12 	bl	80011e4 <Lcd_display2>

		  //sleep WFI
		  HAL_SuspendTick();
 80015c0:	f000 fd90 	bl	80020e4 <HAL_SuspendTick>
		  __WFI();
 80015c4:	bf30      	wfi
		  HAL_ResumeTick();
 80015c6:	f000 fd9b 	bl	8002100 <HAL_ResumeTick>
	  while((mode == MODE_BYTEMP) || (mode == MODE_MANUAL))
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <main+0xe8>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d0c6      	beq.n	8001560 <main+0x54>
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <main+0xe8>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d0c2      	beq.n	8001560 <main+0x54>
 80015da:	e7f6      	b.n	80015ca <main+0xbe>
 80015dc:	200000bd 	.word	0x200000bd
 80015e0:	200001d4 	.word	0x200001d4
 80015e4:	200000cc 	.word	0x200000cc
 80015e8:	200001d0 	.word	0x200001d0
 80015ec:	2000015c 	.word	0x2000015c
 80015f0:	200000be 	.word	0x200000be
 80015f4:	200000bc 	.word	0x200000bc
 80015f8:	200000b8 	.word	0x200000b8

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	; 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	2228      	movs	r2, #40	; 0x28
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fcb6 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2310      	movs	r3, #16
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001640:	4618      	mov	r0, r3
 8001642:	f001 ff87 	bl	8003554 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800164c:	f000 faca 	bl	8001be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f002 f9f2 	bl	8003a54 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001676:	f000 fab5 	bl	8001be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800167a:	2302      	movs	r3, #2
 800167c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fb6b 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001690:	f000 faa8 	bl	8001be4 <Error_Handler>
  }
}
 8001694:	bf00      	nop
 8001696:	3750      	adds	r7, #80	; 0x50
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <MX_ADC1_Init+0x94>)
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <MX_ADC1_Init+0x98>)
 80016b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_ADC1_Init+0x94>)
 80016b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_ADC1_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_ADC1_Init+0x94>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_ADC1_Init+0x94>)
 80016c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_ADC1_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_ADC1_Init+0x94>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016da:	4815      	ldr	r0, [pc, #84]	; (8001730 <MX_ADC1_Init+0x94>)
 80016dc:	f000 fd1e 	bl	800211c <HAL_ADC_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80016e6:	f000 fa7d 	bl	8001be4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_ADC1_Init+0x94>)
 80016fc:	f000 fee0 	bl	80024c0 <HAL_ADC_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001706:	f000 fa6d 	bl	8001be4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800170a:	2304      	movs	r3, #4
 800170c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800170e:	2302      	movs	r3, #2
 8001710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_ADC1_Init+0x94>)
 8001718:	f000 fed2 	bl	80024c0 <HAL_ADC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001722:	f000 fa5f 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000015c 	.word	0x2000015c
 8001734:	40012400 	.word	0x40012400

08001738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <MX_TIM2_Init+0xe4>)
 800176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <MX_TIM2_Init+0xe4>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <MX_TIM2_Init+0xe4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <MX_TIM2_Init+0xe4>)
 800177e:	2263      	movs	r2, #99	; 0x63
 8001780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <MX_TIM2_Init+0xe4>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <MX_TIM2_Init+0xe4>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800178e:	4823      	ldr	r0, [pc, #140]	; (800181c <MX_TIM2_Init+0xe4>)
 8001790:	f002 fb9c 	bl	8003ecc <HAL_TIM_Base_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800179a:	f000 fa23 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a8:	4619      	mov	r1, r3
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <MX_TIM2_Init+0xe4>)
 80017ac:	f002 ffc0 	bl	8004730 <HAL_TIM_ConfigClockSource>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80017b6:	f000 fa15 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017ba:	4818      	ldr	r0, [pc, #96]	; (800181c <MX_TIM2_Init+0xe4>)
 80017bc:	f002 fc56 	bl	800406c <HAL_TIM_PWM_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80017c6:	f000 fa0d 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	4619      	mov	r1, r3
 80017d8:	4810      	ldr	r0, [pc, #64]	; (800181c <MX_TIM2_Init+0xe4>)
 80017da:	f003 fb35 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80017e4:	f000 f9fe 	bl	8001be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e8:	2360      	movs	r3, #96	; 0x60
 80017ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	220c      	movs	r2, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM2_Init+0xe4>)
 8001800:	f002 fed8 	bl	80045b4 <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800180a:	f000 f9eb 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800180e:	4803      	ldr	r0, [pc, #12]	; (800181c <MX_TIM2_Init+0xe4>)
 8001810:	f000 fafe 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	; 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200001d4 	.word	0x200001d4

08001820 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2224      	movs	r2, #36	; 0x24
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fba4 	bl	8004f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800183e:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <MX_TIM3_Init+0xa4>)
 8001840:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_TIM3_Init+0xa0>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM3_Init+0xa0>)
 8001850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001854:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM3_Init+0xa0>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001862:	2303      	movs	r3, #3
 8001864:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187a:	2301      	movs	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800188e:	f002 fce7 	bl	8004260 <HAL_TIM_Encoder_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001898:	f000 f9a4 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM3_Init+0xa0>)
 80018aa:	f003 facd 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018b4:	f000 f996 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000114 	.word	0x20000114
 80018c4:	40000400 	.word	0x40000400

080018c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_TIM4_Init+0x94>)
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <MX_TIM4_Init+0x98>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_TIM4_Init+0x94>)
 80018ec:	224f      	movs	r2, #79	; 0x4f
 80018ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM4_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_TIM4_Init+0x94>)
 80018f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <MX_TIM4_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <MX_TIM4_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800190a:	4814      	ldr	r0, [pc, #80]	; (800195c <MX_TIM4_Init+0x94>)
 800190c:	f002 fade 	bl	8003ecc <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001916:	f000 f965 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_TIM4_Init+0x94>)
 8001928:	f002 ff02 	bl	8004730 <HAL_TIM_ConfigClockSource>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001932:	f000 f957 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_TIM4_Init+0x94>)
 8001944:	f003 fa80 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800194e:	f000 f949 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000cc 	.word	0x200000cc
 8001960:	40000800 	.word	0x40000800

08001964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_DMA_Init+0x38>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <MX_DMA_Init+0x38>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_DMA_Init+0x38>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	200b      	movs	r0, #11
 8001988:	f001 f86b 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800198c:	200b      	movs	r0, #11
 800198e:	f001 f884 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <MX_GPIO_Init+0xc0>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a29      	ldr	r2, [pc, #164]	; (8001a60 <MX_GPIO_Init+0xc0>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <MX_GPIO_Init+0xc0>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <MX_GPIO_Init+0xc0>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <MX_GPIO_Init+0xc0>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <MX_GPIO_Init+0xc0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ea:	481e      	ldr	r0, [pc, #120]	; (8001a64 <MX_GPIO_Init+0xc4>)
 80019ec:	f001 fd68 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2302      	movs	r3, #2
 8001a00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4619      	mov	r1, r3
 8001a08:	4816      	ldr	r0, [pc, #88]	; (8001a64 <MX_GPIO_Init+0xc4>)
 8001a0a:	f001 fbd5 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BYTEMP_Pin MANUAL_Pin STOP_Pin */
  GPIO_InitStruct.Pin = BYTEMP_Pin|MANUAL_Pin|STOP_Pin;
 8001a0e:	2323      	movs	r3, #35	; 0x23
 8001a10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_GPIO_Init+0xc8>)
 8001a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4812      	ldr	r0, [pc, #72]	; (8001a6c <MX_GPIO_Init+0xcc>)
 8001a22:	f001 fbc9 	bl	80031b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2006      	movs	r0, #6
 8001a2c:	f001 f819 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a30:	2006      	movs	r0, #6
 8001a32:	f001 f832 	bl	8002a9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	f001 f811 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a40:	2007      	movs	r0, #7
 8001a42:	f001 f82a 	bl	8002a9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2017      	movs	r0, #23
 8001a4c:	f001 f809 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a50:	2017      	movs	r0, #23
 8001a52:	f001 f822 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40011000 	.word	0x40011000
 8001a68:	10210000 	.word	0x10210000
 8001a6c:	40010800 	.word	0x40010800

08001a70 <TIM_Check_Enable>:
  * @brief Check Tim Enable or not
  * @param
  * @retval None
  */
uint8_t TIM_Check_Enable(TIM_HandleTypeDef htim)
{
 8001a70:	b084      	sub	sp, #16
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	f107 0c10 	add.w	ip, r7, #16
 8001a7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t result = htim.Instance->CR1 & TIM_CR1_CEN;
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	71fb      	strb	r3, [r7, #7]
	return result;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	b004      	add	sp, #16
 8001a98:	4770      	bx	lr
	...

08001a9c <TIM2_PWM_Set_Duty>:
  * @brief GPIO Initialization Function
  * @param Duty(%) 0 -> 100. % High voltage
  * @retval None
  */
void TIM2_PWM_Set_Duty(uint8_t duty)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	uint16_t compare = (htim2.Init.Period + 1) * duty / 100;
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <TIM2_PWM_Set_Duty+0x34>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	79fa      	ldrb	r2, [r7, #7]
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <TIM2_PWM_Set_Duty+0x38>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, compare);
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <TIM2_PWM_Set_Duty+0x34>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	89fa      	ldrh	r2, [r7, #14]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200001d4 	.word	0x200001d4
 8001ad4:	51eb851f 	.word	0x51eb851f

08001ad8 <TIM2_PWM_Set_Frequency>:
  * @brief GPIO Initialization Function
  * @param frequency(Hz); 2 < f < 10000
  * @retval None
  */
void TIM2_PWM_Set_Frequency(uint32_t frequency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	// PSC > 0 -> if f = 10000, period must < 800
	// frequency = f_timer / [(Period + 1) * (Psc + 1)]
	// -> Psc = f_timer / ((period + 1)*frequency) - 1;
	uint32_t period = htim2.Init.Period;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <TIM2_PWM_Set_Frequency+0x34>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60fb      	str	r3, [r7, #12]
	uint32_t f_timer = HAL_RCC_GetPCLK1Freq() * 1; 	 //1 is APB1 time multiplier value
 8001ae6:	f002 f909 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8001aea:	60b8      	str	r0, [r7, #8]
	TIM2->PSC = f_timer / ((period + 1) * frequency) - 1;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3301      	adds	r3, #1
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b00:	3b01      	subs	r3, #1
 8001b02:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200001d4 	.word	0x200001d4

08001b10 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b091      	sub	sp, #68	; 0x44
 8001b14:	af0e      	add	r7, sp, #56	; 0x38
 8001b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

	  actualSpeed = read_speed(htim3);
 8001b18:	4e15      	ldr	r6, [pc, #84]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001b1a:	466d      	mov	r5, sp
 8001b1c:	f106 0410 	add.w	r4, r6, #16
 8001b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b34:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b38:	f7ff fa94 	bl	8001064 <read_speed>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b42:	801a      	strh	r2, [r3, #0]
	  duty = PID(actualSpeed, desireSpeed);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f9a2 	bl	8000e98 <PID>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001b5a:	701a      	strb	r2, [r3, #0]
	  TIM2_PWM_Set_Duty(duty);
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff9b 	bl	8001a9c <TIM2_PWM_Set_Duty>


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000114 	.word	0x20000114
 8001b74:	200000b8 	.word	0x200000b8
 8001b78:	200000ba 	.word	0x200000ba
 8001b7c:	200000bd 	.word	0x200000bd

08001b80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b90:	f001 fcae 	bl	80034f0 <HAL_GPIO_TogglePin>
  switch (GPIO_Pin) {
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	d00e      	beq.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x38>
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	dc16      	bgt.n	8001bcc <HAL_GPIO_EXTI_Callback+0x4c>
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d002      	beq.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x28>
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d004      	beq.n	8001bb0 <HAL_GPIO_EXTI_Callback+0x30>
		mode = MODE_STOP;
		TIM2_PWM_Set_Duty(DUTY_MIN);
		HAL_TIM_Base_Stop_IT(&htim4);
		break;
	default:
		break;
 8001ba6:	e011      	b.n	8001bcc <HAL_GPIO_EXTI_Callback+0x4c>
		mode = MODE_BYTEMP;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
		break;
 8001bae:	e00e      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x4e>
		mode = MODE_MANUAL;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	701a      	strb	r2, [r3, #0]
		break;
 8001bb6:	e00a      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x4e>
		mode = MODE_STOP;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001bba:	2204      	movs	r2, #4
 8001bbc:	701a      	strb	r2, [r3, #0]
		TIM2_PWM_Set_Duty(DUTY_MIN);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff ff6c 	bl	8001a9c <TIM2_PWM_Set_Duty>
		HAL_TIM_Base_Stop_IT(&htim4);
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001bc6:	f002 fa23 	bl	8004010 <HAL_TIM_Base_Stop_IT>
		break;
 8001bca:	e000      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x4e>
		break;
 8001bcc:	bf00      	nop
  }

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	200000bc 	.word	0x200000bc
 8001be0:	200000cc 	.word	0x200000cc

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	e7fe      	b.n	8001bec <Error_Handler+0x8>
	...

08001bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_MspInit+0x5c>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_MspInit+0x5c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6193      	str	r3, [r2, #24]
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_MspInit+0x60>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_MspInit+0x60>)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000

08001c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a28      	ldr	r2, [pc, #160]	; (8001d10 <HAL_ADC_MspInit+0xbc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d149      	bne.n	8001d08 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_Temp_Pin|ADC1_Manual_Pin;
 8001ca4:	2314      	movs	r3, #20
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4819      	ldr	r0, [pc, #100]	; (8001d18 <HAL_ADC_MspInit+0xc4>)
 8001cb4:	f001 fa80 	bl	80031b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001cba:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_ADC_MspInit+0xcc>)
 8001cbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cec:	480b      	ldr	r0, [pc, #44]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001cee:	f000 feef 	bl	8002ad0 <HAL_DMA_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001cf8:	f7ff ff74 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001d00:	621a      	str	r2, [r3, #32]
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40012400 	.word	0x40012400
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010800 	.word	0x40010800
 8001d1c:	2000018c 	.word	0x2000018c
 8001d20:	40020008 	.word	0x40020008

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d34:	d10c      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_TIM_Base_MspInit+0x68>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_TIM_Base_MspInit+0x68>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_TIM_Base_MspInit+0x68>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d4e:	e018      	b.n	8001d82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_TIM_Base_MspInit+0x6c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d113      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_TIM_Base_MspInit+0x68>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_TIM_Base_MspInit+0x68>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_TIM_Base_MspInit+0x68>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	201e      	movs	r0, #30
 8001d78:	f000 fe73 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d7c:	201e      	movs	r0, #30
 8001d7e:	f000 fe8c 	bl	8002a9a <HAL_NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40000800 	.word	0x40000800

08001d94 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_TIM_Encoder_MspInit+0x70>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d123      	bne.n	8001dfc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_TIM_Encoder_MspInit+0x74>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <HAL_TIM_Encoder_MspInit+0x74>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	61d3      	str	r3, [r2, #28]
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_TIM_Encoder_MspInit+0x74>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_TIM_Encoder_MspInit+0x74>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_TIM_Encoder_MspInit+0x74>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_TIM_Encoder_MspInit+0x74>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TI1_Encoder_Pin|TI2_Encoder_Pin;
 8001de4:	23c0      	movs	r3, #192	; 0xc0
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x78>)
 8001df8:	f001 f9de 	bl	80031b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010800 	.word	0x40010800

08001e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d117      	bne.n	8001e60 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_TIM_MspPostInit+0x58>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_TIM_MspPostInit+0x58>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_TIM_MspPostInit+0x58>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4804      	ldr	r0, [pc, #16]	; (8001e6c <HAL_TIM_MspPostInit+0x5c>)
 8001e5c:	f001 f9ac 	bl	80031b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010800 	.word	0x40010800

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <NMI_Handler+0x4>

08001e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <HardFault_Handler+0x4>

08001e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <MemManage_Handler+0x4>

08001e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb6:	f000 f8d5 	bl	8002064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f001 fb2e 	bl	8003524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f001 fb27 	bl	8003524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <DMA1_Channel1_IRQHandler+0x10>)
 8001ee2:	f001 f835 	bl	8002f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000018c 	.word	0x2000018c

08001ef0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ef4:	2020      	movs	r0, #32
 8001ef6:	f001 fb15 	bl	8003524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM4_IRQHandler+0x10>)
 8001f06:	f002 fa4d 	bl	80043a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200000cc 	.word	0x200000cc

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f002 fff0 	bl	8004f28 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20005000 	.word	0x20005000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	200000c0 	.word	0x200000c0
 8001f7c:	20000230 	.word	0x20000230

08001f80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8e:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa4:	4c0a      	ldr	r4, [pc, #40]	; (8001fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fb2:	f7ff ffe5 	bl	8001f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f002 ffbd 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fba:	f7ff faa7 	bl	800150c <main>
  bx lr
 8001fbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001fc8:	080058c0 	.word	0x080058c0
  ldr r2, =_sbss
 8001fcc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001fd0:	20000230 	.word	0x20000230

08001fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC1_2_IRQHandler>
	...

08001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_Init+0x28>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_Init+0x28>)
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f000 fd2f 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f000 f808 	bl	8002004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff4:	f7ff fdfc 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x54>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_InitTick+0x58>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201a:	fbb3 f3f1 	udiv	r3, r3, r1
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fd47 	bl	8002ab6 <HAL_SYSTICK_Config>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00e      	b.n	8002050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0f      	cmp	r3, #15
 8002036:	d80a      	bhi.n	800204e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002038:	2200      	movs	r2, #0
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f000 fd0f 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <HAL_InitTick+0x5c>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20000024 	.word	0x20000024
 8002060:	20000020 	.word	0x20000020

08002064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_IncTick+0x1c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_IncTick+0x20>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_IncTick+0x20>)
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	20000024 	.word	0x20000024
 8002084:	2000021c 	.word	0x2000021c

08002088 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b02      	ldr	r3, [pc, #8]	; (8002098 <HAL_GetTick+0x10>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	2000021c 	.word	0x2000021c

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff fff0 	bl	8002088 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffe0 	bl	8002088 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000024 	.word	0x20000024

080020e4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_SuspendTick+0x18>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <HAL_SuspendTick+0x18>)
 80020ee:	f023 0302 	bic.w	r3, r3, #2
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_ResumeTick+0x18>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_ResumeTick+0x18>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0be      	b.n	80022bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fd7a 	bl	8001c54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 faff 	bl	8002764 <ADC_ConversionStop_Disable>
 8002166:	4603      	mov	r3, r0
 8002168:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 8099 	bne.w	80022aa <HAL_ADC_Init+0x18e>
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 8095 	bne.w	80022aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	f043 0202 	orr.w	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800219c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7b1b      	ldrb	r3, [r3, #12]
 80021a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b4:	d003      	beq.n	80021be <HAL_ADC_Init+0xa2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_ADC_Init+0xa8>
 80021be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c2:	e000      	b.n	80021c6 <HAL_ADC_Init+0xaa>
 80021c4:	2300      	movs	r3, #0
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7d1b      	ldrb	r3, [r3, #20]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d119      	bne.n	8002208 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7b1b      	ldrb	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	035a      	lsls	r2, r3, #13
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	e00b      	b.n	8002208 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	430a      	orrs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_ADC_Init+0x1a8>)
 8002224:	4013      	ands	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	430b      	orrs	r3, r1
 800222e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002238:	d003      	beq.n	8002242 <HAL_ADC_Init+0x126>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d104      	bne.n	800224c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	3b01      	subs	r3, #1
 8002248:	051b      	lsls	r3, r3, #20
 800224a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	430a      	orrs	r2, r1
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_ADC_Init+0x1ac>)
 8002268:	4013      	ands	r3, r2
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	429a      	cmp	r2, r3
 800226e:	d10b      	bne.n	8002288 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002286:	e018      	b.n	80022ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	f023 0312 	bic.w	r3, r3, #18
 8002290:	f043 0210 	orr.w	r2, r3, #16
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022a8:	e007      	b.n	80022ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	f043 0210 	orr.w	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	ffe1f7fd 	.word	0xffe1f7fd
 80022c8:	ff1f0efe 	.word	0xff1f0efe

080022cc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a64      	ldr	r2, [pc, #400]	; (8002474 <HAL_ADC_Start_DMA+0x1a8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_Start_DMA+0x24>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_ADC_Start_DMA+0x1ac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d106      	bne.n	80022fe <HAL_ADC_Start_DMA+0x32>
 80022f0:	4b60      	ldr	r3, [pc, #384]	; (8002474 <HAL_ADC_Start_DMA+0x1a8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 80b3 	bne.w	8002464 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_ADC_Start_DMA+0x40>
 8002308:	2302      	movs	r3, #2
 800230a:	e0ae      	b.n	800246a <HAL_ADC_Start_DMA+0x19e>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f9cb 	bl	80026b0 <ADC_Enable>
 800231a:	4603      	mov	r3, r0
 800231c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 809a 	bne.w	800245a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a4e      	ldr	r2, [pc, #312]	; (8002478 <HAL_ADC_Start_DMA+0x1ac>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d105      	bne.n	8002350 <HAL_ADC_Start_DMA+0x84>
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_ADC_Start_DMA+0x1a8>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d115      	bne.n	800237c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	2b00      	cmp	r3, #0
 8002368:	d026      	beq.n	80023b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002372:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237a:	e01d      	b.n	80023b8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a39      	ldr	r2, [pc, #228]	; (8002474 <HAL_ADC_Start_DMA+0x1a8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_ADC_Start_DMA+0xd0>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a38      	ldr	r2, [pc, #224]	; (8002478 <HAL_ADC_Start_DMA+0x1ac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10d      	bne.n	80023b8 <HAL_ADC_Start_DMA+0xec>
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_ADC_Start_DMA+0x1a8>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	f023 0206 	bic.w	r2, r3, #6
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <HAL_ADC_Start_DMA+0x1b0>)
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a24      	ldr	r2, [pc, #144]	; (8002480 <HAL_ADC_Start_DMA+0x1b4>)
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a23      	ldr	r2, [pc, #140]	; (8002484 <HAL_ADC_Start_DMA+0x1b8>)
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0202 	mvn.w	r2, #2
 8002400:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002410:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a18      	ldr	r0, [r3, #32]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	334c      	adds	r3, #76	; 0x4c
 800241c:	4619      	mov	r1, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f000 fbaf 	bl	8002b84 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002430:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002434:	d108      	bne.n	8002448 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002444:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002446:	e00f      	b.n	8002468 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002456:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002458:	e006      	b.n	8002468 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002462:	e001      	b.n	8002468 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002468:	7dfb      	ldrb	r3, [r7, #23]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40012400 	.word	0x40012400
 8002478:	40012800 	.word	0x40012800
 800247c:	080027e7 	.word	0x080027e7
 8002480:	08002863 	.word	0x08002863
 8002484:	0800287f 	.word	0x0800287f

08002488 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x20>
 80024dc:	2302      	movs	r3, #2
 80024de:	e0dc      	b.n	800269a <HAL_ADC_ConfigChannel+0x1da>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d81c      	bhi.n	800252a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b05      	subs	r3, #5
 8002502:	221f      	movs	r2, #31
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	4019      	ands	r1, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b05      	subs	r3, #5
 800251c:	fa00 f203 	lsl.w	r2, r0, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	635a      	str	r2, [r3, #52]	; 0x34
 8002528:	e03c      	b.n	80025a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d81c      	bhi.n	800256c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	3b23      	subs	r3, #35	; 0x23
 8002544:	221f      	movs	r2, #31
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	4019      	ands	r1, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b23      	subs	r3, #35	; 0x23
 800255e:	fa00 f203 	lsl.w	r2, r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
 800256a:	e01b      	b.n	80025a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	3b41      	subs	r3, #65	; 0x41
 800257e:	221f      	movs	r2, #31
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	4019      	ands	r1, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	3b41      	subs	r3, #65	; 0x41
 8002598:	fa00 f203 	lsl.w	r2, r0, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b09      	cmp	r3, #9
 80025aa:	d91c      	bls.n	80025e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68d9      	ldr	r1, [r3, #12]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	3b1e      	subs	r3, #30
 80025be:	2207      	movs	r2, #7
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4019      	ands	r1, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6898      	ldr	r0, [r3, #8]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	3b1e      	subs	r3, #30
 80025d8:	fa00 f203 	lsl.w	r2, r0, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	60da      	str	r2, [r3, #12]
 80025e4:	e019      	b.n	800261a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6919      	ldr	r1, [r3, #16]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	2207      	movs	r2, #7
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6898      	ldr	r0, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	fa00 f203 	lsl.w	r2, r0, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b10      	cmp	r3, #16
 8002620:	d003      	beq.n	800262a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002626:	2b11      	cmp	r3, #17
 8002628:	d132      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d125      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d126      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002650:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b10      	cmp	r3, #16
 8002658:	d11a      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <HAL_ADC_ConfigChannel+0x1ec>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	0c9a      	lsrs	r2, r3, #18
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002670:	e002      	b.n	8002678 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3b01      	subs	r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f9      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x1b2>
 800267e:	e007      	b.n	8002690 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40012400 	.word	0x40012400
 80026a8:	2000001c 	.word	0x2000001c
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d040      	beq.n	8002750 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026de:	4b1f      	ldr	r3, [pc, #124]	; (800275c <ADC_Enable+0xac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <ADC_Enable+0xb0>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	0c9b      	lsrs	r3, r3, #18
 80026ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026ec:	e002      	b.n	80026f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026fa:	f7ff fcc5 	bl	8002088 <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002700:	e01f      	b.n	8002742 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002702:	f7ff fcc1 	bl	8002088 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d918      	bls.n	8002742 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d011      	beq.n	8002742 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	f043 0210 	orr.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d1d8      	bne.n	8002702 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000001c 	.word	0x2000001c
 8002760:	431bde83 	.word	0x431bde83

08002764 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d12e      	bne.n	80027dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800278e:	f7ff fc7b 	bl	8002088 <HAL_GetTick>
 8002792:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002794:	e01b      	b.n	80027ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002796:	f7ff fc77 	bl	8002088 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d914      	bls.n	80027ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10d      	bne.n	80027ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e007      	b.n	80027de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d0dc      	beq.n	8002796 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d127      	bne.n	8002850 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002816:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800281a:	d115      	bne.n	8002848 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fe1d 	bl	8002488 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800284e:	e004      	b.n	800285a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff fe12 	bl	800249a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f043 0204 	orr.w	r2, r3, #4
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fe01 	bl	80024ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4906      	ldr	r1, [pc, #24]	; (800294c <__NVIC_EnableIRQ+0x34>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff90 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff2d 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff42 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff90 	bl	80029a4 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5f 	bl	8002950 <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff35 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa2 	bl	8002a08 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e043      	b.n	8002b6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_DMA_Init+0xa8>)
 8002aee:	4413      	add	r3, r2
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_DMA_Init+0xac>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	009a      	lsls	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_DMA_Init+0xb0>)
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	bffdfff8 	.word	0xbffdfff8
 8002b7c:	cccccccd 	.word	0xcccccccd
 8002b80:	40020000 	.word	0x40020000

08002b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x20>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e04a      	b.n	8002c3a <HAL_DMA_Start_IT+0xb6>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d13a      	bne.n	8002c2c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fabe 	bl	800315c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 020e 	orr.w	r2, r2, #14
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e00f      	b.n	8002c1a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0204 	bic.w	r2, r2, #4
 8002c08:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 020a 	orr.w	r2, r2, #10
 8002c18:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e005      	b.n	8002c38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d008      	beq.n	8002c70 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2204      	movs	r2, #4
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e168      	b.n	8002f42 <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e15b      	b.n	8002f42 <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d131      	bne.n	8002cf4 <HAL_DMA_PollForTransfer+0xb0>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a9d      	ldr	r2, [pc, #628]	; (8002f0c <HAL_DMA_PollForTransfer+0x2c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d029      	beq.n	8002cee <HAL_DMA_PollForTransfer+0xaa>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a9c      	ldr	r2, [pc, #624]	; (8002f10 <HAL_DMA_PollForTransfer+0x2cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <HAL_DMA_PollForTransfer+0xa6>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a9a      	ldr	r2, [pc, #616]	; (8002f14 <HAL_DMA_PollForTransfer+0x2d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01a      	beq.n	8002ce4 <HAL_DMA_PollForTransfer+0xa0>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a99      	ldr	r2, [pc, #612]	; (8002f18 <HAL_DMA_PollForTransfer+0x2d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d012      	beq.n	8002cde <HAL_DMA_PollForTransfer+0x9a>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a97      	ldr	r2, [pc, #604]	; (8002f1c <HAL_DMA_PollForTransfer+0x2d8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_DMA_PollForTransfer+0x94>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a96      	ldr	r2, [pc, #600]	; (8002f20 <HAL_DMA_PollForTransfer+0x2dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d102      	bne.n	8002cd2 <HAL_DMA_PollForTransfer+0x8e>
 8002ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd0:	e00e      	b.n	8002cf0 <HAL_DMA_PollForTransfer+0xac>
 8002cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd6:	e00b      	b.n	8002cf0 <HAL_DMA_PollForTransfer+0xac>
 8002cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cdc:	e008      	b.n	8002cf0 <HAL_DMA_PollForTransfer+0xac>
 8002cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce2:	e005      	b.n	8002cf0 <HAL_DMA_PollForTransfer+0xac>
 8002ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce8:	e002      	b.n	8002cf0 <HAL_DMA_PollForTransfer+0xac>
 8002cea:	2320      	movs	r3, #32
 8002cec:	e000      	b.n	8002cf0 <HAL_DMA_PollForTransfer+0xac>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e030      	b.n	8002d56 <HAL_DMA_PollForTransfer+0x112>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a84      	ldr	r2, [pc, #528]	; (8002f0c <HAL_DMA_PollForTransfer+0x2c8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d029      	beq.n	8002d52 <HAL_DMA_PollForTransfer+0x10e>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a83      	ldr	r2, [pc, #524]	; (8002f10 <HAL_DMA_PollForTransfer+0x2cc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_PollForTransfer+0x10a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a81      	ldr	r2, [pc, #516]	; (8002f14 <HAL_DMA_PollForTransfer+0x2d0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01a      	beq.n	8002d48 <HAL_DMA_PollForTransfer+0x104>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a80      	ldr	r2, [pc, #512]	; (8002f18 <HAL_DMA_PollForTransfer+0x2d4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_PollForTransfer+0xfe>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7e      	ldr	r2, [pc, #504]	; (8002f1c <HAL_DMA_PollForTransfer+0x2d8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00a      	beq.n	8002d3c <HAL_DMA_PollForTransfer+0xf8>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7d      	ldr	r2, [pc, #500]	; (8002f20 <HAL_DMA_PollForTransfer+0x2dc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_DMA_PollForTransfer+0xf2>
 8002d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d34:	e00e      	b.n	8002d54 <HAL_DMA_PollForTransfer+0x110>
 8002d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d3a:	e00b      	b.n	8002d54 <HAL_DMA_PollForTransfer+0x110>
 8002d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d40:	e008      	b.n	8002d54 <HAL_DMA_PollForTransfer+0x110>
 8002d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d46:	e005      	b.n	8002d54 <HAL_DMA_PollForTransfer+0x110>
 8002d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4c:	e002      	b.n	8002d54 <HAL_DMA_PollForTransfer+0x110>
 8002d4e:	2340      	movs	r3, #64	; 0x40
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_PollForTransfer+0x110>
 8002d52:	2304      	movs	r3, #4
 8002d54:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d56:	f7ff f997 	bl	8002088 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8002d5c:	e06b      	b.n	8002e36 <HAL_DMA_PollForTransfer+0x1f2>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8002d5e:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <HAL_DMA_PollForTransfer+0x2e0>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4969      	ldr	r1, [pc, #420]	; (8002f0c <HAL_DMA_PollForTransfer+0x2c8>)
 8002d68:	428b      	cmp	r3, r1
 8002d6a:	d029      	beq.n	8002dc0 <HAL_DMA_PollForTransfer+0x17c>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4967      	ldr	r1, [pc, #412]	; (8002f10 <HAL_DMA_PollForTransfer+0x2cc>)
 8002d72:	428b      	cmp	r3, r1
 8002d74:	d022      	beq.n	8002dbc <HAL_DMA_PollForTransfer+0x178>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4966      	ldr	r1, [pc, #408]	; (8002f14 <HAL_DMA_PollForTransfer+0x2d0>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d01a      	beq.n	8002db6 <HAL_DMA_PollForTransfer+0x172>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4964      	ldr	r1, [pc, #400]	; (8002f18 <HAL_DMA_PollForTransfer+0x2d4>)
 8002d86:	428b      	cmp	r3, r1
 8002d88:	d012      	beq.n	8002db0 <HAL_DMA_PollForTransfer+0x16c>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4963      	ldr	r1, [pc, #396]	; (8002f1c <HAL_DMA_PollForTransfer+0x2d8>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d00a      	beq.n	8002daa <HAL_DMA_PollForTransfer+0x166>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4961      	ldr	r1, [pc, #388]	; (8002f20 <HAL_DMA_PollForTransfer+0x2dc>)
 8002d9a:	428b      	cmp	r3, r1
 8002d9c:	d102      	bne.n	8002da4 <HAL_DMA_PollForTransfer+0x160>
 8002d9e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002da2:	e00e      	b.n	8002dc2 <HAL_DMA_PollForTransfer+0x17e>
 8002da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002da8:	e00b      	b.n	8002dc2 <HAL_DMA_PollForTransfer+0x17e>
 8002daa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dae:	e008      	b.n	8002dc2 <HAL_DMA_PollForTransfer+0x17e>
 8002db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db4:	e005      	b.n	8002dc2 <HAL_DMA_PollForTransfer+0x17e>
 8002db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dba:	e002      	b.n	8002dc2 <HAL_DMA_PollForTransfer+0x17e>
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_PollForTransfer+0x17e>
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_DMA_PollForTransfer+0x1b4>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0a4      	b.n	8002f42 <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d01a      	beq.n	8002e36 <HAL_DMA_PollForTransfer+0x1f2>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_DMA_PollForTransfer+0x1d2>
 8002e06:	f7ff f93f 	bl	8002088 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d20f      	bcs.n	8002e36 <HAL_DMA_PollForTransfer+0x1f2>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e085      	b.n	8002f42 <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_DMA_PollForTransfer+0x2e0>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d08d      	beq.n	8002d5e <HAL_DMA_PollForTransfer+0x11a>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d136      	bne.n	8002eb6 <HAL_DMA_PollForTransfer+0x272>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <HAL_DMA_PollForTransfer+0x2c8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d029      	beq.n	8002ea6 <HAL_DMA_PollForTransfer+0x262>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <HAL_DMA_PollForTransfer+0x2cc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_PollForTransfer+0x25e>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <HAL_DMA_PollForTransfer+0x2d0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01a      	beq.n	8002e9c <HAL_DMA_PollForTransfer+0x258>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_DMA_PollForTransfer+0x2d4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d012      	beq.n	8002e96 <HAL_DMA_PollForTransfer+0x252>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <HAL_DMA_PollForTransfer+0x2d8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00a      	beq.n	8002e90 <HAL_DMA_PollForTransfer+0x24c>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_DMA_PollForTransfer+0x2dc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d102      	bne.n	8002e8a <HAL_DMA_PollForTransfer+0x246>
 8002e84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e88:	e00e      	b.n	8002ea8 <HAL_DMA_PollForTransfer+0x264>
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	e00b      	b.n	8002ea8 <HAL_DMA_PollForTransfer+0x264>
 8002e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e94:	e008      	b.n	8002ea8 <HAL_DMA_PollForTransfer+0x264>
 8002e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e9a:	e005      	b.n	8002ea8 <HAL_DMA_PollForTransfer+0x264>
 8002e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea0:	e002      	b.n	8002ea8 <HAL_DMA_PollForTransfer+0x264>
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_PollForTransfer+0x264>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_DMA_PollForTransfer+0x2e0>)
 8002eaa:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002eb4:	e040      	b.n	8002f38 <HAL_DMA_PollForTransfer+0x2f4>
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <HAL_DMA_PollForTransfer+0x2c8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d038      	beq.n	8002f32 <HAL_DMA_PollForTransfer+0x2ee>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <HAL_DMA_PollForTransfer+0x2cc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_DMA_PollForTransfer+0x2ea>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_DMA_PollForTransfer+0x2d0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d029      	beq.n	8002f28 <HAL_DMA_PollForTransfer+0x2e4>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HAL_DMA_PollForTransfer+0x2d4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d012      	beq.n	8002f04 <HAL_DMA_PollForTransfer+0x2c0>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <HAL_DMA_PollForTransfer+0x2d8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00a      	beq.n	8002efe <HAL_DMA_PollForTransfer+0x2ba>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <HAL_DMA_PollForTransfer+0x2dc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d102      	bne.n	8002ef8 <HAL_DMA_PollForTransfer+0x2b4>
 8002ef2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ef6:	e01d      	b.n	8002f34 <HAL_DMA_PollForTransfer+0x2f0>
 8002ef8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002efc:	e01a      	b.n	8002f34 <HAL_DMA_PollForTransfer+0x2f0>
 8002efe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f02:	e017      	b.n	8002f34 <HAL_DMA_PollForTransfer+0x2f0>
 8002f04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f08:	e014      	b.n	8002f34 <HAL_DMA_PollForTransfer+0x2f0>
 8002f0a:	bf00      	nop
 8002f0c:	40020008 	.word	0x40020008
 8002f10:	4002001c 	.word	0x4002001c
 8002f14:	40020030 	.word	0x40020030
 8002f18:	40020044 	.word	0x40020044
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	4002006c 	.word	0x4002006c
 8002f24:	40020000 	.word	0x40020000
 8002f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f2c:	e002      	b.n	8002f34 <HAL_DMA_PollForTransfer+0x2f0>
 8002f2e:	2340      	movs	r3, #64	; 0x40
 8002f30:	e000      	b.n	8002f34 <HAL_DMA_PollForTransfer+0x2f0>
 8002f32:	2304      	movs	r3, #4
 8002f34:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <HAL_DMA_PollForTransfer+0x308>)
 8002f36:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40020000 	.word	0x40020000

08002f50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d04f      	beq.n	8003018 <HAL_DMA_IRQHandler+0xc8>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04a      	beq.n	8003018 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_DMA_IRQHandler+0x1f0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d029      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xae>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a65      	ldr	r2, [pc, #404]	; (8003144 <HAL_DMA_IRQHandler+0x1f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xaa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_DMA_IRQHandler+0x1f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0xa4>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a62      	ldr	r2, [pc, #392]	; (800314c <HAL_DMA_IRQHandler+0x1fc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_IRQHandler+0x9e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a60      	ldr	r2, [pc, #384]	; (8003150 <HAL_DMA_IRQHandler+0x200>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x98>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	; (8003154 <HAL_DMA_IRQHandler+0x204>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d102      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x92>
 8002fdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fe0:	e00e      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002fe2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fe6:	e00b      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002fe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fec:	e008      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002fee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ff2:	e005      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff8:	e002      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002ffa:	2340      	movs	r3, #64	; 0x40
 8002ffc:	e000      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002ffe:	2304      	movs	r3, #4
 8003000:	4a55      	ldr	r2, [pc, #340]	; (8003158 <HAL_DMA_IRQHandler+0x208>)
 8003002:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8094 	beq.w	8003136 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003016:	e08e      	b.n	8003136 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2202      	movs	r2, #2
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d056      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x186>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d051      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020a 	bic.w	r2, r2, #10
 800304e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_DMA_IRQHandler+0x1f0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d029      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x166>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a37      	ldr	r2, [pc, #220]	; (8003144 <HAL_DMA_IRQHandler+0x1f4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x162>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a35      	ldr	r2, [pc, #212]	; (8003148 <HAL_DMA_IRQHandler+0x1f8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01a      	beq.n	80030ac <HAL_DMA_IRQHandler+0x15c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a34      	ldr	r2, [pc, #208]	; (800314c <HAL_DMA_IRQHandler+0x1fc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d012      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x156>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a32      	ldr	r2, [pc, #200]	; (8003150 <HAL_DMA_IRQHandler+0x200>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00a      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x150>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a31      	ldr	r2, [pc, #196]	; (8003154 <HAL_DMA_IRQHandler+0x204>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d102      	bne.n	800309a <HAL_DMA_IRQHandler+0x14a>
 8003094:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003098:	e00e      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 800309a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309e:	e00b      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a4:	e008      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030aa:	e005      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b0:	e002      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030b2:	2320      	movs	r3, #32
 80030b4:	e000      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030b6:	2302      	movs	r3, #2
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_DMA_IRQHandler+0x208>)
 80030ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d034      	beq.n	8003136 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030d4:	e02f      	b.n	8003136 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2208      	movs	r2, #8
 80030dc:	409a      	lsls	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d028      	beq.n	8003138 <HAL_DMA_IRQHandler+0x1e8>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d023      	beq.n	8003138 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
    }
  }
  return;
 8003136:	bf00      	nop
 8003138:	bf00      	nop
}
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40020008 	.word	0x40020008
 8003144:	4002001c 	.word	0x4002001c
 8003148:	40020030 	.word	0x40020030
 800314c:	40020044 	.word	0x40020044
 8003150:	40020058 	.word	0x40020058
 8003154:	4002006c 	.word	0x4002006c
 8003158:	40020000 	.word	0x40020000

0800315c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	2101      	movs	r1, #1
 8003174:	fa01 f202 	lsl.w	r2, r1, r2
 8003178:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b10      	cmp	r3, #16
 8003188:	d108      	bne.n	800319c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800319a:	e007      	b.n	80031ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ca:	e169      	b.n	80034a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031cc:	2201      	movs	r2, #1
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8158 	bne.w	800349a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a9a      	ldr	r2, [pc, #616]	; (8003458 <HAL_GPIO_Init+0x2a0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d05e      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 80031f4:	4a98      	ldr	r2, [pc, #608]	; (8003458 <HAL_GPIO_Init+0x2a0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d875      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 80031fa:	4a98      	ldr	r2, [pc, #608]	; (800345c <HAL_GPIO_Init+0x2a4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d058      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 8003200:	4a96      	ldr	r2, [pc, #600]	; (800345c <HAL_GPIO_Init+0x2a4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d86f      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 8003206:	4a96      	ldr	r2, [pc, #600]	; (8003460 <HAL_GPIO_Init+0x2a8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d052      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 800320c:	4a94      	ldr	r2, [pc, #592]	; (8003460 <HAL_GPIO_Init+0x2a8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d869      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 8003212:	4a94      	ldr	r2, [pc, #592]	; (8003464 <HAL_GPIO_Init+0x2ac>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d04c      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 8003218:	4a92      	ldr	r2, [pc, #584]	; (8003464 <HAL_GPIO_Init+0x2ac>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d863      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 800321e:	4a92      	ldr	r2, [pc, #584]	; (8003468 <HAL_GPIO_Init+0x2b0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d046      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
 8003224:	4a90      	ldr	r2, [pc, #576]	; (8003468 <HAL_GPIO_Init+0x2b0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d85d      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 800322a:	2b12      	cmp	r3, #18
 800322c:	d82a      	bhi.n	8003284 <HAL_GPIO_Init+0xcc>
 800322e:	2b12      	cmp	r3, #18
 8003230:	d859      	bhi.n	80032e6 <HAL_GPIO_Init+0x12e>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_GPIO_Init+0x80>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	080032b3 	.word	0x080032b3
 800323c:	0800328d 	.word	0x0800328d
 8003240:	0800329f 	.word	0x0800329f
 8003244:	080032e1 	.word	0x080032e1
 8003248:	080032e7 	.word	0x080032e7
 800324c:	080032e7 	.word	0x080032e7
 8003250:	080032e7 	.word	0x080032e7
 8003254:	080032e7 	.word	0x080032e7
 8003258:	080032e7 	.word	0x080032e7
 800325c:	080032e7 	.word	0x080032e7
 8003260:	080032e7 	.word	0x080032e7
 8003264:	080032e7 	.word	0x080032e7
 8003268:	080032e7 	.word	0x080032e7
 800326c:	080032e7 	.word	0x080032e7
 8003270:	080032e7 	.word	0x080032e7
 8003274:	080032e7 	.word	0x080032e7
 8003278:	080032e7 	.word	0x080032e7
 800327c:	08003295 	.word	0x08003295
 8003280:	080032a9 	.word	0x080032a9
 8003284:	4a79      	ldr	r2, [pc, #484]	; (800346c <HAL_GPIO_Init+0x2b4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800328a:	e02c      	b.n	80032e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	623b      	str	r3, [r7, #32]
          break;
 8003292:	e029      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	3304      	adds	r3, #4
 800329a:	623b      	str	r3, [r7, #32]
          break;
 800329c:	e024      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	3308      	adds	r3, #8
 80032a4:	623b      	str	r3, [r7, #32]
          break;
 80032a6:	e01f      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	330c      	adds	r3, #12
 80032ae:	623b      	str	r3, [r7, #32]
          break;
 80032b0:	e01a      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032ba:	2304      	movs	r3, #4
 80032bc:	623b      	str	r3, [r7, #32]
          break;
 80032be:	e013      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032c8:	2308      	movs	r3, #8
 80032ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	611a      	str	r2, [r3, #16]
          break;
 80032d2:	e009      	b.n	80032e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032d4:	2308      	movs	r3, #8
 80032d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	615a      	str	r2, [r3, #20]
          break;
 80032de:	e003      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
          break;
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_Init+0x130>
          break;
 80032e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2bff      	cmp	r3, #255	; 0xff
 80032ec:	d801      	bhi.n	80032f2 <HAL_GPIO_Init+0x13a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	e001      	b.n	80032f6 <HAL_GPIO_Init+0x13e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2bff      	cmp	r3, #255	; 0xff
 80032fc:	d802      	bhi.n	8003304 <HAL_GPIO_Init+0x14c>
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	e002      	b.n	800330a <HAL_GPIO_Init+0x152>
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	3b08      	subs	r3, #8
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	210f      	movs	r1, #15
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	6a39      	ldr	r1, [r7, #32]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	431a      	orrs	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80b1 	beq.w	800349a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003338:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <HAL_GPIO_Init+0x2b8>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	4a4c      	ldr	r2, [pc, #304]	; (8003470 <HAL_GPIO_Init+0x2b8>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6193      	str	r3, [r2, #24]
 8003344:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_GPIO_Init+0x2b8>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003350:	4a48      	ldr	r2, [pc, #288]	; (8003474 <HAL_GPIO_Init+0x2bc>)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a40      	ldr	r2, [pc, #256]	; (8003478 <HAL_GPIO_Init+0x2c0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_GPIO_Init+0x1ec>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3f      	ldr	r2, [pc, #252]	; (800347c <HAL_GPIO_Init+0x2c4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00d      	beq.n	80033a0 <HAL_GPIO_Init+0x1e8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3e      	ldr	r2, [pc, #248]	; (8003480 <HAL_GPIO_Init+0x2c8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <HAL_GPIO_Init+0x1e4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3d      	ldr	r2, [pc, #244]	; (8003484 <HAL_GPIO_Init+0x2cc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_GPIO_Init+0x1e0>
 8003394:	2303      	movs	r3, #3
 8003396:	e006      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 8003398:	2304      	movs	r3, #4
 800339a:	e004      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 800339c:	2302      	movs	r3, #2
 800339e:	e002      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_GPIO_Init+0x1ee>
 80033a4:	2300      	movs	r3, #0
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	f002 0203 	and.w	r2, r2, #3
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	4093      	lsls	r3, r2
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033b6:	492f      	ldr	r1, [pc, #188]	; (8003474 <HAL_GPIO_Init+0x2bc>)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	3302      	adds	r3, #2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	492c      	ldr	r1, [pc, #176]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	4928      	ldr	r1, [pc, #160]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4922      	ldr	r1, [pc, #136]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	43db      	mvns	r3, r3
 800340e:	491e      	ldr	r1, [pc, #120]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003410:	4013      	ands	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4918      	ldr	r1, [pc, #96]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800342e:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	4914      	ldr	r1, [pc, #80]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003438:	4013      	ands	r3, r2
 800343a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d021      	beq.n	800348c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	490e      	ldr	r1, [pc, #56]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	60cb      	str	r3, [r1, #12]
 8003454:	e021      	b.n	800349a <HAL_GPIO_Init+0x2e2>
 8003456:	bf00      	nop
 8003458:	10320000 	.word	0x10320000
 800345c:	10310000 	.word	0x10310000
 8003460:	10220000 	.word	0x10220000
 8003464:	10210000 	.word	0x10210000
 8003468:	10120000 	.word	0x10120000
 800346c:	10110000 	.word	0x10110000
 8003470:	40021000 	.word	0x40021000
 8003474:	40010000 	.word	0x40010000
 8003478:	40010800 	.word	0x40010800
 800347c:	40010c00 	.word	0x40010c00
 8003480:	40011000 	.word	0x40011000
 8003484:	40011400 	.word	0x40011400
 8003488:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_GPIO_Init+0x304>)
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	43db      	mvns	r3, r3
 8003494:	4909      	ldr	r1, [pc, #36]	; (80034bc <HAL_GPIO_Init+0x304>)
 8003496:	4013      	ands	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	3301      	adds	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f47f ae8e 	bne.w	80031cc <HAL_GPIO_Init+0x14>
  }
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	372c      	adds	r7, #44	; 0x2c
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40010400 	.word	0x40010400

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	041a      	lsls	r2, r3, #16
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43d9      	mvns	r1, r3
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	400b      	ands	r3, r1
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	611a      	str	r2, [r3, #16]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fb1c 	bl	8001b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40010400 	.word	0x40010400

08003554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e26c      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8087 	beq.w	8003682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003574:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b04      	cmp	r3, #4
 800357e:	d00c      	beq.n	800359a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003580:	4b8f      	ldr	r3, [pc, #572]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d112      	bne.n	80035b2 <HAL_RCC_OscConfig+0x5e>
 800358c:	4b8c      	ldr	r3, [pc, #560]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d10b      	bne.n	80035b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359a:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d06c      	beq.n	8003680 <HAL_RCC_OscConfig+0x12c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d168      	bne.n	8003680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e246      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x76>
 80035bc:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7f      	ldr	r2, [pc, #508]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e02e      	b.n	8003628 <HAL_RCC_OscConfig+0xd4>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x98>
 80035d2:	4b7b      	ldr	r3, [pc, #492]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a7a      	ldr	r2, [pc, #488]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b78      	ldr	r3, [pc, #480]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a77      	ldr	r2, [pc, #476]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e01d      	b.n	8003628 <HAL_RCC_OscConfig+0xd4>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0xbc>
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a71      	ldr	r2, [pc, #452]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0xd4>
 8003610:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a6a      	ldr	r2, [pc, #424]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a67      	ldr	r2, [pc, #412]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fd2a 	bl	8002088 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fd26 	bl	8002088 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e1fa      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0xe4>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fd16 	bl	8002088 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fd12 	bl	8002088 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1e6      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x10c>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d063      	beq.n	8003756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800368e:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d11c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x18c>
 80036a6:	4b46      	ldr	r3, [pc, #280]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d116      	bne.n	80036e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_RCC_OscConfig+0x176>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e1ba      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4939      	ldr	r1, [pc, #228]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036de:	e03a      	b.n	8003756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <HAL_RCC_OscConfig+0x270>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe fccb 	bl	8002088 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f6:	f7fe fcc7 	bl	8002088 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e19b      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4927      	ldr	r1, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]
 8003728:	e015      	b.n	8003756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372a:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <HAL_RCC_OscConfig+0x270>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fcaa 	bl	8002088 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003738:	f7fe fca6 	bl	8002088 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e17a      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d03a      	beq.n	80037d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d019      	beq.n	800379e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <HAL_RCC_OscConfig+0x274>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003770:	f7fe fc8a 	bl	8002088 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003778:	f7fe fc86 	bl	8002088 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e15a      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_RCC_OscConfig+0x26c>)
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003796:	2001      	movs	r0, #1
 8003798:	f000 fac4 	bl	8003d24 <RCC_Delay>
 800379c:	e01c      	b.n	80037d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_OscConfig+0x274>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a4:	f7fe fc70 	bl	8002088 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037aa:	e00f      	b.n	80037cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fe fc6c 	bl	8002088 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d908      	bls.n	80037cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e140      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	42420000 	.word	0x42420000
 80037c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b9e      	ldr	r3, [pc, #632]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e9      	bne.n	80037ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a6 	beq.w	8003932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b97      	ldr	r3, [pc, #604]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10d      	bne.n	8003812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	4b94      	ldr	r3, [pc, #592]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4a93      	ldr	r2, [pc, #588]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	61d3      	str	r3, [r2, #28]
 8003802:	4b91      	ldr	r3, [pc, #580]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b8e      	ldr	r3, [pc, #568]	; (8003a4c <HAL_RCC_OscConfig+0x4f8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x4f8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a8a      	ldr	r2, [pc, #552]	; (8003a4c <HAL_RCC_OscConfig+0x4f8>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fe fc2d 	bl	8002088 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fe fc29 	bl	8002088 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	; 0x64
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0fd      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b81      	ldr	r3, [pc, #516]	; (8003a4c <HAL_RCC_OscConfig+0x4f8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x312>
 8003858:	4b7b      	ldr	r3, [pc, #492]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4a7a      	ldr	r2, [pc, #488]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6213      	str	r3, [r2, #32]
 8003864:	e02d      	b.n	80038c2 <HAL_RCC_OscConfig+0x36e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x334>
 800386e:	4b76      	ldr	r3, [pc, #472]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	4a75      	ldr	r2, [pc, #468]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6213      	str	r3, [r2, #32]
 800387a:	4b73      	ldr	r3, [pc, #460]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a72      	ldr	r2, [pc, #456]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	e01c      	b.n	80038c2 <HAL_RCC_OscConfig+0x36e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0x356>
 8003890:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4a6c      	ldr	r2, [pc, #432]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003896:	f043 0304 	orr.w	r3, r3, #4
 800389a:	6213      	str	r3, [r2, #32]
 800389c:	4b6a      	ldr	r3, [pc, #424]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4a69      	ldr	r2, [pc, #420]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6213      	str	r3, [r2, #32]
 80038a8:	e00b      	b.n	80038c2 <HAL_RCC_OscConfig+0x36e>
 80038aa:	4b67      	ldr	r3, [pc, #412]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4a66      	ldr	r2, [pc, #408]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6213      	str	r3, [r2, #32]
 80038b6:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a63      	ldr	r2, [pc, #396]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d015      	beq.n	80038f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fe fbdd 	bl	8002088 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe fbd9 	bl	8002088 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0ab      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RCC_OscConfig+0x37e>
 80038f4:	e014      	b.n	8003920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fe fbc7 	bl	8002088 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe fbc3 	bl	8002088 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e095      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ee      	bne.n	80038fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003926:	4b48      	ldr	r3, [pc, #288]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4a47      	ldr	r2, [pc, #284]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8081 	beq.w	8003a3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800393c:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b08      	cmp	r3, #8
 8003946:	d061      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d146      	bne.n	80039de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003950:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <HAL_RCC_OscConfig+0x4fc>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fe fb97 	bl	8002088 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395e:	f7fe fb93 	bl	8002088 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e067      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d108      	bne.n	8003998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	492d      	ldr	r1, [pc, #180]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a19      	ldr	r1, [r3, #32]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	430b      	orrs	r3, r1
 80039aa:	4927      	ldr	r1, [pc, #156]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCC_OscConfig+0x4fc>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fe fb67 	bl	8002088 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039be:	f7fe fb63 	bl	8002088 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e037      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x46a>
 80039dc:	e02f      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_RCC_OscConfig+0x4fc>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe fb50 	bl	8002088 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fe fb4c 	bl	8002088 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e020      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039fe:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x498>
 8003a0a:	e018      	b.n	8003a3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e013      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	42420060 	.word	0x42420060

08003a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0d0      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b67      	ldr	r3, [pc, #412]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 0207 	bic.w	r2, r3, #7
 8003a7e:	4965      	ldr	r1, [pc, #404]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b63      	ldr	r3, [pc, #396]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b8      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab0:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a58      	ldr	r2, [pc, #352]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a52      	ldr	r2, [pc, #328]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	494d      	ldr	r1, [pc, #308]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d040      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d115      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07f      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e073      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06b      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4936      	ldr	r1, [pc, #216]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b44:	f7fe faa0 	bl	8002088 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe fa9c 	bl	8002088 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e053      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d210      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	4922      	ldr	r1, [pc, #136]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4916      	ldr	r1, [pc, #88]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be2:	f000 f821 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003be6:	4602      	mov	r2, r0
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	490a      	ldr	r1, [pc, #40]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	5ccb      	ldrb	r3, [r1, r3]
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1cc>)
 8003bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1d0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe f9fe 	bl	8002004 <HAL_InitTick>

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40022000 	.word	0x40022000
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	0800586c 	.word	0x0800586c
 8003c20:	2000001c 	.word	0x2000001c
 8003c24:	20000020 	.word	0x20000020

08003c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	b490      	push	{r4, r7}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c30:	1d3c      	adds	r4, r7, #4
 8003c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c38:	f240 2301 	movw	r3, #513	; 0x201
 8003c3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x40>
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x46>
 8003c66:	e02d      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6a:	623b      	str	r3, [r7, #32]
      break;
 8003c6c:	e02d      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	0c9b      	lsrs	r3, r3, #18
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0c5b      	lsrs	r3, r3, #17
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ca0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca6:	fb02 f203 	mul.w	r2, r2, r3
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	e004      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cb8:	fb02 f303 	mul.w	r3, r2, r3
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	623b      	str	r3, [r7, #32]
      break;
 8003cc2:	e002      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc6:	623b      	str	r3, [r7, #32]
      break;
 8003cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cca:	6a3b      	ldr	r3, [r7, #32]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3728      	adds	r7, #40	; 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc90      	pop	{r4, r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	0800585c 	.word	0x0800585c
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	007a1200 	.word	0x007a1200
 8003ce4:	003d0900 	.word	0x003d0900

08003ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	2000001c 	.word	0x2000001c

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d00:	f7ff fff2 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	0800587c 	.word	0x0800587c

08003d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <RCC_Delay+0x34>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <RCC_Delay+0x38>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a5b      	lsrs	r3, r3, #9
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d40:	bf00      	nop
  }
  while (Delay --);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f9      	bne.n	8003d40 <RCC_Delay+0x1c>
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	2000001c 	.word	0x2000001c
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d07d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d96:	61d3      	str	r3, [r2, #28]
 8003d98:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d118      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db4:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc0:	f7fe f962 	bl	8002088 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	e008      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fe f95e 	bl	8002088 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e06d      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d027      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e04:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fe f92d 	bl	8002088 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fe f929 	bl	8002088 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e036      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4917      	ldr	r1, [pc, #92]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	490b      	ldr	r1, [pc, #44]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	42420440 	.word	0x42420440

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e041      	b.n	8003f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd ff16 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 fcf8 	bl	8004900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e03a      	b.n	8003ffa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIM_Base_Start_IT+0x98>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <HAL_TIM_Base_Start_IT+0xa0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d111      	bne.n	8003fe8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d010      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe6:	e007      	b.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800

08004010 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6a1a      	ldr	r2, [r3, #32]
 800402e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10f      	bne.n	8004058 <HAL_TIM_Base_Stop_IT+0x48>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	f240 4344 	movw	r3, #1092	; 0x444
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <HAL_TIM_Base_Stop_IT+0x48>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e041      	b.n	8004102 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f839 	bl	800410a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f000 fc28 	bl	8004900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_TIM_PWM_Start+0x24>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e022      	b.n	8004186 <HAL_TIM_PWM_Start+0x6a>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b04      	cmp	r3, #4
 8004144:	d109      	bne.n	800415a <HAL_TIM_PWM_Start+0x3e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	e015      	b.n	8004186 <HAL_TIM_PWM_Start+0x6a>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d109      	bne.n	8004174 <HAL_TIM_PWM_Start+0x58>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e008      	b.n	8004186 <HAL_TIM_PWM_Start+0x6a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e05e      	b.n	800424c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start+0x82>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419c:	e013      	b.n	80041c6 <HAL_TIM_PWM_Start+0xaa>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0x92>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ac:	e00b      	b.n	80041c6 <HAL_TIM_PWM_Start+0xaa>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0xa2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041bc:	e003      	b.n	80041c6 <HAL_TIM_PWM_Start+0xaa>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fe16 	bl	8004e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_TIM_PWM_Start+0x138>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d107      	bne.n	80041ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_TIM_PWM_Start+0x138>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00e      	beq.n	8004216 <HAL_TIM_PWM_Start+0xfa>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d009      	beq.n	8004216 <HAL_TIM_PWM_Start+0xfa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a14      	ldr	r2, [pc, #80]	; (8004258 <HAL_TIM_PWM_Start+0x13c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_TIM_PWM_Start+0xfa>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a12      	ldr	r2, [pc, #72]	; (800425c <HAL_TIM_PWM_Start+0x140>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d111      	bne.n	800423a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d010      	beq.n	800424a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	e007      	b.n	800424a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800

08004260 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e093      	b.n	800439c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fd fd83 	bl	8001d94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a4:	f023 0307 	bic.w	r3, r3, #7
 80042a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f000 fb23 	bl	8004900 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	4313      	orrs	r3, r2
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004300:	f023 030c 	bic.w	r3, r3, #12
 8004304:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800430c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	4313      	orrs	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	4313      	orrs	r3, r2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4313      	orrs	r3, r2
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0202 	mvn.w	r2, #2
 80043d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa6f 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa62 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fa71 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b04      	cmp	r3, #4
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0204 	mvn.w	r2, #4
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa45 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa38 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fa47 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b08      	cmp	r3, #8
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0208 	mvn.w	r2, #8
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2204      	movs	r2, #4
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa1b 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa0e 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fa1d 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2208      	movs	r2, #8
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9f1 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9e4 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9f3 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0201 	mvn.w	r2, #1
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd faf4 	bl	8001b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d10e      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d107      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fce1 	bl	8004f16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d10e      	bne.n	8004580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d107      	bne.n	8004580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f9b7 	bl	80048ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b20      	cmp	r3, #32
 800458c:	d10e      	bne.n	80045ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d107      	bne.n	80045ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0220 	mvn.w	r2, #32
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fcac 	bl	8004f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e0ac      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x174>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	f200 809f 	bhi.w	800471c <HAL_TIM_PWM_ConfigChannel+0x168>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	08004619 	.word	0x08004619
 80045e8:	0800471d 	.word	0x0800471d
 80045ec:	0800471d 	.word	0x0800471d
 80045f0:	0800471d 	.word	0x0800471d
 80045f4:	08004659 	.word	0x08004659
 80045f8:	0800471d 	.word	0x0800471d
 80045fc:	0800471d 	.word	0x0800471d
 8004600:	0800471d 	.word	0x0800471d
 8004604:	0800469b 	.word	0x0800469b
 8004608:	0800471d 	.word	0x0800471d
 800460c:	0800471d 	.word	0x0800471d
 8004610:	0800471d 	.word	0x0800471d
 8004614:	080046db 	.word	0x080046db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f9d0 	bl	80049c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0208 	orr.w	r2, r2, #8
 8004632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0204 	bic.w	r2, r2, #4
 8004642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	619a      	str	r2, [r3, #24]
      break;
 8004656:	e062      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fa16 	bl	8004a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	619a      	str	r2, [r3, #24]
      break;
 8004698:	e041      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fa5f 	bl	8004b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0208 	orr.w	r2, r2, #8
 80046b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0204 	bic.w	r2, r2, #4
 80046c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	61da      	str	r2, [r3, #28]
      break;
 80046d8:	e021      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 faa9 	bl	8004c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69d9      	ldr	r1, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	021a      	lsls	r2, r3, #8
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	61da      	str	r2, [r3, #28]
      break;
 800471a:	e000      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800471c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIM_ConfigClockSource+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e0b3      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x180>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800476e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004780:	d03e      	beq.n	8004800 <HAL_TIM_ConfigClockSource+0xd0>
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004786:	f200 8087 	bhi.w	8004898 <HAL_TIM_ConfigClockSource+0x168>
 800478a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478e:	f000 8085 	beq.w	800489c <HAL_TIM_ConfigClockSource+0x16c>
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d87f      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
 8004798:	2b70      	cmp	r3, #112	; 0x70
 800479a:	d01a      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0xa2>
 800479c:	2b70      	cmp	r3, #112	; 0x70
 800479e:	d87b      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
 80047a0:	2b60      	cmp	r3, #96	; 0x60
 80047a2:	d050      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x116>
 80047a4:	2b60      	cmp	r3, #96	; 0x60
 80047a6:	d877      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
 80047a8:	2b50      	cmp	r3, #80	; 0x50
 80047aa:	d03c      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0xf6>
 80047ac:	2b50      	cmp	r3, #80	; 0x50
 80047ae:	d873      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	d058      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x136>
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d86f      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
 80047b8:	2b30      	cmp	r3, #48	; 0x30
 80047ba:	d064      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x156>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d86b      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d060      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x156>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d867      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d05c      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x156>
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d05a      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047d0:	e062      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6899      	ldr	r1, [r3, #8]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f000 faee 	bl	8004dc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	609a      	str	r2, [r3, #8]
      break;
 80047fe:	e04e      	b.n	800489e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6899      	ldr	r1, [r3, #8]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f000 fad7 	bl	8004dc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004822:	609a      	str	r2, [r3, #8]
      break;
 8004824:	e03b      	b.n	800489e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	461a      	mov	r2, r3
 8004834:	f000 fa4e 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2150      	movs	r1, #80	; 0x50
 800483e:	4618      	mov	r0, r3
 8004840:	f000 faa5 	bl	8004d8e <TIM_ITRx_SetConfig>
      break;
 8004844:	e02b      	b.n	800489e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	461a      	mov	r2, r3
 8004854:	f000 fa6c 	bl	8004d30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2160      	movs	r1, #96	; 0x60
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fa95 	bl	8004d8e <TIM_ITRx_SetConfig>
      break;
 8004864:	e01b      	b.n	800489e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6859      	ldr	r1, [r3, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	461a      	mov	r2, r3
 8004874:	f000 fa2e 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2140      	movs	r1, #64	; 0x40
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fa85 	bl	8004d8e <TIM_ITRx_SetConfig>
      break;
 8004884:	e00b      	b.n	800489e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f000 fa7c 	bl	8004d8e <TIM_ITRx_SetConfig>
        break;
 8004896:	e002      	b.n	800489e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004898:	bf00      	nop
 800489a:	e000      	b.n	800489e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800489c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr

08004900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0xb8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_Base_SetConfig+0x30>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d007      	beq.n	8004930 <TIM_Base_SetConfig+0x30>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a26      	ldr	r2, [pc, #152]	; (80049bc <TIM_Base_SetConfig+0xbc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0x30>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a25      	ldr	r2, [pc, #148]	; (80049c0 <TIM_Base_SetConfig+0xc0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d108      	bne.n	8004942 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <TIM_Base_SetConfig+0xb8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_Base_SetConfig+0x62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d007      	beq.n	8004962 <TIM_Base_SetConfig+0x62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <TIM_Base_SetConfig+0xbc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_Base_SetConfig+0x62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <TIM_Base_SetConfig+0xc0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d108      	bne.n	8004974 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a07      	ldr	r2, [pc, #28]	; (80049b8 <TIM_Base_SetConfig+0xb8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d103      	bne.n	80049a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	615a      	str	r2, [r3, #20]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800

080049c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 0302 	bic.w	r3, r3, #2
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <TIM_OC1_SetConfig+0xc8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10c      	bne.n	8004a3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0308 	bic.w	r3, r3, #8
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <TIM_OC1_SetConfig+0xc8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d111      	bne.n	8004a66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00

08004a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0210 	bic.w	r2, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0320 	bic.w	r3, r3, #32
 8004ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <TIM_OC2_SetConfig+0xd0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10d      	bne.n	8004b0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <TIM_OC2_SetConfig+0xd0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d113      	bne.n	8004b3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	40012c00 	.word	0x40012c00

08004b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <TIM_OC3_SetConfig+0xd0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d10d      	bne.n	8004bde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <TIM_OC3_SetConfig+0xd0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d113      	bne.n	8004c0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00

08004c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	031b      	lsls	r3, r3, #12
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a0f      	ldr	r2, [pc, #60]	; (8004cd0 <TIM_OC4_SetConfig+0x98>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d109      	bne.n	8004cac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	019b      	lsls	r3, r3, #6
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	40012c00 	.word	0x40012c00

08004cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f023 0210 	bic.w	r2, r3, #16
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	031b      	lsls	r3, r3, #12
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	621a      	str	r2, [r3, #32]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f043 0307 	orr.w	r3, r3, #7
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	609a      	str	r2, [r3, #8]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b087      	sub	sp, #28
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	021a      	lsls	r2, r3, #8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	609a      	str	r2, [r3, #8]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2201      	movs	r2, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e046      	b.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eac:	d009      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a12      	ldr	r2, [pc, #72]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10c      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40000800 	.word	0x40000800

08004f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <__errno>:
 8004f28:	4b01      	ldr	r3, [pc, #4]	; (8004f30 <__errno+0x8>)
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000028 	.word	0x20000028

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	2600      	movs	r6, #0
 8004f38:	4d0c      	ldr	r5, [pc, #48]	; (8004f6c <__libc_init_array+0x38>)
 8004f3a:	4c0d      	ldr	r4, [pc, #52]	; (8004f70 <__libc_init_array+0x3c>)
 8004f3c:	1b64      	subs	r4, r4, r5
 8004f3e:	10a4      	asrs	r4, r4, #2
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	f000 fc5c 	bl	8005800 <_init>
 8004f48:	2600      	movs	r6, #0
 8004f4a:	4d0a      	ldr	r5, [pc, #40]	; (8004f74 <__libc_init_array+0x40>)
 8004f4c:	4c0a      	ldr	r4, [pc, #40]	; (8004f78 <__libc_init_array+0x44>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	080058b8 	.word	0x080058b8
 8004f70:	080058b8 	.word	0x080058b8
 8004f74:	080058b8 	.word	0x080058b8
 8004f78:	080058bc 	.word	0x080058bc

08004f7c <memset>:
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4402      	add	r2, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <siprintf>:
 8004f8c:	b40e      	push	{r1, r2, r3}
 8004f8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f92:	b500      	push	{lr}
 8004f94:	b09c      	sub	sp, #112	; 0x70
 8004f96:	ab1d      	add	r3, sp, #116	; 0x74
 8004f98:	9002      	str	r0, [sp, #8]
 8004f9a:	9006      	str	r0, [sp, #24]
 8004f9c:	9107      	str	r1, [sp, #28]
 8004f9e:	9104      	str	r1, [sp, #16]
 8004fa0:	4808      	ldr	r0, [pc, #32]	; (8004fc4 <siprintf+0x38>)
 8004fa2:	4909      	ldr	r1, [pc, #36]	; (8004fc8 <siprintf+0x3c>)
 8004fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa8:	9105      	str	r1, [sp, #20]
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	a902      	add	r1, sp, #8
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	f000 f868 	bl	8005084 <_svfiprintf_r>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	9b02      	ldr	r3, [sp, #8]
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	b01c      	add	sp, #112	; 0x70
 8004fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fc0:	b003      	add	sp, #12
 8004fc2:	4770      	bx	lr
 8004fc4:	20000028 	.word	0x20000028
 8004fc8:	ffff0208 	.word	0xffff0208

08004fcc <__ssputs_r>:
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	688e      	ldr	r6, [r1, #8]
 8004fd2:	4682      	mov	sl, r0
 8004fd4:	429e      	cmp	r6, r3
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	4690      	mov	r8, r2
 8004fda:	461f      	mov	r7, r3
 8004fdc:	d838      	bhi.n	8005050 <__ssputs_r+0x84>
 8004fde:	898a      	ldrh	r2, [r1, #12]
 8004fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fe4:	d032      	beq.n	800504c <__ssputs_r+0x80>
 8004fe6:	6825      	ldr	r5, [r4, #0]
 8004fe8:	6909      	ldr	r1, [r1, #16]
 8004fea:	3301      	adds	r3, #1
 8004fec:	eba5 0901 	sub.w	r9, r5, r1
 8004ff0:	6965      	ldr	r5, [r4, #20]
 8004ff2:	444b      	add	r3, r9
 8004ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ffc:	106d      	asrs	r5, r5, #1
 8004ffe:	429d      	cmp	r5, r3
 8005000:	bf38      	it	cc
 8005002:	461d      	movcc	r5, r3
 8005004:	0553      	lsls	r3, r2, #21
 8005006:	d531      	bpl.n	800506c <__ssputs_r+0xa0>
 8005008:	4629      	mov	r1, r5
 800500a:	f000 fb53 	bl	80056b4 <_malloc_r>
 800500e:	4606      	mov	r6, r0
 8005010:	b950      	cbnz	r0, 8005028 <__ssputs_r+0x5c>
 8005012:	230c      	movs	r3, #12
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	f8ca 3000 	str.w	r3, [sl]
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005022:	81a3      	strh	r3, [r4, #12]
 8005024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005028:	464a      	mov	r2, r9
 800502a:	6921      	ldr	r1, [r4, #16]
 800502c:	f000 face 	bl	80055cc <memcpy>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	6126      	str	r6, [r4, #16]
 800503e:	444e      	add	r6, r9
 8005040:	6026      	str	r6, [r4, #0]
 8005042:	463e      	mov	r6, r7
 8005044:	6165      	str	r5, [r4, #20]
 8005046:	eba5 0509 	sub.w	r5, r5, r9
 800504a:	60a5      	str	r5, [r4, #8]
 800504c:	42be      	cmp	r6, r7
 800504e:	d900      	bls.n	8005052 <__ssputs_r+0x86>
 8005050:	463e      	mov	r6, r7
 8005052:	4632      	mov	r2, r6
 8005054:	4641      	mov	r1, r8
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	f000 fac6 	bl	80055e8 <memmove>
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	1b9b      	subs	r3, r3, r6
 8005062:	4432      	add	r2, r6
 8005064:	2000      	movs	r0, #0
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	6022      	str	r2, [r4, #0]
 800506a:	e7db      	b.n	8005024 <__ssputs_r+0x58>
 800506c:	462a      	mov	r2, r5
 800506e:	f000 fb7b 	bl	8005768 <_realloc_r>
 8005072:	4606      	mov	r6, r0
 8005074:	2800      	cmp	r0, #0
 8005076:	d1e1      	bne.n	800503c <__ssputs_r+0x70>
 8005078:	4650      	mov	r0, sl
 800507a:	6921      	ldr	r1, [r4, #16]
 800507c:	f000 face 	bl	800561c <_free_r>
 8005080:	e7c7      	b.n	8005012 <__ssputs_r+0x46>
	...

08005084 <_svfiprintf_r>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	4698      	mov	r8, r3
 800508a:	898b      	ldrh	r3, [r1, #12]
 800508c:	4607      	mov	r7, r0
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	460d      	mov	r5, r1
 8005092:	4614      	mov	r4, r2
 8005094:	b09d      	sub	sp, #116	; 0x74
 8005096:	d50e      	bpl.n	80050b6 <_svfiprintf_r+0x32>
 8005098:	690b      	ldr	r3, [r1, #16]
 800509a:	b963      	cbnz	r3, 80050b6 <_svfiprintf_r+0x32>
 800509c:	2140      	movs	r1, #64	; 0x40
 800509e:	f000 fb09 	bl	80056b4 <_malloc_r>
 80050a2:	6028      	str	r0, [r5, #0]
 80050a4:	6128      	str	r0, [r5, #16]
 80050a6:	b920      	cbnz	r0, 80050b2 <_svfiprintf_r+0x2e>
 80050a8:	230c      	movs	r3, #12
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e0d1      	b.n	8005256 <_svfiprintf_r+0x1d2>
 80050b2:	2340      	movs	r3, #64	; 0x40
 80050b4:	616b      	str	r3, [r5, #20]
 80050b6:	2300      	movs	r3, #0
 80050b8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ba:	2320      	movs	r3, #32
 80050bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050c0:	2330      	movs	r3, #48	; 0x30
 80050c2:	f04f 0901 	mov.w	r9, #1
 80050c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005270 <_svfiprintf_r+0x1ec>
 80050ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050d2:	4623      	mov	r3, r4
 80050d4:	469a      	mov	sl, r3
 80050d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050da:	b10a      	cbz	r2, 80050e0 <_svfiprintf_r+0x5c>
 80050dc:	2a25      	cmp	r2, #37	; 0x25
 80050de:	d1f9      	bne.n	80050d4 <_svfiprintf_r+0x50>
 80050e0:	ebba 0b04 	subs.w	fp, sl, r4
 80050e4:	d00b      	beq.n	80050fe <_svfiprintf_r+0x7a>
 80050e6:	465b      	mov	r3, fp
 80050e8:	4622      	mov	r2, r4
 80050ea:	4629      	mov	r1, r5
 80050ec:	4638      	mov	r0, r7
 80050ee:	f7ff ff6d 	bl	8004fcc <__ssputs_r>
 80050f2:	3001      	adds	r0, #1
 80050f4:	f000 80aa 	beq.w	800524c <_svfiprintf_r+0x1c8>
 80050f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050fa:	445a      	add	r2, fp
 80050fc:	9209      	str	r2, [sp, #36]	; 0x24
 80050fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80a2 	beq.w	800524c <_svfiprintf_r+0x1c8>
 8005108:	2300      	movs	r3, #0
 800510a:	f04f 32ff 	mov.w	r2, #4294967295
 800510e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005112:	f10a 0a01 	add.w	sl, sl, #1
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	9307      	str	r3, [sp, #28]
 800511a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800511e:	931a      	str	r3, [sp, #104]	; 0x68
 8005120:	4654      	mov	r4, sl
 8005122:	2205      	movs	r2, #5
 8005124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005128:	4851      	ldr	r0, [pc, #324]	; (8005270 <_svfiprintf_r+0x1ec>)
 800512a:	f000 fa41 	bl	80055b0 <memchr>
 800512e:	9a04      	ldr	r2, [sp, #16]
 8005130:	b9d8      	cbnz	r0, 800516a <_svfiprintf_r+0xe6>
 8005132:	06d0      	lsls	r0, r2, #27
 8005134:	bf44      	itt	mi
 8005136:	2320      	movmi	r3, #32
 8005138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800513c:	0711      	lsls	r1, r2, #28
 800513e:	bf44      	itt	mi
 8005140:	232b      	movmi	r3, #43	; 0x2b
 8005142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005146:	f89a 3000 	ldrb.w	r3, [sl]
 800514a:	2b2a      	cmp	r3, #42	; 0x2a
 800514c:	d015      	beq.n	800517a <_svfiprintf_r+0xf6>
 800514e:	4654      	mov	r4, sl
 8005150:	2000      	movs	r0, #0
 8005152:	f04f 0c0a 	mov.w	ip, #10
 8005156:	9a07      	ldr	r2, [sp, #28]
 8005158:	4621      	mov	r1, r4
 800515a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800515e:	3b30      	subs	r3, #48	; 0x30
 8005160:	2b09      	cmp	r3, #9
 8005162:	d94e      	bls.n	8005202 <_svfiprintf_r+0x17e>
 8005164:	b1b0      	cbz	r0, 8005194 <_svfiprintf_r+0x110>
 8005166:	9207      	str	r2, [sp, #28]
 8005168:	e014      	b.n	8005194 <_svfiprintf_r+0x110>
 800516a:	eba0 0308 	sub.w	r3, r0, r8
 800516e:	fa09 f303 	lsl.w	r3, r9, r3
 8005172:	4313      	orrs	r3, r2
 8005174:	46a2      	mov	sl, r4
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	e7d2      	b.n	8005120 <_svfiprintf_r+0x9c>
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	1d19      	adds	r1, r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	9103      	str	r1, [sp, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	bfbb      	ittet	lt
 8005186:	425b      	neglt	r3, r3
 8005188:	f042 0202 	orrlt.w	r2, r2, #2
 800518c:	9307      	strge	r3, [sp, #28]
 800518e:	9307      	strlt	r3, [sp, #28]
 8005190:	bfb8      	it	lt
 8005192:	9204      	strlt	r2, [sp, #16]
 8005194:	7823      	ldrb	r3, [r4, #0]
 8005196:	2b2e      	cmp	r3, #46	; 0x2e
 8005198:	d10c      	bne.n	80051b4 <_svfiprintf_r+0x130>
 800519a:	7863      	ldrb	r3, [r4, #1]
 800519c:	2b2a      	cmp	r3, #42	; 0x2a
 800519e:	d135      	bne.n	800520c <_svfiprintf_r+0x188>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	3402      	adds	r4, #2
 80051a4:	1d1a      	adds	r2, r3, #4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	9203      	str	r2, [sp, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfb8      	it	lt
 80051ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005280 <_svfiprintf_r+0x1fc>
 80051b8:	2203      	movs	r2, #3
 80051ba:	4650      	mov	r0, sl
 80051bc:	7821      	ldrb	r1, [r4, #0]
 80051be:	f000 f9f7 	bl	80055b0 <memchr>
 80051c2:	b140      	cbz	r0, 80051d6 <_svfiprintf_r+0x152>
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	eba0 000a 	sub.w	r0, r0, sl
 80051ca:	fa03 f000 	lsl.w	r0, r3, r0
 80051ce:	9b04      	ldr	r3, [sp, #16]
 80051d0:	3401      	adds	r4, #1
 80051d2:	4303      	orrs	r3, r0
 80051d4:	9304      	str	r3, [sp, #16]
 80051d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051da:	2206      	movs	r2, #6
 80051dc:	4825      	ldr	r0, [pc, #148]	; (8005274 <_svfiprintf_r+0x1f0>)
 80051de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051e2:	f000 f9e5 	bl	80055b0 <memchr>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d038      	beq.n	800525c <_svfiprintf_r+0x1d8>
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <_svfiprintf_r+0x1f4>)
 80051ec:	bb1b      	cbnz	r3, 8005236 <_svfiprintf_r+0x1b2>
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	3307      	adds	r3, #7
 80051f2:	f023 0307 	bic.w	r3, r3, #7
 80051f6:	3308      	adds	r3, #8
 80051f8:	9303      	str	r3, [sp, #12]
 80051fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fc:	4433      	add	r3, r6
 80051fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005200:	e767      	b.n	80050d2 <_svfiprintf_r+0x4e>
 8005202:	460c      	mov	r4, r1
 8005204:	2001      	movs	r0, #1
 8005206:	fb0c 3202 	mla	r2, ip, r2, r3
 800520a:	e7a5      	b.n	8005158 <_svfiprintf_r+0xd4>
 800520c:	2300      	movs	r3, #0
 800520e:	f04f 0c0a 	mov.w	ip, #10
 8005212:	4619      	mov	r1, r3
 8005214:	3401      	adds	r4, #1
 8005216:	9305      	str	r3, [sp, #20]
 8005218:	4620      	mov	r0, r4
 800521a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800521e:	3a30      	subs	r2, #48	; 0x30
 8005220:	2a09      	cmp	r2, #9
 8005222:	d903      	bls.n	800522c <_svfiprintf_r+0x1a8>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0c5      	beq.n	80051b4 <_svfiprintf_r+0x130>
 8005228:	9105      	str	r1, [sp, #20]
 800522a:	e7c3      	b.n	80051b4 <_svfiprintf_r+0x130>
 800522c:	4604      	mov	r4, r0
 800522e:	2301      	movs	r3, #1
 8005230:	fb0c 2101 	mla	r1, ip, r1, r2
 8005234:	e7f0      	b.n	8005218 <_svfiprintf_r+0x194>
 8005236:	ab03      	add	r3, sp, #12
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	462a      	mov	r2, r5
 800523c:	4638      	mov	r0, r7
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <_svfiprintf_r+0x1f8>)
 8005240:	a904      	add	r1, sp, #16
 8005242:	f3af 8000 	nop.w
 8005246:	1c42      	adds	r2, r0, #1
 8005248:	4606      	mov	r6, r0
 800524a:	d1d6      	bne.n	80051fa <_svfiprintf_r+0x176>
 800524c:	89ab      	ldrh	r3, [r5, #12]
 800524e:	065b      	lsls	r3, r3, #25
 8005250:	f53f af2c 	bmi.w	80050ac <_svfiprintf_r+0x28>
 8005254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005256:	b01d      	add	sp, #116	; 0x74
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	ab03      	add	r3, sp, #12
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	462a      	mov	r2, r5
 8005262:	4638      	mov	r0, r7
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <_svfiprintf_r+0x1f8>)
 8005266:	a904      	add	r1, sp, #16
 8005268:	f000 f87c 	bl	8005364 <_printf_i>
 800526c:	e7eb      	b.n	8005246 <_svfiprintf_r+0x1c2>
 800526e:	bf00      	nop
 8005270:	08005884 	.word	0x08005884
 8005274:	0800588e 	.word	0x0800588e
 8005278:	00000000 	.word	0x00000000
 800527c:	08004fcd 	.word	0x08004fcd
 8005280:	0800588a 	.word	0x0800588a

08005284 <_printf_common>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	4616      	mov	r6, r2
 800528a:	4699      	mov	r9, r3
 800528c:	688a      	ldr	r2, [r1, #8]
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	4607      	mov	r7, r0
 8005292:	4293      	cmp	r3, r2
 8005294:	bfb8      	it	lt
 8005296:	4613      	movlt	r3, r2
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800529e:	460c      	mov	r4, r1
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	b10a      	cbz	r2, 80052aa <_printf_common+0x26>
 80052a6:	3301      	adds	r3, #1
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	0699      	lsls	r1, r3, #26
 80052ae:	bf42      	ittt	mi
 80052b0:	6833      	ldrmi	r3, [r6, #0]
 80052b2:	3302      	addmi	r3, #2
 80052b4:	6033      	strmi	r3, [r6, #0]
 80052b6:	6825      	ldr	r5, [r4, #0]
 80052b8:	f015 0506 	ands.w	r5, r5, #6
 80052bc:	d106      	bne.n	80052cc <_printf_common+0x48>
 80052be:	f104 0a19 	add.w	sl, r4, #25
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	6832      	ldr	r2, [r6, #0]
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	dc28      	bgt.n	800531e <_printf_common+0x9a>
 80052cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d0:	1e13      	subs	r3, r2, #0
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	bf18      	it	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	0692      	lsls	r2, r2, #26
 80052da:	d42d      	bmi.n	8005338 <_printf_common+0xb4>
 80052dc:	4649      	mov	r1, r9
 80052de:	4638      	mov	r0, r7
 80052e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d020      	beq.n	800532c <_printf_common+0xa8>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	68e5      	ldr	r5, [r4, #12]
 80052ee:	f003 0306 	and.w	r3, r3, #6
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	bf18      	it	ne
 80052f6:	2500      	movne	r5, #0
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	f04f 0600 	mov.w	r6, #0
 80052fe:	68a3      	ldr	r3, [r4, #8]
 8005300:	bf08      	it	eq
 8005302:	1aad      	subeq	r5, r5, r2
 8005304:	6922      	ldr	r2, [r4, #16]
 8005306:	bf08      	it	eq
 8005308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800530c:	4293      	cmp	r3, r2
 800530e:	bfc4      	itt	gt
 8005310:	1a9b      	subgt	r3, r3, r2
 8005312:	18ed      	addgt	r5, r5, r3
 8005314:	341a      	adds	r4, #26
 8005316:	42b5      	cmp	r5, r6
 8005318:	d11a      	bne.n	8005350 <_printf_common+0xcc>
 800531a:	2000      	movs	r0, #0
 800531c:	e008      	b.n	8005330 <_printf_common+0xac>
 800531e:	2301      	movs	r3, #1
 8005320:	4652      	mov	r2, sl
 8005322:	4649      	mov	r1, r9
 8005324:	4638      	mov	r0, r7
 8005326:	47c0      	blx	r8
 8005328:	3001      	adds	r0, #1
 800532a:	d103      	bne.n	8005334 <_printf_common+0xb0>
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005334:	3501      	adds	r5, #1
 8005336:	e7c4      	b.n	80052c2 <_printf_common+0x3e>
 8005338:	2030      	movs	r0, #48	; 0x30
 800533a:	18e1      	adds	r1, r4, r3
 800533c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005346:	4422      	add	r2, r4
 8005348:	3302      	adds	r3, #2
 800534a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800534e:	e7c5      	b.n	80052dc <_printf_common+0x58>
 8005350:	2301      	movs	r3, #1
 8005352:	4622      	mov	r2, r4
 8005354:	4649      	mov	r1, r9
 8005356:	4638      	mov	r0, r7
 8005358:	47c0      	blx	r8
 800535a:	3001      	adds	r0, #1
 800535c:	d0e6      	beq.n	800532c <_printf_common+0xa8>
 800535e:	3601      	adds	r6, #1
 8005360:	e7d9      	b.n	8005316 <_printf_common+0x92>
	...

08005364 <_printf_i>:
 8005364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	7e27      	ldrb	r7, [r4, #24]
 800536c:	4691      	mov	r9, r2
 800536e:	2f78      	cmp	r7, #120	; 0x78
 8005370:	4680      	mov	r8, r0
 8005372:	469a      	mov	sl, r3
 8005374:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800537a:	d807      	bhi.n	800538c <_printf_i+0x28>
 800537c:	2f62      	cmp	r7, #98	; 0x62
 800537e:	d80a      	bhi.n	8005396 <_printf_i+0x32>
 8005380:	2f00      	cmp	r7, #0
 8005382:	f000 80d9 	beq.w	8005538 <_printf_i+0x1d4>
 8005386:	2f58      	cmp	r7, #88	; 0x58
 8005388:	f000 80a4 	beq.w	80054d4 <_printf_i+0x170>
 800538c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005394:	e03a      	b.n	800540c <_printf_i+0xa8>
 8005396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800539a:	2b15      	cmp	r3, #21
 800539c:	d8f6      	bhi.n	800538c <_printf_i+0x28>
 800539e:	a001      	add	r0, pc, #4	; (adr r0, 80053a4 <_printf_i+0x40>)
 80053a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053a4:	080053fd 	.word	0x080053fd
 80053a8:	08005411 	.word	0x08005411
 80053ac:	0800538d 	.word	0x0800538d
 80053b0:	0800538d 	.word	0x0800538d
 80053b4:	0800538d 	.word	0x0800538d
 80053b8:	0800538d 	.word	0x0800538d
 80053bc:	08005411 	.word	0x08005411
 80053c0:	0800538d 	.word	0x0800538d
 80053c4:	0800538d 	.word	0x0800538d
 80053c8:	0800538d 	.word	0x0800538d
 80053cc:	0800538d 	.word	0x0800538d
 80053d0:	0800551f 	.word	0x0800551f
 80053d4:	08005441 	.word	0x08005441
 80053d8:	08005501 	.word	0x08005501
 80053dc:	0800538d 	.word	0x0800538d
 80053e0:	0800538d 	.word	0x0800538d
 80053e4:	08005541 	.word	0x08005541
 80053e8:	0800538d 	.word	0x0800538d
 80053ec:	08005441 	.word	0x08005441
 80053f0:	0800538d 	.word	0x0800538d
 80053f4:	0800538d 	.word	0x0800538d
 80053f8:	08005509 	.word	0x08005509
 80053fc:	680b      	ldr	r3, [r1, #0]
 80053fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	600a      	str	r2, [r1, #0]
 8005408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800540c:	2301      	movs	r3, #1
 800540e:	e0a4      	b.n	800555a <_printf_i+0x1f6>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	6808      	ldr	r0, [r1, #0]
 8005414:	062e      	lsls	r6, r5, #24
 8005416:	f100 0304 	add.w	r3, r0, #4
 800541a:	d50a      	bpl.n	8005432 <_printf_i+0xce>
 800541c:	6805      	ldr	r5, [r0, #0]
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	2d00      	cmp	r5, #0
 8005422:	da03      	bge.n	800542c <_printf_i+0xc8>
 8005424:	232d      	movs	r3, #45	; 0x2d
 8005426:	426d      	negs	r5, r5
 8005428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542c:	230a      	movs	r3, #10
 800542e:	485e      	ldr	r0, [pc, #376]	; (80055a8 <_printf_i+0x244>)
 8005430:	e019      	b.n	8005466 <_printf_i+0x102>
 8005432:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005436:	6805      	ldr	r5, [r0, #0]
 8005438:	600b      	str	r3, [r1, #0]
 800543a:	bf18      	it	ne
 800543c:	b22d      	sxthne	r5, r5
 800543e:	e7ef      	b.n	8005420 <_printf_i+0xbc>
 8005440:	680b      	ldr	r3, [r1, #0]
 8005442:	6825      	ldr	r5, [r4, #0]
 8005444:	1d18      	adds	r0, r3, #4
 8005446:	6008      	str	r0, [r1, #0]
 8005448:	0628      	lsls	r0, r5, #24
 800544a:	d501      	bpl.n	8005450 <_printf_i+0xec>
 800544c:	681d      	ldr	r5, [r3, #0]
 800544e:	e002      	b.n	8005456 <_printf_i+0xf2>
 8005450:	0669      	lsls	r1, r5, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0xe8>
 8005454:	881d      	ldrh	r5, [r3, #0]
 8005456:	2f6f      	cmp	r7, #111	; 0x6f
 8005458:	bf0c      	ite	eq
 800545a:	2308      	moveq	r3, #8
 800545c:	230a      	movne	r3, #10
 800545e:	4852      	ldr	r0, [pc, #328]	; (80055a8 <_printf_i+0x244>)
 8005460:	2100      	movs	r1, #0
 8005462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005466:	6866      	ldr	r6, [r4, #4]
 8005468:	2e00      	cmp	r6, #0
 800546a:	bfa8      	it	ge
 800546c:	6821      	ldrge	r1, [r4, #0]
 800546e:	60a6      	str	r6, [r4, #8]
 8005470:	bfa4      	itt	ge
 8005472:	f021 0104 	bicge.w	r1, r1, #4
 8005476:	6021      	strge	r1, [r4, #0]
 8005478:	b90d      	cbnz	r5, 800547e <_printf_i+0x11a>
 800547a:	2e00      	cmp	r6, #0
 800547c:	d04d      	beq.n	800551a <_printf_i+0x1b6>
 800547e:	4616      	mov	r6, r2
 8005480:	fbb5 f1f3 	udiv	r1, r5, r3
 8005484:	fb03 5711 	mls	r7, r3, r1, r5
 8005488:	5dc7      	ldrb	r7, [r0, r7]
 800548a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800548e:	462f      	mov	r7, r5
 8005490:	42bb      	cmp	r3, r7
 8005492:	460d      	mov	r5, r1
 8005494:	d9f4      	bls.n	8005480 <_printf_i+0x11c>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d10b      	bne.n	80054b2 <_printf_i+0x14e>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	07df      	lsls	r7, r3, #31
 800549e:	d508      	bpl.n	80054b2 <_printf_i+0x14e>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	6861      	ldr	r1, [r4, #4]
 80054a4:	4299      	cmp	r1, r3
 80054a6:	bfde      	ittt	le
 80054a8:	2330      	movle	r3, #48	; 0x30
 80054aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054b2:	1b92      	subs	r2, r2, r6
 80054b4:	6122      	str	r2, [r4, #16]
 80054b6:	464b      	mov	r3, r9
 80054b8:	4621      	mov	r1, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	f8cd a000 	str.w	sl, [sp]
 80054c0:	aa03      	add	r2, sp, #12
 80054c2:	f7ff fedf 	bl	8005284 <_printf_common>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d14c      	bne.n	8005564 <_printf_i+0x200>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295
 80054ce:	b004      	add	sp, #16
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	4834      	ldr	r0, [pc, #208]	; (80055a8 <_printf_i+0x244>)
 80054d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054da:	680e      	ldr	r6, [r1, #0]
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	f856 5b04 	ldr.w	r5, [r6], #4
 80054e2:	061f      	lsls	r7, r3, #24
 80054e4:	600e      	str	r6, [r1, #0]
 80054e6:	d514      	bpl.n	8005512 <_printf_i+0x1ae>
 80054e8:	07d9      	lsls	r1, r3, #31
 80054ea:	bf44      	itt	mi
 80054ec:	f043 0320 	orrmi.w	r3, r3, #32
 80054f0:	6023      	strmi	r3, [r4, #0]
 80054f2:	b91d      	cbnz	r5, 80054fc <_printf_i+0x198>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	f023 0320 	bic.w	r3, r3, #32
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	2310      	movs	r3, #16
 80054fe:	e7af      	b.n	8005460 <_printf_i+0xfc>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	f043 0320 	orr.w	r3, r3, #32
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	2378      	movs	r3, #120	; 0x78
 800550a:	4828      	ldr	r0, [pc, #160]	; (80055ac <_printf_i+0x248>)
 800550c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005510:	e7e3      	b.n	80054da <_printf_i+0x176>
 8005512:	065e      	lsls	r6, r3, #25
 8005514:	bf48      	it	mi
 8005516:	b2ad      	uxthmi	r5, r5
 8005518:	e7e6      	b.n	80054e8 <_printf_i+0x184>
 800551a:	4616      	mov	r6, r2
 800551c:	e7bb      	b.n	8005496 <_printf_i+0x132>
 800551e:	680b      	ldr	r3, [r1, #0]
 8005520:	6826      	ldr	r6, [r4, #0]
 8005522:	1d1d      	adds	r5, r3, #4
 8005524:	6960      	ldr	r0, [r4, #20]
 8005526:	600d      	str	r5, [r1, #0]
 8005528:	0635      	lsls	r5, r6, #24
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	d501      	bpl.n	8005532 <_printf_i+0x1ce>
 800552e:	6018      	str	r0, [r3, #0]
 8005530:	e002      	b.n	8005538 <_printf_i+0x1d4>
 8005532:	0671      	lsls	r1, r6, #25
 8005534:	d5fb      	bpl.n	800552e <_printf_i+0x1ca>
 8005536:	8018      	strh	r0, [r3, #0]
 8005538:	2300      	movs	r3, #0
 800553a:	4616      	mov	r6, r2
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	e7ba      	b.n	80054b6 <_printf_i+0x152>
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	1d1a      	adds	r2, r3, #4
 8005544:	600a      	str	r2, [r1, #0]
 8005546:	681e      	ldr	r6, [r3, #0]
 8005548:	2100      	movs	r1, #0
 800554a:	4630      	mov	r0, r6
 800554c:	6862      	ldr	r2, [r4, #4]
 800554e:	f000 f82f 	bl	80055b0 <memchr>
 8005552:	b108      	cbz	r0, 8005558 <_printf_i+0x1f4>
 8005554:	1b80      	subs	r0, r0, r6
 8005556:	6060      	str	r0, [r4, #4]
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	2300      	movs	r3, #0
 800555e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005562:	e7a8      	b.n	80054b6 <_printf_i+0x152>
 8005564:	4632      	mov	r2, r6
 8005566:	4649      	mov	r1, r9
 8005568:	4640      	mov	r0, r8
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	47d0      	blx	sl
 800556e:	3001      	adds	r0, #1
 8005570:	d0ab      	beq.n	80054ca <_printf_i+0x166>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	079b      	lsls	r3, r3, #30
 8005576:	d413      	bmi.n	80055a0 <_printf_i+0x23c>
 8005578:	68e0      	ldr	r0, [r4, #12]
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	4298      	cmp	r0, r3
 800557e:	bfb8      	it	lt
 8005580:	4618      	movlt	r0, r3
 8005582:	e7a4      	b.n	80054ce <_printf_i+0x16a>
 8005584:	2301      	movs	r3, #1
 8005586:	4632      	mov	r2, r6
 8005588:	4649      	mov	r1, r9
 800558a:	4640      	mov	r0, r8
 800558c:	47d0      	blx	sl
 800558e:	3001      	adds	r0, #1
 8005590:	d09b      	beq.n	80054ca <_printf_i+0x166>
 8005592:	3501      	adds	r5, #1
 8005594:	68e3      	ldr	r3, [r4, #12]
 8005596:	9903      	ldr	r1, [sp, #12]
 8005598:	1a5b      	subs	r3, r3, r1
 800559a:	42ab      	cmp	r3, r5
 800559c:	dcf2      	bgt.n	8005584 <_printf_i+0x220>
 800559e:	e7eb      	b.n	8005578 <_printf_i+0x214>
 80055a0:	2500      	movs	r5, #0
 80055a2:	f104 0619 	add.w	r6, r4, #25
 80055a6:	e7f5      	b.n	8005594 <_printf_i+0x230>
 80055a8:	08005895 	.word	0x08005895
 80055ac:	080058a6 	.word	0x080058a6

080055b0 <memchr>:
 80055b0:	4603      	mov	r3, r0
 80055b2:	b510      	push	{r4, lr}
 80055b4:	b2c9      	uxtb	r1, r1
 80055b6:	4402      	add	r2, r0
 80055b8:	4293      	cmp	r3, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	d101      	bne.n	80055c2 <memchr+0x12>
 80055be:	2000      	movs	r0, #0
 80055c0:	e003      	b.n	80055ca <memchr+0x1a>
 80055c2:	7804      	ldrb	r4, [r0, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	428c      	cmp	r4, r1
 80055c8:	d1f6      	bne.n	80055b8 <memchr+0x8>
 80055ca:	bd10      	pop	{r4, pc}

080055cc <memcpy>:
 80055cc:	440a      	add	r2, r1
 80055ce:	4291      	cmp	r1, r2
 80055d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d4:	d100      	bne.n	80055d8 <memcpy+0xc>
 80055d6:	4770      	bx	lr
 80055d8:	b510      	push	{r4, lr}
 80055da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055de:	4291      	cmp	r1, r2
 80055e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e4:	d1f9      	bne.n	80055da <memcpy+0xe>
 80055e6:	bd10      	pop	{r4, pc}

080055e8 <memmove>:
 80055e8:	4288      	cmp	r0, r1
 80055ea:	b510      	push	{r4, lr}
 80055ec:	eb01 0402 	add.w	r4, r1, r2
 80055f0:	d902      	bls.n	80055f8 <memmove+0x10>
 80055f2:	4284      	cmp	r4, r0
 80055f4:	4623      	mov	r3, r4
 80055f6:	d807      	bhi.n	8005608 <memmove+0x20>
 80055f8:	1e43      	subs	r3, r0, #1
 80055fa:	42a1      	cmp	r1, r4
 80055fc:	d008      	beq.n	8005610 <memmove+0x28>
 80055fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005602:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005606:	e7f8      	b.n	80055fa <memmove+0x12>
 8005608:	4601      	mov	r1, r0
 800560a:	4402      	add	r2, r0
 800560c:	428a      	cmp	r2, r1
 800560e:	d100      	bne.n	8005612 <memmove+0x2a>
 8005610:	bd10      	pop	{r4, pc}
 8005612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800561a:	e7f7      	b.n	800560c <memmove+0x24>

0800561c <_free_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4605      	mov	r5, r0
 8005620:	2900      	cmp	r1, #0
 8005622:	d043      	beq.n	80056ac <_free_r+0x90>
 8005624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005628:	1f0c      	subs	r4, r1, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	bfb8      	it	lt
 800562e:	18e4      	addlt	r4, r4, r3
 8005630:	f000 f8d0 	bl	80057d4 <__malloc_lock>
 8005634:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <_free_r+0x94>)
 8005636:	6813      	ldr	r3, [r2, #0]
 8005638:	4610      	mov	r0, r2
 800563a:	b933      	cbnz	r3, 800564a <_free_r+0x2e>
 800563c:	6063      	str	r3, [r4, #4]
 800563e:	6014      	str	r4, [r2, #0]
 8005640:	4628      	mov	r0, r5
 8005642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005646:	f000 b8cb 	b.w	80057e0 <__malloc_unlock>
 800564a:	42a3      	cmp	r3, r4
 800564c:	d90a      	bls.n	8005664 <_free_r+0x48>
 800564e:	6821      	ldr	r1, [r4, #0]
 8005650:	1862      	adds	r2, r4, r1
 8005652:	4293      	cmp	r3, r2
 8005654:	bf01      	itttt	eq
 8005656:	681a      	ldreq	r2, [r3, #0]
 8005658:	685b      	ldreq	r3, [r3, #4]
 800565a:	1852      	addeq	r2, r2, r1
 800565c:	6022      	streq	r2, [r4, #0]
 800565e:	6063      	str	r3, [r4, #4]
 8005660:	6004      	str	r4, [r0, #0]
 8005662:	e7ed      	b.n	8005640 <_free_r+0x24>
 8005664:	461a      	mov	r2, r3
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	b10b      	cbz	r3, 800566e <_free_r+0x52>
 800566a:	42a3      	cmp	r3, r4
 800566c:	d9fa      	bls.n	8005664 <_free_r+0x48>
 800566e:	6811      	ldr	r1, [r2, #0]
 8005670:	1850      	adds	r0, r2, r1
 8005672:	42a0      	cmp	r0, r4
 8005674:	d10b      	bne.n	800568e <_free_r+0x72>
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	4401      	add	r1, r0
 800567a:	1850      	adds	r0, r2, r1
 800567c:	4283      	cmp	r3, r0
 800567e:	6011      	str	r1, [r2, #0]
 8005680:	d1de      	bne.n	8005640 <_free_r+0x24>
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4401      	add	r1, r0
 8005688:	6011      	str	r1, [r2, #0]
 800568a:	6053      	str	r3, [r2, #4]
 800568c:	e7d8      	b.n	8005640 <_free_r+0x24>
 800568e:	d902      	bls.n	8005696 <_free_r+0x7a>
 8005690:	230c      	movs	r3, #12
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	e7d4      	b.n	8005640 <_free_r+0x24>
 8005696:	6820      	ldr	r0, [r4, #0]
 8005698:	1821      	adds	r1, r4, r0
 800569a:	428b      	cmp	r3, r1
 800569c:	bf01      	itttt	eq
 800569e:	6819      	ldreq	r1, [r3, #0]
 80056a0:	685b      	ldreq	r3, [r3, #4]
 80056a2:	1809      	addeq	r1, r1, r0
 80056a4:	6021      	streq	r1, [r4, #0]
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	6054      	str	r4, [r2, #4]
 80056aa:	e7c9      	b.n	8005640 <_free_r+0x24>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	200000c4 	.word	0x200000c4

080056b4 <_malloc_r>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	1ccd      	adds	r5, r1, #3
 80056b8:	f025 0503 	bic.w	r5, r5, #3
 80056bc:	3508      	adds	r5, #8
 80056be:	2d0c      	cmp	r5, #12
 80056c0:	bf38      	it	cc
 80056c2:	250c      	movcc	r5, #12
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	4606      	mov	r6, r0
 80056c8:	db01      	blt.n	80056ce <_malloc_r+0x1a>
 80056ca:	42a9      	cmp	r1, r5
 80056cc:	d903      	bls.n	80056d6 <_malloc_r+0x22>
 80056ce:	230c      	movs	r3, #12
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	2000      	movs	r0, #0
 80056d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d6:	f000 f87d 	bl	80057d4 <__malloc_lock>
 80056da:	4921      	ldr	r1, [pc, #132]	; (8005760 <_malloc_r+0xac>)
 80056dc:	680a      	ldr	r2, [r1, #0]
 80056de:	4614      	mov	r4, r2
 80056e0:	b99c      	cbnz	r4, 800570a <_malloc_r+0x56>
 80056e2:	4f20      	ldr	r7, [pc, #128]	; (8005764 <_malloc_r+0xb0>)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	b923      	cbnz	r3, 80056f2 <_malloc_r+0x3e>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4630      	mov	r0, r6
 80056ec:	f000 f862 	bl	80057b4 <_sbrk_r>
 80056f0:	6038      	str	r0, [r7, #0]
 80056f2:	4629      	mov	r1, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 f85d 	bl	80057b4 <_sbrk_r>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	d123      	bne.n	8005746 <_malloc_r+0x92>
 80056fe:	230c      	movs	r3, #12
 8005700:	4630      	mov	r0, r6
 8005702:	6033      	str	r3, [r6, #0]
 8005704:	f000 f86c 	bl	80057e0 <__malloc_unlock>
 8005708:	e7e3      	b.n	80056d2 <_malloc_r+0x1e>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	1b5b      	subs	r3, r3, r5
 800570e:	d417      	bmi.n	8005740 <_malloc_r+0x8c>
 8005710:	2b0b      	cmp	r3, #11
 8005712:	d903      	bls.n	800571c <_malloc_r+0x68>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	441c      	add	r4, r3
 8005718:	6025      	str	r5, [r4, #0]
 800571a:	e004      	b.n	8005726 <_malloc_r+0x72>
 800571c:	6863      	ldr	r3, [r4, #4]
 800571e:	42a2      	cmp	r2, r4
 8005720:	bf0c      	ite	eq
 8005722:	600b      	streq	r3, [r1, #0]
 8005724:	6053      	strne	r3, [r2, #4]
 8005726:	4630      	mov	r0, r6
 8005728:	f000 f85a 	bl	80057e0 <__malloc_unlock>
 800572c:	f104 000b 	add.w	r0, r4, #11
 8005730:	1d23      	adds	r3, r4, #4
 8005732:	f020 0007 	bic.w	r0, r0, #7
 8005736:	1ac2      	subs	r2, r0, r3
 8005738:	d0cc      	beq.n	80056d4 <_malloc_r+0x20>
 800573a:	1a1b      	subs	r3, r3, r0
 800573c:	50a3      	str	r3, [r4, r2]
 800573e:	e7c9      	b.n	80056d4 <_malloc_r+0x20>
 8005740:	4622      	mov	r2, r4
 8005742:	6864      	ldr	r4, [r4, #4]
 8005744:	e7cc      	b.n	80056e0 <_malloc_r+0x2c>
 8005746:	1cc4      	adds	r4, r0, #3
 8005748:	f024 0403 	bic.w	r4, r4, #3
 800574c:	42a0      	cmp	r0, r4
 800574e:	d0e3      	beq.n	8005718 <_malloc_r+0x64>
 8005750:	1a21      	subs	r1, r4, r0
 8005752:	4630      	mov	r0, r6
 8005754:	f000 f82e 	bl	80057b4 <_sbrk_r>
 8005758:	3001      	adds	r0, #1
 800575a:	d1dd      	bne.n	8005718 <_malloc_r+0x64>
 800575c:	e7cf      	b.n	80056fe <_malloc_r+0x4a>
 800575e:	bf00      	nop
 8005760:	200000c4 	.word	0x200000c4
 8005764:	200000c8 	.word	0x200000c8

08005768 <_realloc_r>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	4607      	mov	r7, r0
 800576c:	4614      	mov	r4, r2
 800576e:	460e      	mov	r6, r1
 8005770:	b921      	cbnz	r1, 800577c <_realloc_r+0x14>
 8005772:	4611      	mov	r1, r2
 8005774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005778:	f7ff bf9c 	b.w	80056b4 <_malloc_r>
 800577c:	b922      	cbnz	r2, 8005788 <_realloc_r+0x20>
 800577e:	f7ff ff4d 	bl	800561c <_free_r>
 8005782:	4625      	mov	r5, r4
 8005784:	4628      	mov	r0, r5
 8005786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005788:	f000 f830 	bl	80057ec <_malloc_usable_size_r>
 800578c:	42a0      	cmp	r0, r4
 800578e:	d20f      	bcs.n	80057b0 <_realloc_r+0x48>
 8005790:	4621      	mov	r1, r4
 8005792:	4638      	mov	r0, r7
 8005794:	f7ff ff8e 	bl	80056b4 <_malloc_r>
 8005798:	4605      	mov	r5, r0
 800579a:	2800      	cmp	r0, #0
 800579c:	d0f2      	beq.n	8005784 <_realloc_r+0x1c>
 800579e:	4631      	mov	r1, r6
 80057a0:	4622      	mov	r2, r4
 80057a2:	f7ff ff13 	bl	80055cc <memcpy>
 80057a6:	4631      	mov	r1, r6
 80057a8:	4638      	mov	r0, r7
 80057aa:	f7ff ff37 	bl	800561c <_free_r>
 80057ae:	e7e9      	b.n	8005784 <_realloc_r+0x1c>
 80057b0:	4635      	mov	r5, r6
 80057b2:	e7e7      	b.n	8005784 <_realloc_r+0x1c>

080057b4 <_sbrk_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	2300      	movs	r3, #0
 80057b8:	4d05      	ldr	r5, [pc, #20]	; (80057d0 <_sbrk_r+0x1c>)
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	f7fc fba8 	bl	8001f14 <_sbrk>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_sbrk_r+0x1a>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_sbrk_r+0x1a>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20000220 	.word	0x20000220

080057d4 <__malloc_lock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	; (80057dc <__malloc_lock+0x8>)
 80057d6:	f000 b811 	b.w	80057fc <__retarget_lock_acquire_recursive>
 80057da:	bf00      	nop
 80057dc:	20000228 	.word	0x20000228

080057e0 <__malloc_unlock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <__malloc_unlock+0x8>)
 80057e2:	f000 b80c 	b.w	80057fe <__retarget_lock_release_recursive>
 80057e6:	bf00      	nop
 80057e8:	20000228 	.word	0x20000228

080057ec <_malloc_usable_size_r>:
 80057ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f0:	1f18      	subs	r0, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bfbc      	itt	lt
 80057f6:	580b      	ldrlt	r3, [r1, r0]
 80057f8:	18c0      	addlt	r0, r0, r3
 80057fa:	4770      	bx	lr

080057fc <__retarget_lock_acquire_recursive>:
 80057fc:	4770      	bx	lr

080057fe <__retarget_lock_release_recursive>:
 80057fe:	4770      	bx	lr

08005800 <_init>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr

0800580c <_fini>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr
