
Code_Project_2_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005444  08005444  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005444  08005444  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005444  08005444  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800544c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000088  080054d4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080054d4  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5a5  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002286  00000000  00000000  0002d656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188d3  00000000  00000000  00031058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daa0  00000000  00000000  0004992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de53  00000000  00000000  000573cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e521e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  000e5274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800538c 	.word	0x0800538c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800538c 	.word	0x0800538c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <PID>:

uint16_t preError = 0, error = 0, sumError = 0;
float rateError = 0;

uint8_t PID(uint16_t actualSpeed, uint16_t desireSpeed)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	80fb      	strh	r3, [r7, #6]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	80bb      	strh	r3, [r7, #4]
	error = desireSpeed - actualSpeed;
 8000ea8:	88ba      	ldrh	r2, [r7, #4]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b47      	ldr	r3, [pc, #284]	; (8000fd0 <PID+0x138>)
 8000eb2:	801a      	strh	r2, [r3, #0]
	sumError += error*T;
 8000eb4:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <PID+0x13c>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa3 	bl	8000404 <__aeabi_i2d>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	460d      	mov	r5, r1
 8000ec2:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <PID+0x138>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fa9c 	bl	8000404 <__aeabi_i2d>
 8000ecc:	a33c      	add	r3, pc, #240	; (adr r3, 8000fc0 <PID+0x128>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb01 	bl	80004d8 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4620      	mov	r0, r4
 8000edc:	4629      	mov	r1, r5
 8000ede:	f7ff f945 	bl	800016c <__adddf3>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fd07 	bl	80008fc <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <PID+0x13c>)
 8000ef4:	801a      	strh	r2, [r3, #0]
	rateError =(float)(error - preError)/T;
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <PID+0x138>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <PID+0x140>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe24 	bl	8000b50 <__aeabi_i2f>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fa8c 	bl	8000428 <__aeabi_f2d>
 8000f10:	a32b      	add	r3, pc, #172	; (adr r3, 8000fc0 <PID+0x128>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff fc09 	bl	800072c <__aeabi_ddiv>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fd0b 	bl	800093c <__aeabi_d2f>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <PID+0x144>)
 8000f2a:	6013      	str	r3, [r2, #0]
	uint8_t duty = Kd*error + Ki*sumError + Kd*rateError;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <PID+0x138>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fa67 	bl	8000404 <__aeabi_i2d>
 8000f36:	a324      	add	r3, pc, #144	; (adr r3, 8000fc8 <PID+0x130>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff facc 	bl	80004d8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <PID+0x13c>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa54 	bl	8000404 <__aeabi_i2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff f902 	bl	800016c <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	461d      	mov	r5, r3
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <PID+0x144>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa57 	bl	8000428 <__aeabi_f2d>
 8000f7a:	a313      	add	r3, pc, #76	; (adr r3, 8000fc8 <PID+0x130>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff faaa 	bl	80004d8 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff f8ee 	bl	800016c <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fcb0 	bl	80008fc <__aeabi_d2uiz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]

	if(duty > DUTY_MAX)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <PID+0x112>
	{
		duty = DUTY_MAX;
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	73fb      	strb	r3, [r7, #15]
	}else if(duty < DUTY_MIN)
	{
		duty = DUTY_MIN;
	}
	preError = error;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <PID+0x138>)
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <PID+0x140>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	return duty;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	47ae147b 	.word	0x47ae147b
 8000fc4:	3f847ae1 	.word	0x3f847ae1
 8000fc8:	9999999a 	.word	0x9999999a
 8000fcc:	3fb99999 	.word	0x3fb99999
 8000fd0:	200000a6 	.word	0x200000a6
 8000fd4:	200000a8 	.word	0x200000a8
 8000fd8:	200000a4 	.word	0x200000a4
 8000fdc:	200000ac 	.word	0x200000ac

08000fe0 <read_temp>:

uint16_t cnt = 0, preCnt = 0;


uint8_t read_temp(ADC_HandleTypeDef* hadc, uint16_t* data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)data, 2);
 8000fea:	2202      	movs	r2, #2
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f001 f90a 	bl	8002208 <HAL_ADC_Start_DMA>
	uint8_t	temp = ((float)data[0]/ 4096) * 3.3 * 100;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fda5 	bl	8000b48 <__aeabi_ui2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff feab 	bl	8000d60 <__aeabi_fdiv>
 800100a:	4603      	mov	r3, r0
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa0b 	bl	8000428 <__aeabi_f2d>
 8001012:	a30d      	add	r3, pc, #52	; (adr r3, 8001048 <read_temp+0x68>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa5e 	bl	80004d8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <read_temp+0x70>)
 800102a:	f7ff fa55 	bl	80004d8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fc61 	bl	80008fc <__aeabi_d2uiz>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]
	return temp;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	66666666 	.word	0x66666666
 800104c:	400a6666 	.word	0x400a6666
 8001050:	40590000 	.word	0x40590000

08001054 <read_speed>:

uint16_t read_speed(TIM_HandleTypeDef htim)
{
 8001054:	b084      	sub	sp, #16
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	f107 0c10 	add.w	ip, r7, #16
 8001060:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	cnt = __HAL_TIM_GET_COUNTER(&htim);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <read_speed+0x50>)
 800106c:	801a      	strh	r2, [r3, #0]
	//pulse of 10ms --*100--> pulse of 1s --/334--> rpm
	uint16_t speed = (cnt - preCnt)*100 / 334;
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <read_speed+0x50>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <read_speed+0x54>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2264      	movs	r2, #100	; 0x64
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <read_speed+0x58>)
 8001082:	fb82 1203 	smull	r1, r2, r2, r3
 8001086:	11d2      	asrs	r2, r2, #7
 8001088:	17db      	asrs	r3, r3, #31
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	80fb      	strh	r3, [r7, #6]
	preCnt = cnt;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <read_speed+0x50>)
 8001090:	881a      	ldrh	r2, [r3, #0]
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <read_speed+0x54>)
 8001094:	801a      	strh	r2, [r3, #0]
	return speed;
 8001096:	88fb      	ldrh	r3, [r7, #6]
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	b004      	add	sp, #16
 80010a2:	4770      	bx	lr
 80010a4:	200000b0 	.word	0x200000b0
 80010a8:	200000b2 	.word	0x200000b2
 80010ac:	621b97c3 	.word	0x621b97c3

080010b0 <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	    Lcd_configure();
 80010b4:	f000 f8f2 	bl	800129c <Lcd_configure>
			lcd_write_command(0x33);
 80010b8:	2033      	movs	r0, #51	; 0x33
 80010ba:	f000 f993 	bl	80013e4 <lcd_write_command>
			lcd_write_command(0x32);
 80010be:	2032      	movs	r0, #50	; 0x32
 80010c0:	f000 f990 	bl	80013e4 <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f000 f98d 	bl	80013e4 <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 f98a 	bl	80013e4 <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80010d0:	200c      	movs	r0, #12
 80010d2:	f000 f987 	bl	80013e4 <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 80010d6:	2006      	movs	r0, #6
 80010d8:	f000 f984 	bl	80013e4 <lcd_write_command>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4906      	ldr	r1, [pc, #24]	; (8001108 <Lcd_write_int+0x28>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 fd11 	bl	8004b18 <siprintf>
	Lcd_write_string(buffer);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f806 	bl	800110c <Lcd_write_string>
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	080053a4 	.word	0x080053a4

0800110c <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e009      	b.n	800112e <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f97e 	bl	8001424 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3301      	adds	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	7bfc      	ldrb	r4, [r7, #15]
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f80d 	bl	8000150 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	429c      	cmp	r4, r3
 800113a:	d3ee      	bcc.n	800111a <Lcd_write_string+0xe>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	460a      	mov	r2, r1
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	4613      	mov	r3, r2
 8001154:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f93d 	bl	80013e4 <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 800116a:	e00a      	b.n	8001182 <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	3340      	adds	r3, #64	; 0x40
 8001170:	b2db      	uxtb	r3, r3
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001178:	b25b      	sxtb	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f931 	bl	80013e4 <lcd_write_command>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <Lcd_display1>:
/*****
** Display string
******/

void Lcd_display1(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	Lcd_gotoxy(0, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff ffd7 	bl	8001146 <Lcd_gotoxy>
	//write Temperature
	Lcd_write_string("MODE:");
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <Lcd_display1+0x3c>)
 800119a:	f7ff ffb7 	bl	800110c <Lcd_write_string>
	Lcd_gotoxy(6, 0);
 800119e:	2100      	movs	r1, #0
 80011a0:	2006      	movs	r0, #6
 80011a2:	f7ff ffd0 	bl	8001146 <Lcd_gotoxy>
	Lcd_write_string("1. ByTemp");
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <Lcd_display1+0x40>)
 80011a8:	f7ff ffb0 	bl	800110c <Lcd_write_string>

	//write Speed
	Lcd_gotoxy(0, 1);
 80011ac:	2101      	movs	r1, #1
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff ffc9 	bl	8001146 <Lcd_gotoxy>
	Lcd_gotoxy(6, 1);
 80011b4:	2101      	movs	r1, #1
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff ffc5 	bl	8001146 <Lcd_gotoxy>
	Lcd_write_string("2. Manual");
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <Lcd_display1+0x44>)
 80011be:	f7ff ffa5 	bl	800110c <Lcd_write_string>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	080053a8 	.word	0x080053a8
 80011cc:	080053b0 	.word	0x080053b0
 80011d0:	080053bc 	.word	0x080053bc

080011d4 <Lcd_display2>:
/*****
** Display temperature, speed
******/

void Lcd_display2(uint8_t temperatute, uint16_t speed)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	80bb      	strh	r3, [r7, #4]
	static uint8_t pre_temperatute = 0;
	static uint16_t pre_speed = 0;
	if(pre_temperatute != temperatute)
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <Lcd_display2+0xac>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d01c      	beq.n	8001228 <Lcd_display2+0x54>
	{
		Lcd_gotoxy(0, 0);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ffa8 	bl	8001146 <Lcd_gotoxy>
		//write Temperature
		Lcd_write_string("Temp :");
 80011f6:	4823      	ldr	r0, [pc, #140]	; (8001284 <Lcd_display2+0xb0>)
 80011f8:	f7ff ff88 	bl	800110c <Lcd_write_string>
		Lcd_gotoxy(6, 0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	2006      	movs	r0, #6
 8001200:	f7ff ffa1 	bl	8001146 <Lcd_gotoxy>
		Lcd_write_string("      ");
 8001204:	4820      	ldr	r0, [pc, #128]	; (8001288 <Lcd_display2+0xb4>)
 8001206:	f7ff ff81 	bl	800110c <Lcd_write_string>
		Lcd_gotoxy(6, 0);
 800120a:	2100      	movs	r1, #0
 800120c:	2006      	movs	r0, #6
 800120e:	f7ff ff9a 	bl	8001146 <Lcd_gotoxy>
		Lcd_write_int((int)temperatute);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff63 	bl	80010e0 <Lcd_write_int>
		Lcd_gotoxy(12, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	200c      	movs	r0, #12
 800121e:	f7ff ff92 	bl	8001146 <Lcd_gotoxy>
		Lcd_write_string("C  ");
 8001222:	481a      	ldr	r0, [pc, #104]	; (800128c <Lcd_display2+0xb8>)
 8001224:	f7ff ff72 	bl	800110c <Lcd_write_string>
	}
	if(pre_speed != speed)
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <Lcd_display2+0xbc>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	d01c      	beq.n	800126c <Lcd_display2+0x98>
	{
		//write Speed
		Lcd_gotoxy(0, 1);
 8001232:	2101      	movs	r1, #1
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff86 	bl	8001146 <Lcd_gotoxy>
		Lcd_write_string("Speed:");
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <Lcd_display2+0xc0>)
 800123c:	f7ff ff66 	bl	800110c <Lcd_write_string>
		Lcd_gotoxy(6, 1);
 8001240:	2101      	movs	r1, #1
 8001242:	2006      	movs	r0, #6
 8001244:	f7ff ff7f 	bl	8001146 <Lcd_gotoxy>
		Lcd_write_string("      ");
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <Lcd_display2+0xb4>)
 800124a:	f7ff ff5f 	bl	800110c <Lcd_write_string>
		Lcd_gotoxy(6, 1);
 800124e:	2101      	movs	r1, #1
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff ff78 	bl	8001146 <Lcd_gotoxy>
		Lcd_write_int((int)speed);
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff41 	bl	80010e0 <Lcd_write_int>
		Lcd_gotoxy(12, 1);
 800125e:	2101      	movs	r1, #1
 8001260:	200c      	movs	r0, #12
 8001262:	f7ff ff70 	bl	8001146 <Lcd_gotoxy>
		Lcd_write_string("rpm");
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <Lcd_display2+0xc4>)
 8001268:	f7ff ff50 	bl	800110c <Lcd_write_string>
	}
	pre_speed = speed;
 800126c:	4a08      	ldr	r2, [pc, #32]	; (8001290 <Lcd_display2+0xbc>)
 800126e:	88bb      	ldrh	r3, [r7, #4]
 8001270:	8013      	strh	r3, [r2, #0]
	pre_temperatute = temperatute;
 8001272:	4a03      	ldr	r2, [pc, #12]	; (8001280 <Lcd_display2+0xac>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	7013      	strb	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000b4 	.word	0x200000b4
 8001284:	080053c8 	.word	0x080053c8
 8001288:	080053d0 	.word	0x080053d0
 800128c:	080053d8 	.word	0x080053d8
 8001290:	200000b6 	.word	0x200000b6
 8001294:	080053dc 	.word	0x080053dc
 8001298:	080053e4 	.word	0x080053e4

0800129c <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <Lcd_configure+0x140>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a49      	ldr	r2, [pc, #292]	; (80013dc <Lcd_configure+0x140>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <Lcd_configure+0x140>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b44      	ldr	r3, [pc, #272]	; (80013dc <Lcd_configure+0x140>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a43      	ldr	r2, [pc, #268]	; (80013dc <Lcd_configure+0x140>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b41      	ldr	r3, [pc, #260]	; (80013dc <Lcd_configure+0x140>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <Lcd_configure+0x140>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <Lcd_configure+0x140>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <Lcd_configure+0x140>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 80012f8:	2301      	movs	r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	4834      	ldr	r0, [pc, #208]	; (80013e0 <Lcd_configure+0x144>)
 8001310:	f001 fd6a 	bl	8002de8 <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 8001314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001318:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	482c      	ldr	r0, [pc, #176]	; (80013e0 <Lcd_configure+0x144>)
 800132e:	f001 fd5b 	bl	8002de8 <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 8001332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001336:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4825      	ldr	r0, [pc, #148]	; (80013e0 <Lcd_configure+0x144>)
 800134c:	f001 fd4c 	bl	8002de8 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001356:	4822      	ldr	r0, [pc, #136]	; (80013e0 <Lcd_configure+0x144>)
 8001358:	f001 feca 	bl	80030f0 <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	481a      	ldr	r0, [pc, #104]	; (80013e0 <Lcd_configure+0x144>)
 8001376:	f001 fd37 	bl	8002de8 <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4813      	ldr	r0, [pc, #76]	; (80013e0 <Lcd_configure+0x144>)
 8001394:	f001 fd28 	bl	8002de8 <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 8001398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <Lcd_configure+0x144>)
 80013b2:	f001 fd19 	bl	8002de8 <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 80013b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <Lcd_configure+0x144>)
 80013d0:	f001 fd0a 	bl	8002de8 <HAL_GPIO_Init>
	
}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010c00 	.word	0x40010c00

080013e4 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 80013ee:	2200      	movs	r2, #0
 80013f0:	2101      	movs	r1, #1
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <lcd_write_command+0x3c>)
 80013f4:	f001 fe7c 	bl	80030f0 <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2104      	movs	r1, #4
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f82f 	bl	8001464 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2104      	movs	r1, #4
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f827 	bl	8001464 <lcd_write>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40010c00 	.word	0x40010c00

08001424 <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 800142e:	2201      	movs	r2, #1
 8001430:	2101      	movs	r1, #1
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <lcd_write_data+0x3c>)
 8001434:	f001 fe5c 	bl	80030f0 <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2104      	movs	r1, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f80f 	bl	8001464 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f807 	bl	8001464 <lcd_write>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40010c00 	.word	0x40010c00

08001464 <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	460a      	mov	r2, r1
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e023      	b.n	80014c2 <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	fa42 f303 	asr.w	r3, r2, r3
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <lcd_write+0x8c>)
 800148e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <lcd_write+0x90>)
 8001496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	f001 fe27 	bl	80030f0 <HAL_GPIO_WritePin>
 80014a2:	e00b      	b.n	80014bc <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <lcd_write+0x8c>)
 80014a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <lcd_write+0x90>)
 80014b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	f001 fe1a 	bl	80030f0 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	3301      	adds	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3d7      	bcc.n	800147a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <lcd_write+0x94>)
 80014d2:	f001 fe0d 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 fd9a 	bl	8002010 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <lcd_write+0x94>)
 80014e4:	f001 fe04 	bl	80030f0 <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000010 	.word	0x20000010
 80014f8:	40010c00 	.word	0x40010c00

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001500:	f000 fd24 	bl	8001f4c <HAL_Init>

  /* USER CODE BEGIN Init */
  Lcd_Init();
 8001504:	f7ff fdd4 	bl	80010b0 <Lcd_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f848 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f000 fa18 	bl	8001940 <MX_GPIO_Init>
  MX_DMA_Init();
 8001510:	f000 f9f8 	bl	8001904 <MX_DMA_Init>
  MX_ADC1_Init();
 8001514:	f000 f892 	bl	800163c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001518:	f000 f8de 	bl	80016d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800151c:	f000 f950 	bl	80017c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001520:	f000 f9a2 	bl	8001868 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //LCD display
  Lcd_display1();
 8001524:	f7ff fe32 	bl	800118c <Lcd_display1>
  TIM2_PWM_Set_Duty(duty);
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <main+0x88>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fa6f 	bl	8001a10 <TIM2_PWM_Set_Duty>
  TIM2_PWM_Set_Frequency(2000);
 8001532:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001536:	f000 fa89 	bl	8001a4c <TIM2_PWM_Set_Frequency>

  if( HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800153a:	210c      	movs	r1, #12
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <main+0x8c>)
 800153e:	f002 fbb3 	bl	8003ca8 <HAL_TIM_PWM_Start>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <main+0x50>
  {
	  Error_Handler();
 8001548:	f000 fb06 	bl	8001b58 <Error_Handler>
//	  }
   /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  temp = read_temp(&hadc1, (uint16_t*)data);
 800154c:	490f      	ldr	r1, [pc, #60]	; (800158c <main+0x90>)
 800154e:	4810      	ldr	r0, [pc, #64]	; (8001590 <main+0x94>)
 8001550:	f7ff fd46 	bl	8000fe0 <read_temp>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <main+0x98>)
 800155a:	701a      	strb	r2, [r3, #0]
	  Lcd_display2(temp, actualSpeed);
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <main+0x98>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <main+0x9c>)
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe34 	bl	80011d4 <Lcd_display2>
	  actualSpeed++;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <main+0x9c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <main+0x9c>)
 8001576:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(500);
 8001578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157c:	f000 fd48 	bl	8002010 <HAL_Delay>
	  temp = read_temp(&hadc1, (uint16_t*)data);
 8001580:	e7e4      	b.n	800154c <main+0x50>
 8001582:	bf00      	nop
 8001584:	200000bd 	.word	0x200000bd
 8001588:	200001d4 	.word	0x200001d4
 800158c:	200001d0 	.word	0x200001d0
 8001590:	2000015c 	.word	0x2000015c
 8001594:	200000be 	.word	0x200000be
 8001598:	200000b8 	.word	0x200000b8

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	; 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	2228      	movs	r2, #40	; 0x28
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 faac 	bl	8004b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d4:	2310      	movs	r3, #16
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015d8:	2300      	movs	r3, #0
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fdcf 	bl	8003184 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80015ec:	f000 fab4 	bl	8001b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f002 f83a 	bl	8003684 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001616:	f000 fa9f 	bl	8001b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800161a:	2302      	movs	r3, #2
 800161c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f002 f9b3 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001630:	f000 fa92 	bl	8001b58 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3750      	adds	r7, #80	; 0x50
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_ADC1_Init+0x94>)
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001650:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_ADC1_Init+0x94>)
 8001654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_ADC1_Init+0x94>)
 800165c:	2200      	movs	r2, #0
 800165e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_ADC1_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_ADC1_Init+0x94>)
 8001668:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800166c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_ADC1_Init+0x94>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_ADC1_Init+0x94>)
 8001676:	2202      	movs	r2, #2
 8001678:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <MX_ADC1_Init+0x94>)
 800167c:	f000 fcec 	bl	8002058 <HAL_ADC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001686:	f000 fa67 	bl	8001b58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800168a:	2302      	movs	r3, #2
 800168c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800168e:	2301      	movs	r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_ADC1_Init+0x94>)
 800169c:	f000 feae 	bl	80023fc <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f000 fa57 	bl	8001b58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <MX_ADC1_Init+0x94>)
 80016b8:	f000 fea0 	bl	80023fc <HAL_ADC_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80016c2:	f000 fa49 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000015c 	.word	0x2000015c
 80016d4:	40012400 	.word	0x40012400

080016d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <MX_TIM2_Init+0xe4>)
 800170a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <MX_TIM2_Init+0xe4>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <MX_TIM2_Init+0xe4>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_TIM2_Init+0xe4>)
 800171e:	2263      	movs	r2, #99	; 0x63
 8001720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <MX_TIM2_Init+0xe4>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <MX_TIM2_Init+0xe4>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172e:	4823      	ldr	r0, [pc, #140]	; (80017bc <MX_TIM2_Init+0xe4>)
 8001730:	f002 f9e4 	bl	8003afc <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800173a:	f000 fa0d 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001748:	4619      	mov	r1, r3
 800174a:	481c      	ldr	r0, [pc, #112]	; (80017bc <MX_TIM2_Init+0xe4>)
 800174c:	f002 fdb6 	bl	80042bc <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001756:	f000 f9ff 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <MX_TIM2_Init+0xe4>)
 800175c:	f002 fa4b 	bl	8003bf6 <HAL_TIM_PWM_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001766:	f000 f9f7 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	4619      	mov	r1, r3
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <MX_TIM2_Init+0xe4>)
 800177a:	f003 f92b 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001784:	f000 f9e8 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001788:	2360      	movs	r3, #96	; 0x60
 800178a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	220c      	movs	r2, #12
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <MX_TIM2_Init+0xe4>)
 80017a0:	f002 fcce 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80017aa:	f000 f9d5 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <MX_TIM2_Init+0xe4>)
 80017b0:	f000 fae8 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001d4 	.word	0x200001d4

080017c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2224      	movs	r2, #36	; 0x24
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 f99a 	bl	8004b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017de:	4a21      	ldr	r2, [pc, #132]	; (8001864 <MX_TIM3_Init+0xa4>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001802:	2303      	movs	r3, #3
 8001804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM3_Init+0xa0>)
 800182e:	f002 fadd 	bl	8003dec <HAL_TIM_Encoder_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001838:	f000 f98e 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM3_Init+0xa0>)
 800184a:	f003 f8c3 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001854:	f000 f980 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3730      	adds	r7, #48	; 0x30
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000114 	.word	0x20000114
 8001864:	40000400 	.word	0x40000400

08001868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	463b      	mov	r3, r7
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_TIM4_Init+0x94>)
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <MX_TIM4_Init+0x98>)
 8001888:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_TIM4_Init+0x94>)
 800188c:	224f      	movs	r2, #79	; 0x4f
 800188e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_TIM4_Init+0x94>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_TIM4_Init+0x94>)
 8001898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_TIM4_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM4_Init+0x94>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018aa:	4814      	ldr	r0, [pc, #80]	; (80018fc <MX_TIM4_Init+0x94>)
 80018ac:	f002 f926 	bl	8003afc <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80018b6:	f000 f94f 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4619      	mov	r1, r3
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <MX_TIM4_Init+0x94>)
 80018c8:	f002 fcf8 	bl	80042bc <HAL_TIM_ConfigClockSource>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80018d2:	f000 f941 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_TIM4_Init+0x94>)
 80018e4:	f003 f876 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80018ee:	f000 f933 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200000cc 	.word	0x200000cc
 8001900:	40000800 	.word	0x40000800

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_DMA_Init+0x38>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <MX_DMA_Init+0x38>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6153      	str	r3, [r2, #20]
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_DMA_Init+0x38>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	200b      	movs	r0, #11
 8001928:	f001 f839 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800192c:	200b      	movs	r0, #11
 800192e:	f001 f852 	bl	80029d6 <HAL_NVIC_EnableIRQ>

}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000

08001940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <MX_GPIO_Init+0xc0>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a29      	ldr	r2, [pc, #164]	; (8001a00 <MX_GPIO_Init+0xc0>)
 800195a:	f043 0310 	orr.w	r3, r3, #16
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <MX_GPIO_Init+0xc0>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_GPIO_Init+0xc0>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <MX_GPIO_Init+0xc0>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <MX_GPIO_Init+0xc0>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198a:	481e      	ldr	r0, [pc, #120]	; (8001a04 <MX_GPIO_Init+0xc4>)
 800198c:	f001 fbb0 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2302      	movs	r3, #2
 80019a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	4619      	mov	r1, r3
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MX_GPIO_Init+0xc4>)
 80019aa:	f001 fa1d 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BYTEMP_Pin MANUAL_Pin STOP_Pin */
  GPIO_InitStruct.Pin = BYTEMP_Pin|MANUAL_Pin|STOP_Pin;
 80019ae:	2323      	movs	r3, #35	; 0x23
 80019b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_GPIO_Init+0xc8>)
 80019b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	4619      	mov	r1, r3
 80019c0:	4812      	ldr	r0, [pc, #72]	; (8001a0c <MX_GPIO_Init+0xcc>)
 80019c2:	f001 fa11 	bl	8002de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2006      	movs	r0, #6
 80019cc:	f000 ffe7 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019d0:	2006      	movs	r0, #6
 80019d2:	f001 f800 	bl	80029d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2007      	movs	r0, #7
 80019dc:	f000 ffdf 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019e0:	2007      	movs	r0, #7
 80019e2:	f000 fff8 	bl	80029d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2017      	movs	r0, #23
 80019ec:	f000 ffd7 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019f0:	2017      	movs	r0, #23
 80019f2:	f000 fff0 	bl	80029d6 <HAL_NVIC_EnableIRQ>

}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40011000 	.word	0x40011000
 8001a08:	10210000 	.word	0x10210000
 8001a0c:	40010800 	.word	0x40010800

08001a10 <TIM2_PWM_Set_Duty>:
  * @brief GPIO Initialization Function
  * @param Duty(%) 0 -> 100. % High voltage
  * @retval None
  */
void TIM2_PWM_Set_Duty(uint8_t duty)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	uint16_t compare = (htim2.Init.Period + 1) * duty / 100;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <TIM2_PWM_Set_Duty+0x34>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <TIM2_PWM_Set_Duty+0x38>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	095b      	lsrs	r3, r3, #5
 8001a2e:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, compare);
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <TIM2_PWM_Set_Duty+0x34>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	89fa      	ldrh	r2, [r7, #14]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200001d4 	.word	0x200001d4
 8001a48:	51eb851f 	.word	0x51eb851f

08001a4c <TIM2_PWM_Set_Frequency>:
  * @brief GPIO Initialization Function
  * @param frequency(Hz); 2 < f < 10000
  * @retval None
  */
void TIM2_PWM_Set_Frequency(uint32_t frequency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	// PSC > 0 -> if f = 10000, period must < 800
	// frequency = f_timer / [(Period + 1) * (Psc + 1)]
	// -> Psc = f_timer / ((period + 1)*frequency) - 1;
	uint32_t period = htim2.Init.Period;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <TIM2_PWM_Set_Frequency+0x34>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60fb      	str	r3, [r7, #12]
	uint32_t f_timer = HAL_RCC_GetPCLK1Freq() * 1; 	 //1 is APB1 time multiplier value
 8001a5a:	f001 ff67 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 8001a5e:	60b8      	str	r0, [r7, #8]
	TIM2->PSC = f_timer / ((period + 1) * frequency) - 1;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a74:	3b01      	subs	r3, #1
 8001a76:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200001d4 	.word	0x200001d4

08001a84 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b091      	sub	sp, #68	; 0x44
 8001a88:	af0e      	add	r7, sp, #56	; 0x38
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

	  actualSpeed = read_speed(htim3);
 8001a8c:	4e15      	ldr	r6, [pc, #84]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a8e:	466d      	mov	r5, sp
 8001a90:	f106 0410 	add.w	r4, r6, #16
 8001a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aa8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001aac:	f7ff fad2 	bl	8001054 <read_speed>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ab6:	801a      	strh	r2, [r3, #0]
	  duty = PID(actualSpeed, desireSpeed);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001abe:	8812      	ldrh	r2, [r2, #0]
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f9e8 	bl	8000e98 <PID>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001ace:	701a      	strb	r2, [r3, #0]
	  TIM2_PWM_Set_Duty(duty);
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff9b 	bl	8001a10 <TIM2_PWM_Set_Duty>


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000114 	.word	0x20000114
 8001ae8:	200000b8 	.word	0x200000b8
 8001aec:	200000ba 	.word	0x200000ba
 8001af0:	200000bd 	.word	0x200000bd

08001af4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b02:	4812      	ldr	r0, [pc, #72]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x58>)
 8001b04:	f001 fb0c 	bl	8003120 <HAL_GPIO_TogglePin>
  switch (GPIO_Pin) {
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d00e      	beq.n	8001b2c <HAL_GPIO_EXTI_Callback+0x38>
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	dc16      	bgt.n	8001b40 <HAL_GPIO_EXTI_Callback+0x4c>
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d002      	beq.n	8001b1c <HAL_GPIO_EXTI_Callback+0x28>
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d004      	beq.n	8001b24 <HAL_GPIO_EXTI_Callback+0x30>
		mode = MODE_STOP;
		TIM2_PWM_Set_Duty(DUTY_MIN);
		HAL_TIM_Base_Stop_IT(&htim4);
		break;
	default:
		break;
 8001b1a:	e011      	b.n	8001b40 <HAL_GPIO_EXTI_Callback+0x4c>
		mode = MODE_BYTEMP;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
		break;
 8001b22:	e00e      	b.n	8001b42 <HAL_GPIO_EXTI_Callback+0x4e>
		mode = MODE_MANUAL;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]
		break;
 8001b2a:	e00a      	b.n	8001b42 <HAL_GPIO_EXTI_Callback+0x4e>
		mode = MODE_STOP;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b2e:	2204      	movs	r2, #4
 8001b30:	701a      	strb	r2, [r3, #0]
		TIM2_PWM_Set_Duty(DUTY_MIN);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff ff6c 	bl	8001a10 <TIM2_PWM_Set_Duty>
		HAL_TIM_Base_Stop_IT(&htim4);
 8001b38:	4806      	ldr	r0, [pc, #24]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b3a:	f002 f82e 	bl	8003b9a <HAL_TIM_Base_Stop_IT>
		break;
 8001b3e:	e000      	b.n	8001b42 <HAL_GPIO_EXTI_Callback+0x4e>
		break;
 8001b40:	bf00      	nop
  }

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	200000bc 	.word	0x200000bc
 8001b54:	200000cc 	.word	0x200000cc

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_MspInit+0x60>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_MspInit+0x60>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_ADC_MspInit+0xbc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d149      	bne.n	8001c7c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_ADC_MspInit+0xc0>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_ADC_MspInit+0xc0>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_ADC_MspInit+0xc0>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_ADC_MspInit+0xc0>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a20      	ldr	r2, [pc, #128]	; (8001c88 <HAL_ADC_MspInit+0xc0>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_ADC_MspInit+0xc0>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_Temp_Pin|ADC1_Manual_Pin;
 8001c18:	2314      	movs	r3, #20
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4819      	ldr	r0, [pc, #100]	; (8001c8c <HAL_ADC_MspInit+0xc4>)
 8001c28:	f001 f8de 	bl	8002de8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_ADC_MspInit+0xcc>)
 8001c30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c56:	2220      	movs	r2, #32
 8001c58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c62:	f000 fed3 	bl	8002a0c <HAL_DMA_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001c6c:	f7ff ff74 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c74:	621a      	str	r2, [r3, #32]
 8001c76:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_ADC_MspInit+0xc8>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40012400 	.word	0x40012400
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	2000018c 	.word	0x2000018c
 8001c94:	40020008 	.word	0x40020008

08001c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cc2:	e018      	b.n	8001cf6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_TIM_Base_MspInit+0x6c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d113      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_TIM_Base_MspInit+0x68>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	201e      	movs	r0, #30
 8001cec:	f000 fe57 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cf0:	201e      	movs	r0, #30
 8001cf2:	f000 fe70 	bl	80029d6 <HAL_NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40000800 	.word	0x40000800

08001d08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d123      	bne.n	8001d70 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	61d3      	str	r3, [r2, #28]
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_TIM_Encoder_MspInit+0x74>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TI1_Encoder_Pin|TI2_Encoder_Pin;
 8001d58:	23c0      	movs	r3, #192	; 0xc0
 8001d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x78>)
 8001d6c:	f001 f83c 	bl	8002de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010800 	.word	0x40010800

08001d84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d117      	bne.n	8001dd4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_TIM_MspPostInit+0x58>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_TIM_MspPostInit+0x58>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_TIM_MspPostInit+0x58>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4804      	ldr	r0, [pc, #16]	; (8001de0 <HAL_TIM_MspPostInit+0x5c>)
 8001dd0:	f001 f80a 	bl	8002de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <NMI_Handler+0x4>

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 f8d5 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f001 f98c 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e44:	2002      	movs	r0, #2
 8001e46:	f001 f985 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA1_Channel1_IRQHandler+0x10>)
 8001e56:	f000 fe93 	bl	8002b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000018c 	.word	0x2000018c

08001e64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e68:	2020      	movs	r0, #32
 8001e6a:	f001 f973 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <TIM4_IRQHandler+0x10>)
 8001e7a:	f002 f859 	bl	8003f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200000cc 	.word	0x200000cc

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f002 fdfc 	bl	8004ab4 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20005000 	.word	0x20005000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	200000c0 	.word	0x200000c0
 8001ef0:	20000230 	.word	0x20000230

08001ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f26:	f7ff ffe5 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f002 fdc9 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7ff fae5 	bl	80014fc <main>
  bx lr
 8001f32:	4770      	bx	lr
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001f3c:	0800544c 	.word	0x0800544c
  ldr r2, =_sbss
 8001f40:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001f44:	20000230 	.word	0x20000230

08001f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_2_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_Init+0x28>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_Init+0x28>)
 8001f56:	f043 0310 	orr.w	r3, r3, #16
 8001f5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 fd13 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fdfc 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fd2b 	bl	80029f2 <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 fcf3 	bl	800299e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000018 	.word	0x20000018
 8001fd0:	20000020 	.word	0x20000020
 8001fd4:	2000001c 	.word	0x2000001c

08001fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_IncTick+0x1c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	2000021c 	.word	0x2000021c

08001ffc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <HAL_GetTick+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	2000021c 	.word	0x2000021c

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff fff0 	bl	8001ffc <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffe0 	bl	8001ffc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000020 	.word	0x20000020

08002058 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0be      	b.n	80021f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fd96 	bl	8001bc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 faff 	bl	80026a0 <ADC_ConversionStop_Disable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8099 	bne.w	80021e6 <HAL_ADC_Init+0x18e>
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8095 	bne.w	80021e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c4:	f023 0302 	bic.w	r3, r3, #2
 80020c8:	f043 0202 	orr.w	r2, r3, #2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7b1b      	ldrb	r3, [r3, #12]
 80020de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f0:	d003      	beq.n	80020fa <HAL_ADC_Init+0xa2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_Init+0xa8>
 80020fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fe:	e000      	b.n	8002102 <HAL_ADC_Init+0xaa>
 8002100:	2300      	movs	r3, #0
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7d1b      	ldrb	r3, [r3, #20]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d119      	bne.n	8002144 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7b1b      	ldrb	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	3b01      	subs	r3, #1
 800211e:	035a      	lsls	r2, r3, #13
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	e00b      	b.n	8002144 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_ADC_Init+0x1a8>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	430b      	orrs	r3, r1
 800216a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002174:	d003      	beq.n	800217e <HAL_ADC_Init+0x126>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d104      	bne.n	8002188 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	3b01      	subs	r3, #1
 8002184:	051b      	lsls	r3, r3, #20
 8002186:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	430a      	orrs	r2, r1
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_ADC_Init+0x1ac>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021c2:	e018      	b.n	80021f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f023 0312 	bic.w	r3, r3, #18
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021e4:	e007      	b.n	80021f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	ffe1f7fd 	.word	0xffe1f7fd
 8002204:	ff1f0efe 	.word	0xff1f0efe

08002208 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a64      	ldr	r2, [pc, #400]	; (80023b0 <HAL_ADC_Start_DMA+0x1a8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_ADC_Start_DMA+0x24>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a63      	ldr	r2, [pc, #396]	; (80023b4 <HAL_ADC_Start_DMA+0x1ac>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d106      	bne.n	800223a <HAL_ADC_Start_DMA+0x32>
 800222c:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <HAL_ADC_Start_DMA+0x1a8>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 80b3 	bne.w	80023a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_ADC_Start_DMA+0x40>
 8002244:	2302      	movs	r3, #2
 8002246:	e0ae      	b.n	80023a6 <HAL_ADC_Start_DMA+0x19e>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f9cb 	bl	80025ec <ADC_Enable>
 8002256:	4603      	mov	r3, r0
 8002258:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 809a 	bne.w	8002396 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4e      	ldr	r2, [pc, #312]	; (80023b4 <HAL_ADC_Start_DMA+0x1ac>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d105      	bne.n	800228c <HAL_ADC_Start_DMA+0x84>
 8002280:	4b4b      	ldr	r3, [pc, #300]	; (80023b0 <HAL_ADC_Start_DMA+0x1a8>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d115      	bne.n	80022b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d026      	beq.n	80022f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022b6:	e01d      	b.n	80022f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a39      	ldr	r2, [pc, #228]	; (80023b0 <HAL_ADC_Start_DMA+0x1a8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_ADC_Start_DMA+0xd0>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_ADC_Start_DMA+0x1ac>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d10d      	bne.n	80022f4 <HAL_ADC_Start_DMA+0xec>
 80022d8:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <HAL_ADC_Start_DMA+0x1a8>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f023 0206 	bic.w	r2, r3, #6
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
 800230c:	e002      	b.n	8002314 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <HAL_ADC_Start_DMA+0x1b0>)
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a24      	ldr	r2, [pc, #144]	; (80023bc <HAL_ADC_Start_DMA+0x1b4>)
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <HAL_ADC_Start_DMA+0x1b8>)
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0202 	mvn.w	r2, #2
 800233c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a18      	ldr	r0, [r3, #32]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	334c      	adds	r3, #76	; 0x4c
 8002358:	4619      	mov	r1, r3
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f000 fbaf 	bl	8002ac0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800236c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002370:	d108      	bne.n	8002384 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002380:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002382:	e00f      	b.n	80023a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002392:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002394:	e006      	b.n	80023a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800239e:	e001      	b.n	80023a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40012400 	.word	0x40012400
 80023b4:	40012800 	.word	0x40012800
 80023b8:	08002723 	.word	0x08002723
 80023bc:	0800279f 	.word	0x0800279f
 80023c0:	080027bb 	.word	0x080027bb

080023c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x20>
 8002418:	2302      	movs	r3, #2
 800241a:	e0dc      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x1da>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b06      	cmp	r3, #6
 800242a:	d81c      	bhi.n	8002466 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3b05      	subs	r3, #5
 800243e:	221f      	movs	r2, #31
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	4019      	ands	r1, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b05      	subs	r3, #5
 8002458:	fa00 f203 	lsl.w	r2, r0, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	635a      	str	r2, [r3, #52]	; 0x34
 8002464:	e03c      	b.n	80024e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d81c      	bhi.n	80024a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b23      	subs	r3, #35	; 0x23
 8002480:	221f      	movs	r2, #31
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	4019      	ands	r1, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b23      	subs	r3, #35	; 0x23
 800249a:	fa00 f203 	lsl.w	r2, r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
 80024a6:	e01b      	b.n	80024e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b41      	subs	r3, #65	; 0x41
 80024ba:	221f      	movs	r2, #31
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	4019      	ands	r1, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b41      	subs	r3, #65	; 0x41
 80024d4:	fa00 f203 	lsl.w	r2, r0, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d91c      	bls.n	8002522 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68d9      	ldr	r1, [r3, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	3b1e      	subs	r3, #30
 80024fa:	2207      	movs	r2, #7
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	4019      	ands	r1, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6898      	ldr	r0, [r3, #8]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	3b1e      	subs	r3, #30
 8002514:	fa00 f203 	lsl.w	r2, r0, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	e019      	b.n	8002556 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6919      	ldr	r1, [r3, #16]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	2207      	movs	r2, #7
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4019      	ands	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6898      	ldr	r0, [r3, #8]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b10      	cmp	r3, #16
 800255c:	d003      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002562:	2b11      	cmp	r3, #17
 8002564:	d132      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d125      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d126      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800258c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b10      	cmp	r3, #16
 8002594:	d11a      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9a      	lsrs	r2, r3, #18
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ac:	e002      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f9      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x1b2>
 80025ba:	e007      	b.n	80025cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40012400 	.word	0x40012400
 80025e4:	20000018 	.word	0x20000018
 80025e8:	431bde83 	.word	0x431bde83

080025ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d040      	beq.n	800268c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <ADC_Enable+0xac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1f      	ldr	r2, [pc, #124]	; (800269c <ADC_Enable+0xb0>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002628:	e002      	b.n	8002630 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002636:	f7ff fce1 	bl	8001ffc <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800263c:	e01f      	b.n	800267e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800263e:	f7ff fcdd 	bl	8001ffc <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d918      	bls.n	800267e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d011      	beq.n	800267e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d1d8      	bne.n	800263e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000018 	.word	0x20000018
 800269c:	431bde83 	.word	0x431bde83

080026a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d12e      	bne.n	8002718 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ca:	f7ff fc97 	bl	8001ffc <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026d0:	e01b      	b.n	800270a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026d2:	f7ff fc93 	bl	8001ffc <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d914      	bls.n	800270a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10d      	bne.n	800270a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e007      	b.n	800271a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d0dc      	beq.n	80026d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002738:	2b00      	cmp	r3, #0
 800273a:	d127      	bne.n	800278c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002752:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002756:	d115      	bne.n	8002784 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fe1d 	bl	80023c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800278a:	e004      	b.n	8002796 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fe12 	bl	80023d6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f043 0204 	orr.w	r2, r3, #4
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff fe01 	bl	80023e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4906      	ldr	r1, [pc, #24]	; (8002888 <__NVIC_EnableIRQ+0x34>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f7ff ff90 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff2d 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b0:	f7ff ff42 	bl	8002838 <__NVIC_GetPriorityGrouping>
 80029b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7ff ff90 	bl	80028e0 <NVIC_EncodePriority>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff5f 	bl	800288c <__NVIC_SetPriority>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff35 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ffa2 	bl	8002944 <SysTick_Config>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e043      	b.n	8002aaa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_DMA_Init+0xa8>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <HAL_DMA_Init+0xac>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_DMA_Init+0xb0>)
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	bffdfff8 	.word	0xbffdfff8
 8002ab8:	cccccccd 	.word	0xcccccccd
 8002abc:	40020000 	.word	0x40020000

08002ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_DMA_Start_IT+0x20>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e04a      	b.n	8002b76 <HAL_DMA_Start_IT+0xb6>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d13a      	bne.n	8002b68 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f938 	bl	8002d8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 020e 	orr.w	r2, r2, #14
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e00f      	b.n	8002b56 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0204 	bic.w	r2, r2, #4
 8002b44:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 020a 	orr.w	r2, r2, #10
 8002b54:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e005      	b.n	8002b74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d04f      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xc8>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04a      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d107      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0204 	bic.w	r2, r2, #4
 8002bce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a66      	ldr	r2, [pc, #408]	; (8002d70 <HAL_DMA_IRQHandler+0x1f0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d029      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xae>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_DMA_IRQHandler+0x1f4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d022      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xaa>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_DMA_IRQHandler+0x1f8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xa4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a62      	ldr	r2, [pc, #392]	; (8002d7c <HAL_DMA_IRQHandler+0x1fc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d012      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x9e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a60      	ldr	r2, [pc, #384]	; (8002d80 <HAL_DMA_IRQHandler+0x200>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x98>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a5f      	ldr	r2, [pc, #380]	; (8002d84 <HAL_DMA_IRQHandler+0x204>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d102      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x92>
 8002c0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c10:	e00e      	b.n	8002c30 <HAL_DMA_IRQHandler+0xb0>
 8002c12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c16:	e00b      	b.n	8002c30 <HAL_DMA_IRQHandler+0xb0>
 8002c18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c1c:	e008      	b.n	8002c30 <HAL_DMA_IRQHandler+0xb0>
 8002c1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c22:	e005      	b.n	8002c30 <HAL_DMA_IRQHandler+0xb0>
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	e002      	b.n	8002c30 <HAL_DMA_IRQHandler+0xb0>
 8002c2a:	2340      	movs	r3, #64	; 0x40
 8002c2c:	e000      	b.n	8002c30 <HAL_DMA_IRQHandler+0xb0>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	4a55      	ldr	r2, [pc, #340]	; (8002d88 <HAL_DMA_IRQHandler+0x208>)
 8002c32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8094 	beq.w	8002d66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c46:	e08e      	b.n	8002d66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d056      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x186>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d051      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10b      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 020a 	bic.w	r2, r2, #10
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a38      	ldr	r2, [pc, #224]	; (8002d70 <HAL_DMA_IRQHandler+0x1f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d029      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x166>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <HAL_DMA_IRQHandler+0x1f4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d022      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x162>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a35      	ldr	r2, [pc, #212]	; (8002d78 <HAL_DMA_IRQHandler+0x1f8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01a      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x15c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <HAL_DMA_IRQHandler+0x1fc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d012      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x156>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a32      	ldr	r2, [pc, #200]	; (8002d80 <HAL_DMA_IRQHandler+0x200>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x150>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a31      	ldr	r2, [pc, #196]	; (8002d84 <HAL_DMA_IRQHandler+0x204>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d102      	bne.n	8002cca <HAL_DMA_IRQHandler+0x14a>
 8002cc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cc8:	e00e      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x168>
 8002cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cce:	e00b      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x168>
 8002cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd4:	e008      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x168>
 8002cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cda:	e005      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x168>
 8002cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce0:	e002      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x168>
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e000      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x168>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <HAL_DMA_IRQHandler+0x208>)
 8002cea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d034      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d04:	e02f      	b.n	8002d66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d028      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1e8>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d023      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 020e 	bic.w	r2, r2, #14
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
    }
  }
  return;
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
}
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40020008 	.word	0x40020008
 8002d74:	4002001c 	.word	0x4002001c
 8002d78:	40020030 	.word	0x40020030
 8002d7c:	40020044 	.word	0x40020044
 8002d80:	40020058 	.word	0x40020058
 8002d84:	4002006c 	.word	0x4002006c
 8002d88:	40020000 	.word	0x40020000

08002d8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d108      	bne.n	8002dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dca:	e007      	b.n	8002ddc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b08b      	sub	sp, #44	; 0x2c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfa:	e169      	b.n	80030d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8158 	bne.w	80030ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4a9a      	ldr	r2, [pc, #616]	; (8003088 <HAL_GPIO_Init+0x2a0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d05e      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e24:	4a98      	ldr	r2, [pc, #608]	; (8003088 <HAL_GPIO_Init+0x2a0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d875      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a98      	ldr	r2, [pc, #608]	; (800308c <HAL_GPIO_Init+0x2a4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d058      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e30:	4a96      	ldr	r2, [pc, #600]	; (800308c <HAL_GPIO_Init+0x2a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d86f      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e36:	4a96      	ldr	r2, [pc, #600]	; (8003090 <HAL_GPIO_Init+0x2a8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d052      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e3c:	4a94      	ldr	r2, [pc, #592]	; (8003090 <HAL_GPIO_Init+0x2a8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d869      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e42:	4a94      	ldr	r2, [pc, #592]	; (8003094 <HAL_GPIO_Init+0x2ac>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d04c      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e48:	4a92      	ldr	r2, [pc, #584]	; (8003094 <HAL_GPIO_Init+0x2ac>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d863      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e4e:	4a92      	ldr	r2, [pc, #584]	; (8003098 <HAL_GPIO_Init+0x2b0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d046      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e54:	4a90      	ldr	r2, [pc, #576]	; (8003098 <HAL_GPIO_Init+0x2b0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d85d      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d82a      	bhi.n	8002eb4 <HAL_GPIO_Init+0xcc>
 8002e5e:	2b12      	cmp	r3, #18
 8002e60:	d859      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_GPIO_Init+0x80>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002ee3 	.word	0x08002ee3
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	08002ecf 	.word	0x08002ecf
 8002e74:	08002f11 	.word	0x08002f11
 8002e78:	08002f17 	.word	0x08002f17
 8002e7c:	08002f17 	.word	0x08002f17
 8002e80:	08002f17 	.word	0x08002f17
 8002e84:	08002f17 	.word	0x08002f17
 8002e88:	08002f17 	.word	0x08002f17
 8002e8c:	08002f17 	.word	0x08002f17
 8002e90:	08002f17 	.word	0x08002f17
 8002e94:	08002f17 	.word	0x08002f17
 8002e98:	08002f17 	.word	0x08002f17
 8002e9c:	08002f17 	.word	0x08002f17
 8002ea0:	08002f17 	.word	0x08002f17
 8002ea4:	08002f17 	.word	0x08002f17
 8002ea8:	08002f17 	.word	0x08002f17
 8002eac:	08002ec5 	.word	0x08002ec5
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	4a79      	ldr	r2, [pc, #484]	; (800309c <HAL_GPIO_Init+0x2b4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eba:	e02c      	b.n	8002f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	623b      	str	r3, [r7, #32]
          break;
 8002ec2:	e029      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	623b      	str	r3, [r7, #32]
          break;
 8002ecc:	e024      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	623b      	str	r3, [r7, #32]
          break;
 8002ed6:	e01f      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	330c      	adds	r3, #12
 8002ede:	623b      	str	r3, [r7, #32]
          break;
 8002ee0:	e01a      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eea:	2304      	movs	r3, #4
 8002eec:	623b      	str	r3, [r7, #32]
          break;
 8002eee:	e013      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	611a      	str	r2, [r3, #16]
          break;
 8002f02:	e009      	b.n	8002f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f04:	2308      	movs	r3, #8
 8002f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	615a      	str	r2, [r3, #20]
          break;
 8002f0e:	e003      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
          break;
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          break;
 8002f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2bff      	cmp	r3, #255	; 0xff
 8002f1c:	d801      	bhi.n	8002f22 <HAL_GPIO_Init+0x13a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e001      	b.n	8002f26 <HAL_GPIO_Init+0x13e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2bff      	cmp	r3, #255	; 0xff
 8002f2c:	d802      	bhi.n	8002f34 <HAL_GPIO_Init+0x14c>
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0x152>
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	3b08      	subs	r3, #8
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	210f      	movs	r1, #15
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80b1 	beq.w	80030ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f68:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a4c      	ldr	r2, [pc, #304]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f80:	4a48      	ldr	r2, [pc, #288]	; (80030a4 <HAL_GPIO_Init+0x2bc>)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_GPIO_Init+0x2c0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <HAL_GPIO_Init+0x1ec>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <HAL_GPIO_Init+0x2c4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_GPIO_Init+0x1e8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <HAL_GPIO_Init+0x2c8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <HAL_GPIO_Init+0x1e4>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a3d      	ldr	r2, [pc, #244]	; (80030b4 <HAL_GPIO_Init+0x2cc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_GPIO_Init+0x1e0>
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e006      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	e004      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e002      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	f002 0203 	and.w	r2, r2, #3
 8002fdc:	0092      	lsls	r2, r2, #2
 8002fde:	4093      	lsls	r3, r2
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fe6:	492f      	ldr	r1, [pc, #188]	; (80030a4 <HAL_GPIO_Init+0x2bc>)
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	3302      	adds	r3, #2
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	492c      	ldr	r1, [pc, #176]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	43db      	mvns	r3, r3
 8003016:	4928      	ldr	r1, [pc, #160]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003018:	4013      	ands	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	4922      	ldr	r1, [pc, #136]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	e006      	b.n	8003044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	43db      	mvns	r3, r3
 800303e:	491e      	ldr	r1, [pc, #120]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003040:	4013      	ands	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4918      	ldr	r1, [pc, #96]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	43db      	mvns	r3, r3
 8003066:	4914      	ldr	r1, [pc, #80]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003068:	4013      	ands	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d021      	beq.n	80030bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	490e      	ldr	r1, [pc, #56]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
 8003084:	e021      	b.n	80030ca <HAL_GPIO_Init+0x2e2>
 8003086:	bf00      	nop
 8003088:	10320000 	.word	0x10320000
 800308c:	10310000 	.word	0x10310000
 8003090:	10220000 	.word	0x10220000
 8003094:	10210000 	.word	0x10210000
 8003098:	10120000 	.word	0x10120000
 800309c:	10110000 	.word	0x10110000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40010800 	.word	0x40010800
 80030ac:	40010c00 	.word	0x40010c00
 80030b0:	40011000 	.word	0x40011000
 80030b4:	40011400 	.word	0x40011400
 80030b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_GPIO_Init+0x304>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4909      	ldr	r1, [pc, #36]	; (80030ec <HAL_GPIO_Init+0x304>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	3301      	adds	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f47f ae8e 	bne.w	8002dfc <HAL_GPIO_Init+0x14>
  }
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	372c      	adds	r7, #44	; 0x2c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	40010400 	.word	0x40010400

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800310c:	e003      	b.n	8003116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	611a      	str	r2, [r3, #16]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4013      	ands	r3, r2
 8003138:	041a      	lsls	r2, r3, #16
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43d9      	mvns	r1, r3
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	400b      	ands	r3, r1
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
	...

08003154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fcbe 	bl	8001af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e26c      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8087 	beq.w	80032b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a4:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d00c      	beq.n	80031ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b0:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d112      	bne.n	80031e2 <HAL_RCC_OscConfig+0x5e>
 80031bc:	4b8c      	ldr	r3, [pc, #560]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d10b      	bne.n	80031e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ca:	4b89      	ldr	r3, [pc, #548]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d06c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x12c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d168      	bne.n	80032b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e246      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x76>
 80031ec:	4b80      	ldr	r3, [pc, #512]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a7f      	ldr	r2, [pc, #508]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	e02e      	b.n	8003258 <HAL_RCC_OscConfig+0xd4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x98>
 8003202:	4b7b      	ldr	r3, [pc, #492]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7a      	ldr	r2, [pc, #488]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b78      	ldr	r3, [pc, #480]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xd4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0xbc>
 8003226:	4b72      	ldr	r3, [pc, #456]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a71      	ldr	r2, [pc, #452]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b6f      	ldr	r3, [pc, #444]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xd4>
 8003240:	4b6b      	ldr	r3, [pc, #428]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6a      	ldr	r2, [pc, #424]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b68      	ldr	r3, [pc, #416]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a67      	ldr	r2, [pc, #412]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fecc 	bl	8001ffc <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe fec8 	bl	8001ffc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1fa      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xe4>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe feb8 	bl	8001ffc <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe feb4 	bl	8001ffc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1e6      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x10c>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032be:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ca:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x18c>
 80032d6:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x176>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1ba      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4939      	ldr	r1, [pc, #228]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe fe6d 	bl	8001ffc <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003326:	f7fe fe69 	bl	8001ffc <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e19b      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4927      	ldr	r1, [pc, #156]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fe4c 	bl	8001ffc <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003368:	f7fe fe48 	bl	8001ffc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e17a      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d03a      	beq.n	8003408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d019      	beq.n	80033ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_RCC_OscConfig+0x274>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a0:	f7fe fe2c 	bl	8001ffc <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fe fe28 	bl	8001ffc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e15a      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f000 fac4 	bl	8003954 <RCC_Delay>
 80033cc:	e01c      	b.n	8003408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_RCC_OscConfig+0x274>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d4:	f7fe fe12 	bl	8001ffc <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033da:	e00f      	b.n	80033fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033dc:	f7fe fe0e 	bl	8001ffc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d908      	bls.n	80033fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e140      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	42420000 	.word	0x42420000
 80033f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b9e      	ldr	r3, [pc, #632]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e9      	bne.n	80033dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a6 	beq.w	8003562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b97      	ldr	r3, [pc, #604]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b94      	ldr	r3, [pc, #592]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a93      	ldr	r2, [pc, #588]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	61d3      	str	r3, [r2, #28]
 8003432:	4b91      	ldr	r3, [pc, #580]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b8e      	ldr	r3, [pc, #568]	; (800367c <HAL_RCC_OscConfig+0x4f8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <HAL_RCC_OscConfig+0x4f8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a8a      	ldr	r2, [pc, #552]	; (800367c <HAL_RCC_OscConfig+0x4f8>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fe fdcf 	bl	8001ffc <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fe fdcb 	bl	8001ffc <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	; 0x64
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0fd      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCC_OscConfig+0x4f8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x312>
 8003488:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6213      	str	r3, [r2, #32]
 8003494:	e02d      	b.n	80034f2 <HAL_RCC_OscConfig+0x36e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x334>
 800349e:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	6213      	str	r3, [r2, #32]
 80034aa:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a72      	ldr	r2, [pc, #456]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	e01c      	b.n	80034f2 <HAL_RCC_OscConfig+0x36e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d10c      	bne.n	80034da <HAL_RCC_OscConfig+0x356>
 80034c0:	4b6d      	ldr	r3, [pc, #436]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a6c      	ldr	r2, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a69      	ldr	r2, [pc, #420]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	e00b      	b.n	80034f2 <HAL_RCC_OscConfig+0x36e>
 80034da:	4b67      	ldr	r3, [pc, #412]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a66      	ldr	r2, [pc, #408]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6213      	str	r3, [r2, #32]
 80034e6:	4b64      	ldr	r3, [pc, #400]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a63      	ldr	r2, [pc, #396]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d015      	beq.n	8003526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fa:	f7fe fd7f 	bl	8001ffc <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fe fd7b 	bl	8001ffc <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0ab      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ee      	beq.n	8003502 <HAL_RCC_OscConfig+0x37e>
 8003524:	e014      	b.n	8003550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003526:	f7fe fd69 	bl	8001ffc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe fd65 	bl	8001ffc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e095      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ee      	bne.n	800352e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4b48      	ldr	r3, [pc, #288]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4a47      	ldr	r2, [pc, #284]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8081 	beq.w	800366e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d061      	beq.n	800363c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d146      	bne.n	800360e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_OscConfig+0x4fc>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe fd39 	bl	8001ffc <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe fd35 	bl	8001ffc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e067      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d108      	bne.n	80035c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035b6:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	492d      	ldr	r1, [pc, #180]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c8:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a19      	ldr	r1, [r3, #32]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	430b      	orrs	r3, r1
 80035da:	4927      	ldr	r1, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_RCC_OscConfig+0x4fc>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fe fd09 	bl	8001ffc <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ee:	f7fe fd05 	bl	8001ffc <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e037      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x46a>
 800360c:	e02f      	b.n	800366e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <HAL_RCC_OscConfig+0x4fc>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe fcf2 	bl	8001ffc <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe fcee 	bl	8001ffc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e020      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x498>
 800363a:	e018      	b.n	800366e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e013      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	429a      	cmp	r2, r3
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	40007000 	.word	0x40007000
 8003680:	42420060 	.word	0x42420060

08003684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0d0      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d910      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4965      	ldr	r1, [pc, #404]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a58      	ldr	r2, [pc, #352]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b50      	ldr	r3, [pc, #320]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	494d      	ldr	r1, [pc, #308]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d040      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d115      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e073      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06b      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4936      	ldr	r1, [pc, #216]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fe fc42 	bl	8001ffc <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fc3e 	bl	8001ffc <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e053      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d210      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	4922      	ldr	r1, [pc, #136]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e032      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4916      	ldr	r1, [pc, #88]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490e      	ldr	r1, [pc, #56]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003812:	f000 f821 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	490a      	ldr	r1, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1cc>)
 800382c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_ClockConfig+0x1d0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fba0 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40022000 	.word	0x40022000
 8003848:	40021000 	.word	0x40021000
 800384c:	080053f8 	.word	0x080053f8
 8003850:	20000018 	.word	0x20000018
 8003854:	2000001c 	.word	0x2000001c

08003858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b490      	push	{r4, r7}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800385e:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003860:	1d3c      	adds	r4, r7, #4
 8003862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003868:	f240 2301 	movw	r3, #513	; 0x201
 800386c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x40>
 8003892:	2b08      	cmp	r3, #8
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x46>
 8003896:	e02d      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 800389a:	623b      	str	r3, [r7, #32]
      break;
 800389c:	e02d      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	0c9b      	lsrs	r3, r3, #18
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038aa:	4413      	add	r3, r2
 80038ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	0c5b      	lsrs	r3, r3, #17
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ca:	4413      	add	r3, r2
 80038cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d6:	fb02 f203 	mul.w	r2, r2, r3
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	e004      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	623b      	str	r3, [r7, #32]
      break;
 80038f2:	e002      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	623b      	str	r3, [r7, #32]
      break;
 80038f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fa:	6a3b      	ldr	r3, [r7, #32]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3728      	adds	r7, #40	; 0x28
 8003900:	46bd      	mov	sp, r7
 8003902:	bc90      	pop	{r4, r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	080053e8 	.word	0x080053e8
 800390c:	40021000 	.word	0x40021000
 8003910:	007a1200 	.word	0x007a1200
 8003914:	003d0900 	.word	0x003d0900

08003918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b02      	ldr	r3, [pc, #8]	; (8003928 <HAL_RCC_GetHCLKFreq+0x10>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	20000018 	.word	0x20000018

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003930:	f7ff fff2 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	08005408 	.word	0x08005408

08003954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <RCC_Delay+0x34>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <RCC_Delay+0x38>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003970:	bf00      	nop
  }
  while (Delay --);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	60fa      	str	r2, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <RCC_Delay+0x1c>
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	20000018 	.word	0x20000018
 800398c:	10624dd3 	.word	0x10624dd3

08003990 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d07d      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b0:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a4b      	ldr	r2, [pc, #300]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	61d3      	str	r3, [r2, #28]
 80039c8:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d118      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f0:	f7fe fb04 	bl	8001ffc <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	e008      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fe fb00 	bl	8001ffc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e06d      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02e      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d027      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a34:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a44:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d014      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe facf 	bl	8001ffc <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe facb 	bl	8001ffc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e036      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a84:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	490b      	ldr	r1, [pc, #44]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4904      	ldr	r1, [pc, #16]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40007000 	.word	0x40007000
 8003af8:	42420440 	.word	0x42420440

08003afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e041      	b.n	8003b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe f8b8 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f000 fca6 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_TIM_Base_Stop_IT+0x48>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	f240 4344 	movw	r3, #1092	; 0x444
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <HAL_TIM_Base_Stop_IT+0x48>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e041      	b.n	8003c8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f839 	bl	8003c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f000 fc29 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_TIM_PWM_Start+0x24>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e022      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d109      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x3e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e015      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x58>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e008      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e05e      	b.n	8003dd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x82>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d28:	e013      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x92>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d38:	e00b      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Start+0xa2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fe16 	bl	800498c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_TIM_PWM_Start+0x138>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d107      	bne.n	8003d7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_TIM_PWM_Start+0x138>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_TIM_PWM_Start+0xfa>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d009      	beq.n	8003da2 <HAL_TIM_PWM_Start+0xfa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_TIM_PWM_Start+0x13c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_TIM_PWM_Start+0xfa>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_TIM_PWM_Start+0x140>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d010      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	e007      	b.n	8003dd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800

08003dec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e093      	b.n	8003f28 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd ff77 	bl	8001d08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e30:	f023 0307 	bic.w	r3, r3, #7
 8003e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f000 fb23 	bl	800448c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e8c:	f023 030c 	bic.w	r3, r3, #12
 8003e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	011a      	lsls	r2, r3, #4
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	031b      	lsls	r3, r3, #12
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0202 	mvn.w	r2, #2
 8003f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa6f 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa62 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fa71 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0204 	mvn.w	r2, #4
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa45 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa38 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fa47 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0208 	mvn.w	r2, #8
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa1b 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa0e 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fa1d 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b10      	cmp	r3, #16
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b10      	cmp	r3, #16
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0210 	mvn.w	r2, #16
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2208      	movs	r2, #8
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9f1 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f9e4 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f9f3 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d10e      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0201 	mvn.w	r2, #1
 80040ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd fce8 	bl	8001a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b80      	cmp	r3, #128	; 0x80
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b80      	cmp	r3, #128	; 0x80
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fce1 	bl	8004aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9b7 	bl	800447a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b20      	cmp	r3, #32
 8004118:	d10e      	bne.n	8004138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b20      	cmp	r3, #32
 8004126:	d107      	bne.n	8004138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0220 	mvn.w	r2, #32
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fcac 	bl	8004a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004156:	2302      	movs	r3, #2
 8004158:	e0ac      	b.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	f200 809f 	bhi.w	80042a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080042a9 	.word	0x080042a9
 8004178:	080042a9 	.word	0x080042a9
 800417c:	080042a9 	.word	0x080042a9
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080042a9 	.word	0x080042a9
 8004188:	080042a9 	.word	0x080042a9
 800418c:	080042a9 	.word	0x080042a9
 8004190:	08004227 	.word	0x08004227
 8004194:	080042a9 	.word	0x080042a9
 8004198:	080042a9 	.word	0x080042a9
 800419c:	080042a9 	.word	0x080042a9
 80041a0:	08004267 	.word	0x08004267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f9d0 	bl	8004550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0208 	orr.w	r2, r2, #8
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0204 	bic.w	r2, r2, #4
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	619a      	str	r2, [r3, #24]
      break;
 80041e2:	e062      	b.n	80042aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fa16 	bl	800461c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	619a      	str	r2, [r3, #24]
      break;
 8004224:	e041      	b.n	80042aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fa5f 	bl	80046f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0208 	orr.w	r2, r2, #8
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0204 	bic.w	r2, r2, #4
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	61da      	str	r2, [r3, #28]
      break;
 8004264:	e021      	b.n	80042aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 faa9 	bl	80047c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69d9      	ldr	r1, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	021a      	lsls	r2, r3, #8
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	61da      	str	r2, [r3, #28]
      break;
 80042a6:	e000      	b.n	80042aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80042a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIM_ConfigClockSource+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0b3      	b.n	800443c <HAL_TIM_ConfigClockSource+0x180>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430c:	d03e      	beq.n	800438c <HAL_TIM_ConfigClockSource+0xd0>
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004312:	f200 8087 	bhi.w	8004424 <HAL_TIM_ConfigClockSource+0x168>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	f000 8085 	beq.w	8004428 <HAL_TIM_ConfigClockSource+0x16c>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d87f      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d01a      	beq.n	800435e <HAL_TIM_ConfigClockSource+0xa2>
 8004328:	2b70      	cmp	r3, #112	; 0x70
 800432a:	d87b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d050      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x116>
 8004330:	2b60      	cmp	r3, #96	; 0x60
 8004332:	d877      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
 8004334:	2b50      	cmp	r3, #80	; 0x50
 8004336:	d03c      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xf6>
 8004338:	2b50      	cmp	r3, #80	; 0x50
 800433a:	d873      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d058      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x136>
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d86f      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d064      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x156>
 8004348:	2b30      	cmp	r3, #48	; 0x30
 800434a:	d86b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d060      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x156>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d867      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05c      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x156>
 8004358:	2b10      	cmp	r3, #16
 800435a:	d05a      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800435c:	e062      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6899      	ldr	r1, [r3, #8]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f000 faee 	bl	800494e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004380:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	609a      	str	r2, [r3, #8]
      break;
 800438a:	e04e      	b.n	800442a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6899      	ldr	r1, [r3, #8]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f000 fad7 	bl	800494e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ae:	609a      	str	r2, [r3, #8]
      break;
 80043b0:	e03b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fa4e 	bl	8004860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2150      	movs	r1, #80	; 0x50
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 faa5 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 80043d0:	e02b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 fa6c 	bl	80048bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2160      	movs	r1, #96	; 0x60
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa95 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 80043f0:	e01b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 fa2e 	bl	8004860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fa85 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004410:	e00b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f000 fa7c 	bl	800491a <TIM_ITRx_SetConfig>
        break;
 8004422:	e002      	b.n	800442a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004428:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a29      	ldr	r2, [pc, #164]	; (8004544 <TIM_Base_SetConfig+0xb8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0x30>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x30>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a26      	ldr	r2, [pc, #152]	; (8004548 <TIM_Base_SetConfig+0xbc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x30>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a25      	ldr	r2, [pc, #148]	; (800454c <TIM_Base_SetConfig+0xc0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <TIM_Base_SetConfig+0xb8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00b      	beq.n	80044ee <TIM_Base_SetConfig+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d007      	beq.n	80044ee <TIM_Base_SetConfig+0x62>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <TIM_Base_SetConfig+0xbc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_Base_SetConfig+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <TIM_Base_SetConfig+0xc0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d108      	bne.n	8004500 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a07      	ldr	r2, [pc, #28]	; (8004544 <TIM_Base_SetConfig+0xb8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	615a      	str	r2, [r3, #20]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800

08004550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f023 0201 	bic.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 0302 	bic.w	r3, r3, #2
 8004598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <TIM_OC1_SetConfig+0xc8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10c      	bne.n	80045c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0308 	bic.w	r3, r3, #8
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 0304 	bic.w	r3, r3, #4
 80045c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a13      	ldr	r2, [pc, #76]	; (8004618 <TIM_OC1_SetConfig+0xc8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d111      	bne.n	80045f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00

0800461c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0210 	bic.w	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0320 	bic.w	r3, r3, #32
 8004666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <TIM_OC2_SetConfig+0xd0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d10d      	bne.n	8004698 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a14      	ldr	r2, [pc, #80]	; (80046ec <TIM_OC2_SetConfig+0xd0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d113      	bne.n	80046c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	40012c00 	.word	0x40012c00

080046f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <TIM_OC3_SetConfig+0xd0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10d      	bne.n	800476a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <TIM_OC3_SetConfig+0xd0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d113      	bne.n	800479a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	621a      	str	r2, [r3, #32]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00

080047c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0f      	ldr	r2, [pc, #60]	; (800485c <TIM_OC4_SetConfig+0x98>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d109      	bne.n	8004838 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800482a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	019b      	lsls	r3, r3, #6
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	40012c00 	.word	0x40012c00

08004860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 030a 	bic.w	r3, r3, #10
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 0210 	bic.w	r2, r3, #16
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	031b      	lsls	r3, r3, #12
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	621a      	str	r2, [r3, #32]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	f043 0307 	orr.w	r3, r3, #7
 800493c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b087      	sub	sp, #28
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004968:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	021a      	lsls	r2, r3, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	431a      	orrs	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	609a      	str	r2, [r3, #8]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2201      	movs	r2, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e046      	b.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d009      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800

08004a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <__errno>:
 8004ab4:	4b01      	ldr	r3, [pc, #4]	; (8004abc <__errno+0x8>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000024 	.word	0x20000024

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	4d0c      	ldr	r5, [pc, #48]	; (8004af8 <__libc_init_array+0x38>)
 8004ac6:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	f000 fc5c 	bl	800538c <_init>
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	4d0a      	ldr	r5, [pc, #40]	; (8004b00 <__libc_init_array+0x40>)
 8004ad8:	4c0a      	ldr	r4, [pc, #40]	; (8004b04 <__libc_init_array+0x44>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08005444 	.word	0x08005444
 8004afc:	08005444 	.word	0x08005444
 8004b00:	08005444 	.word	0x08005444
 8004b04:	08005448 	.word	0x08005448

08004b08 <memset>:
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4402      	add	r2, r0
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d100      	bne.n	8004b12 <memset+0xa>
 8004b10:	4770      	bx	lr
 8004b12:	f803 1b01 	strb.w	r1, [r3], #1
 8004b16:	e7f9      	b.n	8004b0c <memset+0x4>

08004b18 <siprintf>:
 8004b18:	b40e      	push	{r1, r2, r3}
 8004b1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b1e:	b500      	push	{lr}
 8004b20:	b09c      	sub	sp, #112	; 0x70
 8004b22:	ab1d      	add	r3, sp, #116	; 0x74
 8004b24:	9002      	str	r0, [sp, #8]
 8004b26:	9006      	str	r0, [sp, #24]
 8004b28:	9107      	str	r1, [sp, #28]
 8004b2a:	9104      	str	r1, [sp, #16]
 8004b2c:	4808      	ldr	r0, [pc, #32]	; (8004b50 <siprintf+0x38>)
 8004b2e:	4909      	ldr	r1, [pc, #36]	; (8004b54 <siprintf+0x3c>)
 8004b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	6800      	ldr	r0, [r0, #0]
 8004b38:	a902      	add	r1, sp, #8
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	f000 f868 	bl	8004c10 <_svfiprintf_r>
 8004b40:	2200      	movs	r2, #0
 8004b42:	9b02      	ldr	r3, [sp, #8]
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	b01c      	add	sp, #112	; 0x70
 8004b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b4c:	b003      	add	sp, #12
 8004b4e:	4770      	bx	lr
 8004b50:	20000024 	.word	0x20000024
 8004b54:	ffff0208 	.word	0xffff0208

08004b58 <__ssputs_r>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	688e      	ldr	r6, [r1, #8]
 8004b5e:	4682      	mov	sl, r0
 8004b60:	429e      	cmp	r6, r3
 8004b62:	460c      	mov	r4, r1
 8004b64:	4690      	mov	r8, r2
 8004b66:	461f      	mov	r7, r3
 8004b68:	d838      	bhi.n	8004bdc <__ssputs_r+0x84>
 8004b6a:	898a      	ldrh	r2, [r1, #12]
 8004b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b70:	d032      	beq.n	8004bd8 <__ssputs_r+0x80>
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	6909      	ldr	r1, [r1, #16]
 8004b76:	3301      	adds	r3, #1
 8004b78:	eba5 0901 	sub.w	r9, r5, r1
 8004b7c:	6965      	ldr	r5, [r4, #20]
 8004b7e:	444b      	add	r3, r9
 8004b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b88:	106d      	asrs	r5, r5, #1
 8004b8a:	429d      	cmp	r5, r3
 8004b8c:	bf38      	it	cc
 8004b8e:	461d      	movcc	r5, r3
 8004b90:	0553      	lsls	r3, r2, #21
 8004b92:	d531      	bpl.n	8004bf8 <__ssputs_r+0xa0>
 8004b94:	4629      	mov	r1, r5
 8004b96:	f000 fb53 	bl	8005240 <_malloc_r>
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	b950      	cbnz	r0, 8004bb4 <__ssputs_r+0x5c>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	f8ca 3000 	str.w	r3, [sl]
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	464a      	mov	r2, r9
 8004bb6:	6921      	ldr	r1, [r4, #16]
 8004bb8:	f000 face 	bl	8005158 <memcpy>
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	6126      	str	r6, [r4, #16]
 8004bca:	444e      	add	r6, r9
 8004bcc:	6026      	str	r6, [r4, #0]
 8004bce:	463e      	mov	r6, r7
 8004bd0:	6165      	str	r5, [r4, #20]
 8004bd2:	eba5 0509 	sub.w	r5, r5, r9
 8004bd6:	60a5      	str	r5, [r4, #8]
 8004bd8:	42be      	cmp	r6, r7
 8004bda:	d900      	bls.n	8004bde <__ssputs_r+0x86>
 8004bdc:	463e      	mov	r6, r7
 8004bde:	4632      	mov	r2, r6
 8004be0:	4641      	mov	r1, r8
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	f000 fac6 	bl	8005174 <memmove>
 8004be8:	68a3      	ldr	r3, [r4, #8]
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	1b9b      	subs	r3, r3, r6
 8004bee:	4432      	add	r2, r6
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	60a3      	str	r3, [r4, #8]
 8004bf4:	6022      	str	r2, [r4, #0]
 8004bf6:	e7db      	b.n	8004bb0 <__ssputs_r+0x58>
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	f000 fb7b 	bl	80052f4 <_realloc_r>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d1e1      	bne.n	8004bc8 <__ssputs_r+0x70>
 8004c04:	4650      	mov	r0, sl
 8004c06:	6921      	ldr	r1, [r4, #16]
 8004c08:	f000 face 	bl	80051a8 <_free_r>
 8004c0c:	e7c7      	b.n	8004b9e <__ssputs_r+0x46>
	...

08004c10 <_svfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	4698      	mov	r8, r3
 8004c16:	898b      	ldrh	r3, [r1, #12]
 8004c18:	4607      	mov	r7, r0
 8004c1a:	061b      	lsls	r3, r3, #24
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	4614      	mov	r4, r2
 8004c20:	b09d      	sub	sp, #116	; 0x74
 8004c22:	d50e      	bpl.n	8004c42 <_svfiprintf_r+0x32>
 8004c24:	690b      	ldr	r3, [r1, #16]
 8004c26:	b963      	cbnz	r3, 8004c42 <_svfiprintf_r+0x32>
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	f000 fb09 	bl	8005240 <_malloc_r>
 8004c2e:	6028      	str	r0, [r5, #0]
 8004c30:	6128      	str	r0, [r5, #16]
 8004c32:	b920      	cbnz	r0, 8004c3e <_svfiprintf_r+0x2e>
 8004c34:	230c      	movs	r3, #12
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	e0d1      	b.n	8004de2 <_svfiprintf_r+0x1d2>
 8004c3e:	2340      	movs	r3, #64	; 0x40
 8004c40:	616b      	str	r3, [r5, #20]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9309      	str	r3, [sp, #36]	; 0x24
 8004c46:	2320      	movs	r3, #32
 8004c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c4c:	2330      	movs	r3, #48	; 0x30
 8004c4e:	f04f 0901 	mov.w	r9, #1
 8004c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004dfc <_svfiprintf_r+0x1ec>
 8004c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c5e:	4623      	mov	r3, r4
 8004c60:	469a      	mov	sl, r3
 8004c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c66:	b10a      	cbz	r2, 8004c6c <_svfiprintf_r+0x5c>
 8004c68:	2a25      	cmp	r2, #37	; 0x25
 8004c6a:	d1f9      	bne.n	8004c60 <_svfiprintf_r+0x50>
 8004c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c70:	d00b      	beq.n	8004c8a <_svfiprintf_r+0x7a>
 8004c72:	465b      	mov	r3, fp
 8004c74:	4622      	mov	r2, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f7ff ff6d 	bl	8004b58 <__ssputs_r>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f000 80aa 	beq.w	8004dd8 <_svfiprintf_r+0x1c8>
 8004c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c86:	445a      	add	r2, fp
 8004c88:	9209      	str	r2, [sp, #36]	; 0x24
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80a2 	beq.w	8004dd8 <_svfiprintf_r+0x1c8>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9307      	str	r3, [sp, #28]
 8004ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004caa:	931a      	str	r3, [sp, #104]	; 0x68
 8004cac:	4654      	mov	r4, sl
 8004cae:	2205      	movs	r2, #5
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	4851      	ldr	r0, [pc, #324]	; (8004dfc <_svfiprintf_r+0x1ec>)
 8004cb6:	f000 fa41 	bl	800513c <memchr>
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	b9d8      	cbnz	r0, 8004cf6 <_svfiprintf_r+0xe6>
 8004cbe:	06d0      	lsls	r0, r2, #27
 8004cc0:	bf44      	itt	mi
 8004cc2:	2320      	movmi	r3, #32
 8004cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc8:	0711      	lsls	r1, r2, #28
 8004cca:	bf44      	itt	mi
 8004ccc:	232b      	movmi	r3, #43	; 0x2b
 8004cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd8:	d015      	beq.n	8004d06 <_svfiprintf_r+0xf6>
 8004cda:	4654      	mov	r4, sl
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f04f 0c0a 	mov.w	ip, #10
 8004ce2:	9a07      	ldr	r2, [sp, #28]
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cea:	3b30      	subs	r3, #48	; 0x30
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	d94e      	bls.n	8004d8e <_svfiprintf_r+0x17e>
 8004cf0:	b1b0      	cbz	r0, 8004d20 <_svfiprintf_r+0x110>
 8004cf2:	9207      	str	r2, [sp, #28]
 8004cf4:	e014      	b.n	8004d20 <_svfiprintf_r+0x110>
 8004cf6:	eba0 0308 	sub.w	r3, r0, r8
 8004cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	46a2      	mov	sl, r4
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	e7d2      	b.n	8004cac <_svfiprintf_r+0x9c>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9103      	str	r1, [sp, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfbb      	ittet	lt
 8004d12:	425b      	neglt	r3, r3
 8004d14:	f042 0202 	orrlt.w	r2, r2, #2
 8004d18:	9307      	strge	r3, [sp, #28]
 8004d1a:	9307      	strlt	r3, [sp, #28]
 8004d1c:	bfb8      	it	lt
 8004d1e:	9204      	strlt	r2, [sp, #16]
 8004d20:	7823      	ldrb	r3, [r4, #0]
 8004d22:	2b2e      	cmp	r3, #46	; 0x2e
 8004d24:	d10c      	bne.n	8004d40 <_svfiprintf_r+0x130>
 8004d26:	7863      	ldrb	r3, [r4, #1]
 8004d28:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2a:	d135      	bne.n	8004d98 <_svfiprintf_r+0x188>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	3402      	adds	r4, #2
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	9203      	str	r2, [sp, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfb8      	it	lt
 8004d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e0c <_svfiprintf_r+0x1fc>
 8004d44:	2203      	movs	r2, #3
 8004d46:	4650      	mov	r0, sl
 8004d48:	7821      	ldrb	r1, [r4, #0]
 8004d4a:	f000 f9f7 	bl	800513c <memchr>
 8004d4e:	b140      	cbz	r0, 8004d62 <_svfiprintf_r+0x152>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	eba0 000a 	sub.w	r0, r0, sl
 8004d56:	fa03 f000 	lsl.w	r0, r3, r0
 8004d5a:	9b04      	ldr	r3, [sp, #16]
 8004d5c:	3401      	adds	r4, #1
 8004d5e:	4303      	orrs	r3, r0
 8004d60:	9304      	str	r3, [sp, #16]
 8004d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d66:	2206      	movs	r2, #6
 8004d68:	4825      	ldr	r0, [pc, #148]	; (8004e00 <_svfiprintf_r+0x1f0>)
 8004d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d6e:	f000 f9e5 	bl	800513c <memchr>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d038      	beq.n	8004de8 <_svfiprintf_r+0x1d8>
 8004d76:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <_svfiprintf_r+0x1f4>)
 8004d78:	bb1b      	cbnz	r3, 8004dc2 <_svfiprintf_r+0x1b2>
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	f023 0307 	bic.w	r3, r3, #7
 8004d82:	3308      	adds	r3, #8
 8004d84:	9303      	str	r3, [sp, #12]
 8004d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d88:	4433      	add	r3, r6
 8004d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8c:	e767      	b.n	8004c5e <_svfiprintf_r+0x4e>
 8004d8e:	460c      	mov	r4, r1
 8004d90:	2001      	movs	r0, #1
 8004d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d96:	e7a5      	b.n	8004ce4 <_svfiprintf_r+0xd4>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f04f 0c0a 	mov.w	ip, #10
 8004d9e:	4619      	mov	r1, r3
 8004da0:	3401      	adds	r4, #1
 8004da2:	9305      	str	r3, [sp, #20]
 8004da4:	4620      	mov	r0, r4
 8004da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004daa:	3a30      	subs	r2, #48	; 0x30
 8004dac:	2a09      	cmp	r2, #9
 8004dae:	d903      	bls.n	8004db8 <_svfiprintf_r+0x1a8>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0c5      	beq.n	8004d40 <_svfiprintf_r+0x130>
 8004db4:	9105      	str	r1, [sp, #20]
 8004db6:	e7c3      	b.n	8004d40 <_svfiprintf_r+0x130>
 8004db8:	4604      	mov	r4, r0
 8004dba:	2301      	movs	r3, #1
 8004dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dc0:	e7f0      	b.n	8004da4 <_svfiprintf_r+0x194>
 8004dc2:	ab03      	add	r3, sp, #12
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	4638      	mov	r0, r7
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <_svfiprintf_r+0x1f8>)
 8004dcc:	a904      	add	r1, sp, #16
 8004dce:	f3af 8000 	nop.w
 8004dd2:	1c42      	adds	r2, r0, #1
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	d1d6      	bne.n	8004d86 <_svfiprintf_r+0x176>
 8004dd8:	89ab      	ldrh	r3, [r5, #12]
 8004dda:	065b      	lsls	r3, r3, #25
 8004ddc:	f53f af2c 	bmi.w	8004c38 <_svfiprintf_r+0x28>
 8004de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de2:	b01d      	add	sp, #116	; 0x74
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	462a      	mov	r2, r5
 8004dee:	4638      	mov	r0, r7
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <_svfiprintf_r+0x1f8>)
 8004df2:	a904      	add	r1, sp, #16
 8004df4:	f000 f87c 	bl	8004ef0 <_printf_i>
 8004df8:	e7eb      	b.n	8004dd2 <_svfiprintf_r+0x1c2>
 8004dfa:	bf00      	nop
 8004dfc:	08005410 	.word	0x08005410
 8004e00:	0800541a 	.word	0x0800541a
 8004e04:	00000000 	.word	0x00000000
 8004e08:	08004b59 	.word	0x08004b59
 8004e0c:	08005416 	.word	0x08005416

08004e10 <_printf_common>:
 8004e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	4616      	mov	r6, r2
 8004e16:	4699      	mov	r9, r3
 8004e18:	688a      	ldr	r2, [r1, #8]
 8004e1a:	690b      	ldr	r3, [r1, #16]
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	bfb8      	it	lt
 8004e22:	4613      	movlt	r3, r2
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e30:	b10a      	cbz	r2, 8004e36 <_printf_common+0x26>
 8004e32:	3301      	adds	r3, #1
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	0699      	lsls	r1, r3, #26
 8004e3a:	bf42      	ittt	mi
 8004e3c:	6833      	ldrmi	r3, [r6, #0]
 8004e3e:	3302      	addmi	r3, #2
 8004e40:	6033      	strmi	r3, [r6, #0]
 8004e42:	6825      	ldr	r5, [r4, #0]
 8004e44:	f015 0506 	ands.w	r5, r5, #6
 8004e48:	d106      	bne.n	8004e58 <_printf_common+0x48>
 8004e4a:	f104 0a19 	add.w	sl, r4, #25
 8004e4e:	68e3      	ldr	r3, [r4, #12]
 8004e50:	6832      	ldr	r2, [r6, #0]
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	42ab      	cmp	r3, r5
 8004e56:	dc28      	bgt.n	8004eaa <_printf_common+0x9a>
 8004e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e5c:	1e13      	subs	r3, r2, #0
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	bf18      	it	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	0692      	lsls	r2, r2, #26
 8004e66:	d42d      	bmi.n	8004ec4 <_printf_common+0xb4>
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e70:	47c0      	blx	r8
 8004e72:	3001      	adds	r0, #1
 8004e74:	d020      	beq.n	8004eb8 <_printf_common+0xa8>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	68e5      	ldr	r5, [r4, #12]
 8004e7a:	f003 0306 	and.w	r3, r3, #6
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	bf18      	it	ne
 8004e82:	2500      	movne	r5, #0
 8004e84:	6832      	ldr	r2, [r6, #0]
 8004e86:	f04f 0600 	mov.w	r6, #0
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	bf08      	it	eq
 8004e8e:	1aad      	subeq	r5, r5, r2
 8004e90:	6922      	ldr	r2, [r4, #16]
 8004e92:	bf08      	it	eq
 8004e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bfc4      	itt	gt
 8004e9c:	1a9b      	subgt	r3, r3, r2
 8004e9e:	18ed      	addgt	r5, r5, r3
 8004ea0:	341a      	adds	r4, #26
 8004ea2:	42b5      	cmp	r5, r6
 8004ea4:	d11a      	bne.n	8004edc <_printf_common+0xcc>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	e008      	b.n	8004ebc <_printf_common+0xac>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4652      	mov	r2, sl
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	47c0      	blx	r8
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d103      	bne.n	8004ec0 <_printf_common+0xb0>
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	e7c4      	b.n	8004e4e <_printf_common+0x3e>
 8004ec4:	2030      	movs	r0, #48	; 0x30
 8004ec6:	18e1      	adds	r1, r4, r3
 8004ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ed2:	4422      	add	r2, r4
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eda:	e7c5      	b.n	8004e68 <_printf_common+0x58>
 8004edc:	2301      	movs	r3, #1
 8004ede:	4622      	mov	r2, r4
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d0e6      	beq.n	8004eb8 <_printf_common+0xa8>
 8004eea:	3601      	adds	r6, #1
 8004eec:	e7d9      	b.n	8004ea2 <_printf_common+0x92>
	...

08004ef0 <_printf_i>:
 8004ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	7e27      	ldrb	r7, [r4, #24]
 8004ef8:	4691      	mov	r9, r2
 8004efa:	2f78      	cmp	r7, #120	; 0x78
 8004efc:	4680      	mov	r8, r0
 8004efe:	469a      	mov	sl, r3
 8004f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f06:	d807      	bhi.n	8004f18 <_printf_i+0x28>
 8004f08:	2f62      	cmp	r7, #98	; 0x62
 8004f0a:	d80a      	bhi.n	8004f22 <_printf_i+0x32>
 8004f0c:	2f00      	cmp	r7, #0
 8004f0e:	f000 80d9 	beq.w	80050c4 <_printf_i+0x1d4>
 8004f12:	2f58      	cmp	r7, #88	; 0x58
 8004f14:	f000 80a4 	beq.w	8005060 <_printf_i+0x170>
 8004f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f20:	e03a      	b.n	8004f98 <_printf_i+0xa8>
 8004f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f26:	2b15      	cmp	r3, #21
 8004f28:	d8f6      	bhi.n	8004f18 <_printf_i+0x28>
 8004f2a:	a001      	add	r0, pc, #4	; (adr r0, 8004f30 <_printf_i+0x40>)
 8004f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f9d 	.word	0x08004f9d
 8004f38:	08004f19 	.word	0x08004f19
 8004f3c:	08004f19 	.word	0x08004f19
 8004f40:	08004f19 	.word	0x08004f19
 8004f44:	08004f19 	.word	0x08004f19
 8004f48:	08004f9d 	.word	0x08004f9d
 8004f4c:	08004f19 	.word	0x08004f19
 8004f50:	08004f19 	.word	0x08004f19
 8004f54:	08004f19 	.word	0x08004f19
 8004f58:	08004f19 	.word	0x08004f19
 8004f5c:	080050ab 	.word	0x080050ab
 8004f60:	08004fcd 	.word	0x08004fcd
 8004f64:	0800508d 	.word	0x0800508d
 8004f68:	08004f19 	.word	0x08004f19
 8004f6c:	08004f19 	.word	0x08004f19
 8004f70:	080050cd 	.word	0x080050cd
 8004f74:	08004f19 	.word	0x08004f19
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004f19 	.word	0x08004f19
 8004f80:	08004f19 	.word	0x08004f19
 8004f84:	08005095 	.word	0x08005095
 8004f88:	680b      	ldr	r3, [r1, #0]
 8004f8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	600a      	str	r2, [r1, #0]
 8004f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0a4      	b.n	80050e6 <_printf_i+0x1f6>
 8004f9c:	6825      	ldr	r5, [r4, #0]
 8004f9e:	6808      	ldr	r0, [r1, #0]
 8004fa0:	062e      	lsls	r6, r5, #24
 8004fa2:	f100 0304 	add.w	r3, r0, #4
 8004fa6:	d50a      	bpl.n	8004fbe <_printf_i+0xce>
 8004fa8:	6805      	ldr	r5, [r0, #0]
 8004faa:	600b      	str	r3, [r1, #0]
 8004fac:	2d00      	cmp	r5, #0
 8004fae:	da03      	bge.n	8004fb8 <_printf_i+0xc8>
 8004fb0:	232d      	movs	r3, #45	; 0x2d
 8004fb2:	426d      	negs	r5, r5
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	230a      	movs	r3, #10
 8004fba:	485e      	ldr	r0, [pc, #376]	; (8005134 <_printf_i+0x244>)
 8004fbc:	e019      	b.n	8004ff2 <_printf_i+0x102>
 8004fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fc2:	6805      	ldr	r5, [r0, #0]
 8004fc4:	600b      	str	r3, [r1, #0]
 8004fc6:	bf18      	it	ne
 8004fc8:	b22d      	sxthne	r5, r5
 8004fca:	e7ef      	b.n	8004fac <_printf_i+0xbc>
 8004fcc:	680b      	ldr	r3, [r1, #0]
 8004fce:	6825      	ldr	r5, [r4, #0]
 8004fd0:	1d18      	adds	r0, r3, #4
 8004fd2:	6008      	str	r0, [r1, #0]
 8004fd4:	0628      	lsls	r0, r5, #24
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0xec>
 8004fd8:	681d      	ldr	r5, [r3, #0]
 8004fda:	e002      	b.n	8004fe2 <_printf_i+0xf2>
 8004fdc:	0669      	lsls	r1, r5, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0xe8>
 8004fe0:	881d      	ldrh	r5, [r3, #0]
 8004fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2308      	moveq	r3, #8
 8004fe8:	230a      	movne	r3, #10
 8004fea:	4852      	ldr	r0, [pc, #328]	; (8005134 <_printf_i+0x244>)
 8004fec:	2100      	movs	r1, #0
 8004fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ff2:	6866      	ldr	r6, [r4, #4]
 8004ff4:	2e00      	cmp	r6, #0
 8004ff6:	bfa8      	it	ge
 8004ff8:	6821      	ldrge	r1, [r4, #0]
 8004ffa:	60a6      	str	r6, [r4, #8]
 8004ffc:	bfa4      	itt	ge
 8004ffe:	f021 0104 	bicge.w	r1, r1, #4
 8005002:	6021      	strge	r1, [r4, #0]
 8005004:	b90d      	cbnz	r5, 800500a <_printf_i+0x11a>
 8005006:	2e00      	cmp	r6, #0
 8005008:	d04d      	beq.n	80050a6 <_printf_i+0x1b6>
 800500a:	4616      	mov	r6, r2
 800500c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005010:	fb03 5711 	mls	r7, r3, r1, r5
 8005014:	5dc7      	ldrb	r7, [r0, r7]
 8005016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800501a:	462f      	mov	r7, r5
 800501c:	42bb      	cmp	r3, r7
 800501e:	460d      	mov	r5, r1
 8005020:	d9f4      	bls.n	800500c <_printf_i+0x11c>
 8005022:	2b08      	cmp	r3, #8
 8005024:	d10b      	bne.n	800503e <_printf_i+0x14e>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	07df      	lsls	r7, r3, #31
 800502a:	d508      	bpl.n	800503e <_printf_i+0x14e>
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	6861      	ldr	r1, [r4, #4]
 8005030:	4299      	cmp	r1, r3
 8005032:	bfde      	ittt	le
 8005034:	2330      	movle	r3, #48	; 0x30
 8005036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800503a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800503e:	1b92      	subs	r2, r2, r6
 8005040:	6122      	str	r2, [r4, #16]
 8005042:	464b      	mov	r3, r9
 8005044:	4621      	mov	r1, r4
 8005046:	4640      	mov	r0, r8
 8005048:	f8cd a000 	str.w	sl, [sp]
 800504c:	aa03      	add	r2, sp, #12
 800504e:	f7ff fedf 	bl	8004e10 <_printf_common>
 8005052:	3001      	adds	r0, #1
 8005054:	d14c      	bne.n	80050f0 <_printf_i+0x200>
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	b004      	add	sp, #16
 800505c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005060:	4834      	ldr	r0, [pc, #208]	; (8005134 <_printf_i+0x244>)
 8005062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005066:	680e      	ldr	r6, [r1, #0]
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	f856 5b04 	ldr.w	r5, [r6], #4
 800506e:	061f      	lsls	r7, r3, #24
 8005070:	600e      	str	r6, [r1, #0]
 8005072:	d514      	bpl.n	800509e <_printf_i+0x1ae>
 8005074:	07d9      	lsls	r1, r3, #31
 8005076:	bf44      	itt	mi
 8005078:	f043 0320 	orrmi.w	r3, r3, #32
 800507c:	6023      	strmi	r3, [r4, #0]
 800507e:	b91d      	cbnz	r5, 8005088 <_printf_i+0x198>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	f023 0320 	bic.w	r3, r3, #32
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	2310      	movs	r3, #16
 800508a:	e7af      	b.n	8004fec <_printf_i+0xfc>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	f043 0320 	orr.w	r3, r3, #32
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	2378      	movs	r3, #120	; 0x78
 8005096:	4828      	ldr	r0, [pc, #160]	; (8005138 <_printf_i+0x248>)
 8005098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800509c:	e7e3      	b.n	8005066 <_printf_i+0x176>
 800509e:	065e      	lsls	r6, r3, #25
 80050a0:	bf48      	it	mi
 80050a2:	b2ad      	uxthmi	r5, r5
 80050a4:	e7e6      	b.n	8005074 <_printf_i+0x184>
 80050a6:	4616      	mov	r6, r2
 80050a8:	e7bb      	b.n	8005022 <_printf_i+0x132>
 80050aa:	680b      	ldr	r3, [r1, #0]
 80050ac:	6826      	ldr	r6, [r4, #0]
 80050ae:	1d1d      	adds	r5, r3, #4
 80050b0:	6960      	ldr	r0, [r4, #20]
 80050b2:	600d      	str	r5, [r1, #0]
 80050b4:	0635      	lsls	r5, r6, #24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	d501      	bpl.n	80050be <_printf_i+0x1ce>
 80050ba:	6018      	str	r0, [r3, #0]
 80050bc:	e002      	b.n	80050c4 <_printf_i+0x1d4>
 80050be:	0671      	lsls	r1, r6, #25
 80050c0:	d5fb      	bpl.n	80050ba <_printf_i+0x1ca>
 80050c2:	8018      	strh	r0, [r3, #0]
 80050c4:	2300      	movs	r3, #0
 80050c6:	4616      	mov	r6, r2
 80050c8:	6123      	str	r3, [r4, #16]
 80050ca:	e7ba      	b.n	8005042 <_printf_i+0x152>
 80050cc:	680b      	ldr	r3, [r1, #0]
 80050ce:	1d1a      	adds	r2, r3, #4
 80050d0:	600a      	str	r2, [r1, #0]
 80050d2:	681e      	ldr	r6, [r3, #0]
 80050d4:	2100      	movs	r1, #0
 80050d6:	4630      	mov	r0, r6
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	f000 f82f 	bl	800513c <memchr>
 80050de:	b108      	cbz	r0, 80050e4 <_printf_i+0x1f4>
 80050e0:	1b80      	subs	r0, r0, r6
 80050e2:	6060      	str	r0, [r4, #4]
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	2300      	movs	r3, #0
 80050ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ee:	e7a8      	b.n	8005042 <_printf_i+0x152>
 80050f0:	4632      	mov	r2, r6
 80050f2:	4649      	mov	r1, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	47d0      	blx	sl
 80050fa:	3001      	adds	r0, #1
 80050fc:	d0ab      	beq.n	8005056 <_printf_i+0x166>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	079b      	lsls	r3, r3, #30
 8005102:	d413      	bmi.n	800512c <_printf_i+0x23c>
 8005104:	68e0      	ldr	r0, [r4, #12]
 8005106:	9b03      	ldr	r3, [sp, #12]
 8005108:	4298      	cmp	r0, r3
 800510a:	bfb8      	it	lt
 800510c:	4618      	movlt	r0, r3
 800510e:	e7a4      	b.n	800505a <_printf_i+0x16a>
 8005110:	2301      	movs	r3, #1
 8005112:	4632      	mov	r2, r6
 8005114:	4649      	mov	r1, r9
 8005116:	4640      	mov	r0, r8
 8005118:	47d0      	blx	sl
 800511a:	3001      	adds	r0, #1
 800511c:	d09b      	beq.n	8005056 <_printf_i+0x166>
 800511e:	3501      	adds	r5, #1
 8005120:	68e3      	ldr	r3, [r4, #12]
 8005122:	9903      	ldr	r1, [sp, #12]
 8005124:	1a5b      	subs	r3, r3, r1
 8005126:	42ab      	cmp	r3, r5
 8005128:	dcf2      	bgt.n	8005110 <_printf_i+0x220>
 800512a:	e7eb      	b.n	8005104 <_printf_i+0x214>
 800512c:	2500      	movs	r5, #0
 800512e:	f104 0619 	add.w	r6, r4, #25
 8005132:	e7f5      	b.n	8005120 <_printf_i+0x230>
 8005134:	08005421 	.word	0x08005421
 8005138:	08005432 	.word	0x08005432

0800513c <memchr>:
 800513c:	4603      	mov	r3, r0
 800513e:	b510      	push	{r4, lr}
 8005140:	b2c9      	uxtb	r1, r1
 8005142:	4402      	add	r2, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	4618      	mov	r0, r3
 8005148:	d101      	bne.n	800514e <memchr+0x12>
 800514a:	2000      	movs	r0, #0
 800514c:	e003      	b.n	8005156 <memchr+0x1a>
 800514e:	7804      	ldrb	r4, [r0, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	428c      	cmp	r4, r1
 8005154:	d1f6      	bne.n	8005144 <memchr+0x8>
 8005156:	bd10      	pop	{r4, pc}

08005158 <memcpy>:
 8005158:	440a      	add	r2, r1
 800515a:	4291      	cmp	r1, r2
 800515c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005160:	d100      	bne.n	8005164 <memcpy+0xc>
 8005162:	4770      	bx	lr
 8005164:	b510      	push	{r4, lr}
 8005166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800516a:	4291      	cmp	r1, r2
 800516c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005170:	d1f9      	bne.n	8005166 <memcpy+0xe>
 8005172:	bd10      	pop	{r4, pc}

08005174 <memmove>:
 8005174:	4288      	cmp	r0, r1
 8005176:	b510      	push	{r4, lr}
 8005178:	eb01 0402 	add.w	r4, r1, r2
 800517c:	d902      	bls.n	8005184 <memmove+0x10>
 800517e:	4284      	cmp	r4, r0
 8005180:	4623      	mov	r3, r4
 8005182:	d807      	bhi.n	8005194 <memmove+0x20>
 8005184:	1e43      	subs	r3, r0, #1
 8005186:	42a1      	cmp	r1, r4
 8005188:	d008      	beq.n	800519c <memmove+0x28>
 800518a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800518e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005192:	e7f8      	b.n	8005186 <memmove+0x12>
 8005194:	4601      	mov	r1, r0
 8005196:	4402      	add	r2, r0
 8005198:	428a      	cmp	r2, r1
 800519a:	d100      	bne.n	800519e <memmove+0x2a>
 800519c:	bd10      	pop	{r4, pc}
 800519e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051a6:	e7f7      	b.n	8005198 <memmove+0x24>

080051a8 <_free_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4605      	mov	r5, r0
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d043      	beq.n	8005238 <_free_r+0x90>
 80051b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b4:	1f0c      	subs	r4, r1, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfb8      	it	lt
 80051ba:	18e4      	addlt	r4, r4, r3
 80051bc:	f000 f8d0 	bl	8005360 <__malloc_lock>
 80051c0:	4a1e      	ldr	r2, [pc, #120]	; (800523c <_free_r+0x94>)
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	4610      	mov	r0, r2
 80051c6:	b933      	cbnz	r3, 80051d6 <_free_r+0x2e>
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	6014      	str	r4, [r2, #0]
 80051cc:	4628      	mov	r0, r5
 80051ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d2:	f000 b8cb 	b.w	800536c <__malloc_unlock>
 80051d6:	42a3      	cmp	r3, r4
 80051d8:	d90a      	bls.n	80051f0 <_free_r+0x48>
 80051da:	6821      	ldr	r1, [r4, #0]
 80051dc:	1862      	adds	r2, r4, r1
 80051de:	4293      	cmp	r3, r2
 80051e0:	bf01      	itttt	eq
 80051e2:	681a      	ldreq	r2, [r3, #0]
 80051e4:	685b      	ldreq	r3, [r3, #4]
 80051e6:	1852      	addeq	r2, r2, r1
 80051e8:	6022      	streq	r2, [r4, #0]
 80051ea:	6063      	str	r3, [r4, #4]
 80051ec:	6004      	str	r4, [r0, #0]
 80051ee:	e7ed      	b.n	80051cc <_free_r+0x24>
 80051f0:	461a      	mov	r2, r3
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	b10b      	cbz	r3, 80051fa <_free_r+0x52>
 80051f6:	42a3      	cmp	r3, r4
 80051f8:	d9fa      	bls.n	80051f0 <_free_r+0x48>
 80051fa:	6811      	ldr	r1, [r2, #0]
 80051fc:	1850      	adds	r0, r2, r1
 80051fe:	42a0      	cmp	r0, r4
 8005200:	d10b      	bne.n	800521a <_free_r+0x72>
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	4401      	add	r1, r0
 8005206:	1850      	adds	r0, r2, r1
 8005208:	4283      	cmp	r3, r0
 800520a:	6011      	str	r1, [r2, #0]
 800520c:	d1de      	bne.n	80051cc <_free_r+0x24>
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4401      	add	r1, r0
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	6053      	str	r3, [r2, #4]
 8005218:	e7d8      	b.n	80051cc <_free_r+0x24>
 800521a:	d902      	bls.n	8005222 <_free_r+0x7a>
 800521c:	230c      	movs	r3, #12
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	e7d4      	b.n	80051cc <_free_r+0x24>
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1821      	adds	r1, r4, r0
 8005226:	428b      	cmp	r3, r1
 8005228:	bf01      	itttt	eq
 800522a:	6819      	ldreq	r1, [r3, #0]
 800522c:	685b      	ldreq	r3, [r3, #4]
 800522e:	1809      	addeq	r1, r1, r0
 8005230:	6021      	streq	r1, [r4, #0]
 8005232:	6063      	str	r3, [r4, #4]
 8005234:	6054      	str	r4, [r2, #4]
 8005236:	e7c9      	b.n	80051cc <_free_r+0x24>
 8005238:	bd38      	pop	{r3, r4, r5, pc}
 800523a:	bf00      	nop
 800523c:	200000c4 	.word	0x200000c4

08005240 <_malloc_r>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	1ccd      	adds	r5, r1, #3
 8005244:	f025 0503 	bic.w	r5, r5, #3
 8005248:	3508      	adds	r5, #8
 800524a:	2d0c      	cmp	r5, #12
 800524c:	bf38      	it	cc
 800524e:	250c      	movcc	r5, #12
 8005250:	2d00      	cmp	r5, #0
 8005252:	4606      	mov	r6, r0
 8005254:	db01      	blt.n	800525a <_malloc_r+0x1a>
 8005256:	42a9      	cmp	r1, r5
 8005258:	d903      	bls.n	8005262 <_malloc_r+0x22>
 800525a:	230c      	movs	r3, #12
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	2000      	movs	r0, #0
 8005260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005262:	f000 f87d 	bl	8005360 <__malloc_lock>
 8005266:	4921      	ldr	r1, [pc, #132]	; (80052ec <_malloc_r+0xac>)
 8005268:	680a      	ldr	r2, [r1, #0]
 800526a:	4614      	mov	r4, r2
 800526c:	b99c      	cbnz	r4, 8005296 <_malloc_r+0x56>
 800526e:	4f20      	ldr	r7, [pc, #128]	; (80052f0 <_malloc_r+0xb0>)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	b923      	cbnz	r3, 800527e <_malloc_r+0x3e>
 8005274:	4621      	mov	r1, r4
 8005276:	4630      	mov	r0, r6
 8005278:	f000 f862 	bl	8005340 <_sbrk_r>
 800527c:	6038      	str	r0, [r7, #0]
 800527e:	4629      	mov	r1, r5
 8005280:	4630      	mov	r0, r6
 8005282:	f000 f85d 	bl	8005340 <_sbrk_r>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d123      	bne.n	80052d2 <_malloc_r+0x92>
 800528a:	230c      	movs	r3, #12
 800528c:	4630      	mov	r0, r6
 800528e:	6033      	str	r3, [r6, #0]
 8005290:	f000 f86c 	bl	800536c <__malloc_unlock>
 8005294:	e7e3      	b.n	800525e <_malloc_r+0x1e>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	1b5b      	subs	r3, r3, r5
 800529a:	d417      	bmi.n	80052cc <_malloc_r+0x8c>
 800529c:	2b0b      	cmp	r3, #11
 800529e:	d903      	bls.n	80052a8 <_malloc_r+0x68>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	441c      	add	r4, r3
 80052a4:	6025      	str	r5, [r4, #0]
 80052a6:	e004      	b.n	80052b2 <_malloc_r+0x72>
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	42a2      	cmp	r2, r4
 80052ac:	bf0c      	ite	eq
 80052ae:	600b      	streq	r3, [r1, #0]
 80052b0:	6053      	strne	r3, [r2, #4]
 80052b2:	4630      	mov	r0, r6
 80052b4:	f000 f85a 	bl	800536c <__malloc_unlock>
 80052b8:	f104 000b 	add.w	r0, r4, #11
 80052bc:	1d23      	adds	r3, r4, #4
 80052be:	f020 0007 	bic.w	r0, r0, #7
 80052c2:	1ac2      	subs	r2, r0, r3
 80052c4:	d0cc      	beq.n	8005260 <_malloc_r+0x20>
 80052c6:	1a1b      	subs	r3, r3, r0
 80052c8:	50a3      	str	r3, [r4, r2]
 80052ca:	e7c9      	b.n	8005260 <_malloc_r+0x20>
 80052cc:	4622      	mov	r2, r4
 80052ce:	6864      	ldr	r4, [r4, #4]
 80052d0:	e7cc      	b.n	800526c <_malloc_r+0x2c>
 80052d2:	1cc4      	adds	r4, r0, #3
 80052d4:	f024 0403 	bic.w	r4, r4, #3
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d0e3      	beq.n	80052a4 <_malloc_r+0x64>
 80052dc:	1a21      	subs	r1, r4, r0
 80052de:	4630      	mov	r0, r6
 80052e0:	f000 f82e 	bl	8005340 <_sbrk_r>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1dd      	bne.n	80052a4 <_malloc_r+0x64>
 80052e8:	e7cf      	b.n	800528a <_malloc_r+0x4a>
 80052ea:	bf00      	nop
 80052ec:	200000c4 	.word	0x200000c4
 80052f0:	200000c8 	.word	0x200000c8

080052f4 <_realloc_r>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	4607      	mov	r7, r0
 80052f8:	4614      	mov	r4, r2
 80052fa:	460e      	mov	r6, r1
 80052fc:	b921      	cbnz	r1, 8005308 <_realloc_r+0x14>
 80052fe:	4611      	mov	r1, r2
 8005300:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005304:	f7ff bf9c 	b.w	8005240 <_malloc_r>
 8005308:	b922      	cbnz	r2, 8005314 <_realloc_r+0x20>
 800530a:	f7ff ff4d 	bl	80051a8 <_free_r>
 800530e:	4625      	mov	r5, r4
 8005310:	4628      	mov	r0, r5
 8005312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005314:	f000 f830 	bl	8005378 <_malloc_usable_size_r>
 8005318:	42a0      	cmp	r0, r4
 800531a:	d20f      	bcs.n	800533c <_realloc_r+0x48>
 800531c:	4621      	mov	r1, r4
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff ff8e 	bl	8005240 <_malloc_r>
 8005324:	4605      	mov	r5, r0
 8005326:	2800      	cmp	r0, #0
 8005328:	d0f2      	beq.n	8005310 <_realloc_r+0x1c>
 800532a:	4631      	mov	r1, r6
 800532c:	4622      	mov	r2, r4
 800532e:	f7ff ff13 	bl	8005158 <memcpy>
 8005332:	4631      	mov	r1, r6
 8005334:	4638      	mov	r0, r7
 8005336:	f7ff ff37 	bl	80051a8 <_free_r>
 800533a:	e7e9      	b.n	8005310 <_realloc_r+0x1c>
 800533c:	4635      	mov	r5, r6
 800533e:	e7e7      	b.n	8005310 <_realloc_r+0x1c>

08005340 <_sbrk_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	2300      	movs	r3, #0
 8005344:	4d05      	ldr	r5, [pc, #20]	; (800535c <_sbrk_r+0x1c>)
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fc fd9c 	bl	8001e88 <_sbrk>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_sbrk_r+0x1a>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_sbrk_r+0x1a>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000220 	.word	0x20000220

08005360 <__malloc_lock>:
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <__malloc_lock+0x8>)
 8005362:	f000 b811 	b.w	8005388 <__retarget_lock_acquire_recursive>
 8005366:	bf00      	nop
 8005368:	20000228 	.word	0x20000228

0800536c <__malloc_unlock>:
 800536c:	4801      	ldr	r0, [pc, #4]	; (8005374 <__malloc_unlock+0x8>)
 800536e:	f000 b80c 	b.w	800538a <__retarget_lock_release_recursive>
 8005372:	bf00      	nop
 8005374:	20000228 	.word	0x20000228

08005378 <_malloc_usable_size_r>:
 8005378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537c:	1f18      	subs	r0, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	bfbc      	itt	lt
 8005382:	580b      	ldrlt	r3, [r1, r0]
 8005384:	18c0      	addlt	r0, r0, r3
 8005386:	4770      	bx	lr

08005388 <__retarget_lock_acquire_recursive>:
 8005388:	4770      	bx	lr

0800538a <__retarget_lock_release_recursive>:
 800538a:	4770      	bx	lr

0800538c <_init>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr

08005398 <_fini>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr
