
Code_Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002fbc  08002fbc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fbc  08002fbc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000088  0800304c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800304c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c61c  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6c  00000000  00000000  0002c6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002f050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001833a  00000000  00000000  0002fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c32d  00000000  00000000  00047db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4cd  00000000  00000000  000540df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df5ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003134  00000000  00000000  000df600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f24 	.word	0x08002f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002f24 	.word	0x08002f24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	    Lcd_configure();
 8000160:	f000 f8ba 	bl	80002d8 <Lcd_configure>
			lcd_write_command(0x33);
 8000164:	2033      	movs	r0, #51	; 0x33
 8000166:	f000 f95b 	bl	8000420 <lcd_write_command>
			lcd_write_command(0x32);
 800016a:	2032      	movs	r0, #50	; 0x32
 800016c:	f000 f958 	bl	8000420 <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8000170:	2028      	movs	r0, #40	; 0x28
 8000172:	f000 f955 	bl	8000420 <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 8000176:	2001      	movs	r0, #1
 8000178:	f000 f952 	bl	8000420 <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800017c:	200c      	movs	r0, #12
 800017e:	f000 f94f 	bl	8000420 <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 8000182:	2006      	movs	r0, #6
 8000184:	f000 f94c 	bl	8000420 <lcd_write_command>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}

0800018c <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b086      	sub	sp, #24
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000194:	f107 030c 	add.w	r3, r7, #12
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	4906      	ldr	r1, [pc, #24]	; (80001b4 <Lcd_write_int+0x28>)
 800019c:	4618      	mov	r0, r3
 800019e:	f002 fa87 	bl	80026b0 <siprintf>
	Lcd_write_string(buffer);
 80001a2:	f107 030c 	add.w	r3, r7, #12
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f806 	bl	80001b8 <Lcd_write_string>
}
 80001ac:	bf00      	nop
 80001ae:	3718      	adds	r7, #24
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	08002f3c 	.word	0x08002f3c

080001b8 <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 80001b8:	b590      	push	{r4, r7, lr}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	73fb      	strb	r3, [r7, #15]
 80001c4:	e009      	b.n	80001da <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	4413      	add	r3, r2
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 f946 	bl	8000460 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	3301      	adds	r3, #1
 80001d8:	73fb      	strb	r3, [r7, #15]
 80001da:	7bfc      	ldrb	r4, [r7, #15]
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f7ff ffb5 	bl	800014c <strlen>
 80001e2:	4603      	mov	r3, r0
 80001e4:	429c      	cmp	r4, r3
 80001e6:	d3ee      	bcc.n	80001c6 <Lcd_write_string+0xe>
	}
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	3714      	adds	r7, #20
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd90      	pop	{r4, r7, pc}

080001f2 <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b082      	sub	sp, #8
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	4603      	mov	r3, r0
 80001fa:	460a      	mov	r2, r1
 80001fc:	71fb      	strb	r3, [r7, #7]
 80001fe:	4613      	mov	r3, r2
 8000200:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d107      	bne.n	8000218 <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800020e:	b2db      	uxtb	r3, r3
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f905 	bl	8000420 <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 8000216:	e00a      	b.n	800022e <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	3340      	adds	r3, #64	; 0x40
 800021c:	b2db      	uxtb	r3, r3
 800021e:	b25b      	sxtb	r3, r3
 8000220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000224:	b25b      	sxtb	r3, r3
 8000226:	b2db      	uxtb	r3, r3
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f8f9 	bl	8000420 <lcd_write_command>
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <Lcd_display>:
/*****
** Display temperature, speed
******/

void Lcd_display(uint8_t temperatute, uint16_t speed)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	80bb      	strh	r3, [r7, #4]
	Lcd_gotoxy(0, 0);
 8000248:	2100      	movs	r1, #0
 800024a:	2000      	movs	r0, #0
 800024c:	f7ff ffd1 	bl	80001f2 <Lcd_gotoxy>
	//write Temperature
	Lcd_write_string("Temp :");
 8000250:	481c      	ldr	r0, [pc, #112]	; (80002c4 <Lcd_display+0x8c>)
 8000252:	f7ff ffb1 	bl	80001b8 <Lcd_write_string>
	Lcd_gotoxy(6, 0);
 8000256:	2100      	movs	r1, #0
 8000258:	2006      	movs	r0, #6
 800025a:	f7ff ffca 	bl	80001f2 <Lcd_gotoxy>
	Lcd_write_string("      ");
 800025e:	481a      	ldr	r0, [pc, #104]	; (80002c8 <Lcd_display+0x90>)
 8000260:	f7ff ffaa 	bl	80001b8 <Lcd_write_string>
	Lcd_gotoxy(6, 0);
 8000264:	2100      	movs	r1, #0
 8000266:	2006      	movs	r0, #6
 8000268:	f7ff ffc3 	bl	80001f2 <Lcd_gotoxy>
	Lcd_write_int((int)temperatute);
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ff8c 	bl	800018c <Lcd_write_int>
	Lcd_gotoxy(12, 0);
 8000274:	2100      	movs	r1, #0
 8000276:	200c      	movs	r0, #12
 8000278:	f7ff ffbb 	bl	80001f2 <Lcd_gotoxy>
	Lcd_write_string("C");
 800027c:	4813      	ldr	r0, [pc, #76]	; (80002cc <Lcd_display+0x94>)
 800027e:	f7ff ff9b 	bl	80001b8 <Lcd_write_string>

	//write Speed
	Lcd_gotoxy(0, 1);
 8000282:	2101      	movs	r1, #1
 8000284:	2000      	movs	r0, #0
 8000286:	f7ff ffb4 	bl	80001f2 <Lcd_gotoxy>
	Lcd_write_string("Speed:");
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <Lcd_display+0x98>)
 800028c:	f7ff ff94 	bl	80001b8 <Lcd_write_string>
	Lcd_gotoxy(6, 1);
 8000290:	2101      	movs	r1, #1
 8000292:	2006      	movs	r0, #6
 8000294:	f7ff ffad 	bl	80001f2 <Lcd_gotoxy>
	Lcd_write_string("      ");
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Lcd_display+0x90>)
 800029a:	f7ff ff8d 	bl	80001b8 <Lcd_write_string>
	Lcd_gotoxy(6, 1);
 800029e:	2101      	movs	r1, #1
 80002a0:	2006      	movs	r0, #6
 80002a2:	f7ff ffa6 	bl	80001f2 <Lcd_gotoxy>
	Lcd_write_int((int)speed);
 80002a6:	88bb      	ldrh	r3, [r7, #4]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff6f 	bl	800018c <Lcd_write_int>
	Lcd_gotoxy(12, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	200c      	movs	r0, #12
 80002b2:	f7ff ff9e 	bl	80001f2 <Lcd_gotoxy>
	Lcd_write_string("rpm");
 80002b6:	4807      	ldr	r0, [pc, #28]	; (80002d4 <Lcd_display+0x9c>)
 80002b8:	f7ff ff7e 	bl	80001b8 <Lcd_write_string>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	08002f40 	.word	0x08002f40
 80002c8:	08002f48 	.word	0x08002f48
 80002cc:	08002f50 	.word	0x08002f50
 80002d0:	08002f54 	.word	0x08002f54
 80002d4:	08002f5c 	.word	0x08002f5c

080002d8 <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b4a      	ldr	r3, [pc, #296]	; (8000418 <Lcd_configure+0x140>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a49      	ldr	r2, [pc, #292]	; (8000418 <Lcd_configure+0x140>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b47      	ldr	r3, [pc, #284]	; (8000418 <Lcd_configure+0x140>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b44      	ldr	r3, [pc, #272]	; (8000418 <Lcd_configure+0x140>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a43      	ldr	r2, [pc, #268]	; (8000418 <Lcd_configure+0x140>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b41      	ldr	r3, [pc, #260]	; (8000418 <Lcd_configure+0x140>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800031c:	4b3e      	ldr	r3, [pc, #248]	; (8000418 <Lcd_configure+0x140>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a3d      	ldr	r2, [pc, #244]	; (8000418 <Lcd_configure+0x140>)
 8000322:	f043 0310 	orr.w	r3, r3, #16
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b3b      	ldr	r3, [pc, #236]	; (8000418 <Lcd_configure+0x140>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0310 	and.w	r3, r3, #16
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 8000334:	2301      	movs	r3, #1
 8000336:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000340:	2303      	movs	r3, #3
 8000342:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8000344:	f107 0310 	add.w	r3, r7, #16
 8000348:	4619      	mov	r1, r3
 800034a:	4834      	ldr	r0, [pc, #208]	; (800041c <Lcd_configure+0x144>)
 800034c:	f000 ff2a 	bl	80011a4 <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 8000350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000354:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035e:	2303      	movs	r3, #3
 8000360:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	482c      	ldr	r0, [pc, #176]	; (800041c <Lcd_configure+0x144>)
 800036a:	f000 ff1b 	bl	80011a4 <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 800036e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000372:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037c:	2303      	movs	r3, #3
 800037e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	4825      	ldr	r0, [pc, #148]	; (800041c <Lcd_configure+0x144>)
 8000388:	f000 ff0c 	bl	80011a4 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000392:	4822      	ldr	r0, [pc, #136]	; (800041c <Lcd_configure+0x144>)
 8000394:	f001 f880 	bl	8001498 <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 8000398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a6:	2303      	movs	r3, #3
 80003a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	4619      	mov	r1, r3
 80003b0:	481a      	ldr	r0, [pc, #104]	; (800041c <Lcd_configure+0x144>)
 80003b2:	f000 fef7 	bl	80011a4 <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c4:	2303      	movs	r3, #3
 80003c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	4813      	ldr	r0, [pc, #76]	; (800041c <Lcd_configure+0x144>)
 80003d0:	f000 fee8 	bl	80011a4 <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 80003d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e2:	2303      	movs	r3, #3
 80003e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <Lcd_configure+0x144>)
 80003ee:	f000 fed9 	bl	80011a4 <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 80003f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000400:	2303      	movs	r3, #3
 8000402:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <Lcd_configure+0x144>)
 800040c:	f000 feca 	bl	80011a4 <HAL_GPIO_Init>
	
}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	40010c00 	.word	0x40010c00

08000420 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 800042a:	2200      	movs	r2, #0
 800042c:	2101      	movs	r1, #1
 800042e:	480b      	ldr	r0, [pc, #44]	; (800045c <lcd_write_command+0x3c>)
 8000430:	f001 f832 	bl	8001498 <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	091b      	lsrs	r3, r3, #4
 8000438:	b2db      	uxtb	r3, r3
 800043a:	2104      	movs	r1, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f000 f82f 	bl	80004a0 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	f003 030f 	and.w	r3, r3, #15
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2104      	movs	r1, #4
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f827 	bl	80004a0 <lcd_write>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010c00 	.word	0x40010c00

08000460 <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 800046a:	2201      	movs	r2, #1
 800046c:	2101      	movs	r1, #1
 800046e:	480b      	ldr	r0, [pc, #44]	; (800049c <lcd_write_data+0x3c>)
 8000470:	f001 f812 	bl	8001498 <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	091b      	lsrs	r3, r3, #4
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2104      	movs	r1, #4
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f80f 	bl	80004a0 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 030f 	and.w	r3, r3, #15
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2104      	movs	r1, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f807 	bl	80004a0 <lcd_write>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010c00 	.word	0x40010c00

080004a0 <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	460a      	mov	r2, r1
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	4613      	mov	r3, r2
 80004ae:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e023      	b.n	80004fe <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 80004b6:	79fa      	ldrb	r2, [r7, #7]
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	fa42 f303 	asr.w	r3, r2, r3
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d10c      	bne.n	80004e0 <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	4a18      	ldr	r2, [pc, #96]	; (800052c <lcd_write+0x8c>)
 80004ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <lcd_write+0x90>)
 80004d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4619      	mov	r1, r3
 80004da:	f000 ffdd 	bl	8001498 <HAL_GPIO_WritePin>
 80004de:	e00b      	b.n	80004f8 <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <lcd_write+0x8c>)
 80004e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <lcd_write+0x90>)
 80004ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	f000 ffd0 	bl	8001498 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	3301      	adds	r3, #1
 80004fc:	73fb      	strb	r3, [r7, #15]
 80004fe:	7bfa      	ldrb	r2, [r7, #15]
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	429a      	cmp	r2, r3
 8000504:	d3d7      	bcc.n	80004b6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <lcd_write+0x94>)
 800050e:	f000 ffc3 	bl	8001498 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f000 fb2c 	bl	8000b70 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <lcd_write+0x94>)
 8000520:	f000 ffba 	bl	8001498 <HAL_GPIO_WritePin>
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000000 	.word	0x20000000
 8000530:	20000010 	.word	0x20000010
 8000534:	40010c00 	.word	0x40010c00

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fab5 	bl	8000aac <HAL_Init>

  /* USER CODE BEGIN Init */
  Lcd_Init();
 8000542:	f7ff fe0b 	bl	800015c <Lcd_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f831 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f915 	bl	8000778 <MX_GPIO_Init>
  MX_ADC1_Init();
 800054e:	f000 f87d 	bl	800064c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000552:	f000 f8b9 	bl	80006c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Lcd_display(10, 1000);
 8000556:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800055a:	200a      	movs	r0, #10
 800055c:	f7ff fe6c 	bl	8000238 <Lcd_display>

  TIM2_PWM_Set_Duty(100);
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f000 f91f 	bl	80007a4 <TIM2_PWM_Set_Duty>
  TIM2_PWM_Set_Frequency(2000);
 8000566:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800056a:	f000 f939 	bl	80007e0 <TIM2_PWM_Set_Frequency>
  if( HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800056e:	210c      	movs	r1, #12
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <main+0x70>)
 8000572:	f001 fcb5 	bl	8001ee0 <HAL_TIM_PWM_Start>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <main+0x48>
  {
	  Error_Handler();
 800057c:	f000 f94c 	bl	8000818 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t temperature, duty = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	71fb      	strb	r3, [r7, #7]

  while (1)
  {


	  while(duty <= 100)
 8000584:	e009      	b.n	800059a <main+0x62>
	  {
		  TIM2_PWM_Set_Duty(duty);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f90b 	bl	80007a4 <TIM2_PWM_Set_Duty>
		  HAL_Delay(100);
 800058e:	2064      	movs	r0, #100	; 0x64
 8000590:	f000 faee 	bl	8000b70 <HAL_Delay>
		  duty += 10;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	330a      	adds	r3, #10
 8000598:	71fb      	strb	r3, [r7, #7]
	  while(duty <= 100)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b64      	cmp	r3, #100	; 0x64
 800059e:	d9f2      	bls.n	8000586 <main+0x4e>
	  }
	  duty = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	71fb      	strb	r3, [r7, #7]
	  while(duty <= 100)
 80005a4:	e7f9      	b.n	800059a <main+0x62>
 80005a6:	bf00      	nop
 80005a8:	200000e0 	.word	0x200000e0

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f870 	bl	80026a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 ff69 	bl	80014c8 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005fc:	f000 f90c 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f9d4 	bl	80019c8 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000626:	f000 f8f7 	bl	8000818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800062a:	2302      	movs	r3, #2
 800062c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fb4d 	bl	8001cd4 <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000640:	f000 f8ea 	bl	8000818 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_ADC1_Init+0x74>)
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <MX_ADC1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_ADC1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_ADC1_Init+0x74>)
 8000676:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800067a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_ADC1_Init+0x74>)
 800068a:	f000 fa95 	bl	8000bb8 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 f8c0 	bl	8000818 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000698:	2302      	movs	r3, #2
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_ADC1_Init+0x74>)
 80006aa:	f000 fb5d 	bl	8000d68 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006b4:	f000 f8b0 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000b0 	.word	0x200000b0
 80006c4:	40012400 	.word	0x40012400

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
 80006e6:	615a      	str	r2, [r3, #20]
 80006e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_TIM2_Init+0xac>)
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_TIM2_Init+0xac>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_TIM2_Init+0xac>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_TIM2_Init+0xac>)
 8000700:	2263      	movs	r2, #99	; 0x63
 8000702:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_TIM2_Init+0xac>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_TIM2_Init+0xac>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000710:	4818      	ldr	r0, [pc, #96]	; (8000774 <MX_TIM2_Init+0xac>)
 8000712:	f001 fb95 	bl	8001e40 <HAL_TIM_PWM_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 f87c 	bl	8000818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4619      	mov	r1, r3
 800072e:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_TIM2_Init+0xac>)
 8000730:	f001 ff34 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800073a:	f000 f86d 	bl	8000818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073e:	2360      	movs	r3, #96	; 0x60
 8000740:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	220c      	movs	r2, #12
 8000752:	4619      	mov	r1, r3
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <MX_TIM2_Init+0xac>)
 8000756:	f001 fc5f 	bl	8002018 <HAL_TIM_PWM_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000760:	f000 f85a 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <MX_TIM2_Init+0xac>)
 8000766:	f000 f8e7 	bl	8000938 <HAL_TIM_MspPostInit>

}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000e0 	.word	0x200000e0

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_GPIO_Init+0x28>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <MX_GPIO_Init+0x28>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MX_GPIO_Init+0x28>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000

080007a4 <TIM2_PWM_Set_Duty>:
  * @brief GPIO Initialization Function
  * @param Duty(%) 0 -> 100. % High voltage
  * @retval None
  */
void TIM2_PWM_Set_Duty(uint8_t duty)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	uint16_t compare = (htim2.Init.Period + 1) * duty / 100;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <TIM2_PWM_Set_Duty+0x34>)
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <TIM2_PWM_Set_Duty+0x38>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	095b      	lsrs	r3, r3, #5
 80007c2:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, compare);
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <TIM2_PWM_Set_Duty+0x34>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	89fa      	ldrh	r2, [r7, #14]
 80007ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	200000e0 	.word	0x200000e0
 80007dc:	51eb851f 	.word	0x51eb851f

080007e0 <TIM2_PWM_Set_Frequency>:
  * @brief GPIO Initialization Function
  * @param frequency(Hz); 2 < f < 10000
  * @retval None
  */
void TIM2_PWM_Set_Frequency(uint32_t frequency)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	// PSC > 0 -> if f = 10000, period must < 800
	// frequency = f_timer / [(Period + 1) * (Psc + 1)]
	// -> Psc = f_timer / ((period + 1)*frequency) - 1;
	uint32_t period = htim2.Init.Period;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <TIM2_PWM_Set_Frequency+0x34>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60fb      	str	r3, [r7, #12]
	uint32_t f_timer = HAL_RCC_GetPCLK1Freq() * 1; 	 //1 is APB1 time multiplier value
 80007ee:	f001 fa3f 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 80007f2:	60b8      	str	r0, [r7, #8]
	TIM2->PSC = f_timer / ((period + 1) * frequency) - 1;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	fbb2 f3f3 	udiv	r3, r2, r3
 8000804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000808:	3b01      	subs	r3, #1
 800080a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000e0 	.word	0x200000e0

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_MspInit+0x5c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_MspInit+0x5c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x5c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x60>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_MspInit+0x60>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000

08000888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_ADC_MspInit+0x6c>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d121      	bne.n	80008ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <HAL_ADC_MspInit+0x70>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <HAL_ADC_MspInit+0x70>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_ADC_MspInit+0x70>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_ADC_MspInit+0x70>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <HAL_ADC_MspInit+0x70>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_ADC_MspInit+0x70>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008d8:	2304      	movs	r3, #4
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008dc:	2303      	movs	r3, #3
 80008de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <HAL_ADC_MspInit+0x74>)
 80008e8:	f000 fc5c 	bl	80011a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40012400 	.word	0x40012400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800

08000900 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000910:	d10b      	bne.n	800092a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_TIM_PWM_MspInit+0x34>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <HAL_TIM_PWM_MspInit+0x34>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_TIM_PWM_MspInit+0x34>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000956:	d117      	bne.n	8000988 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_TIM_MspPostInit+0x58>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <HAL_TIM_MspPostInit+0x58>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_TIM_MspPostInit+0x58>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000970:	2308      	movs	r3, #8
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <HAL_TIM_MspPostInit+0x5c>)
 8000984:	f000 fc0e 	bl	80011a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f8ab 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f001 fe18 	bl	800264c <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20002800 	.word	0x20002800
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	200000a4 	.word	0x200000a4
 8000a50:	20000140 	.word	0x20000140

08000a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a86:	f7ff ffe5 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f001 fde5 	bl	8002658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fd53 	bl	8000538 <main>
  bx lr
 8000a92:	4770      	bx	lr
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000a9c:	08002fc4 	.word	0x08002fc4
  ldr r2, =_sbss
 8000aa0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000aa4:	2000013c 	.word	0x2000013c

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 fb3d 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff feac 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fb47 	bl	800118a <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 fb1d 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000018 	.word	0x20000018
 8000b30:	20000020 	.word	0x20000020
 8000b34:	2000001c 	.word	0x2000001c

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000020 	.word	0x20000020
 8000b58:	20000128 	.word	0x20000128

08000b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000128 	.word	0x20000128

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff fff0 	bl	8000b5c <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffe0 	bl	8000b5c <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000020 	.word	0x20000020

08000bb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0be      	b.n	8000d58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d109      	bne.n	8000bfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fe46 	bl	8000888 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f9ab 	bl	8000f58 <ADC_ConversionStop_Disable>
 8000c02:	4603      	mov	r3, r0
 8000c04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 8099 	bne.w	8000d46 <HAL_ADC_Init+0x18e>
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8095 	bne.w	8000d46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c24:	f023 0302 	bic.w	r3, r3, #2
 8000c28:	f043 0202 	orr.w	r2, r3, #2
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7b1b      	ldrb	r3, [r3, #12]
 8000c3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c50:	d003      	beq.n	8000c5a <HAL_ADC_Init+0xa2>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d102      	bne.n	8000c60 <HAL_ADC_Init+0xa8>
 8000c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5e:	e000      	b.n	8000c62 <HAL_ADC_Init+0xaa>
 8000c60:	2300      	movs	r3, #0
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7d1b      	ldrb	r3, [r3, #20]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d119      	bne.n	8000ca4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7b1b      	ldrb	r3, [r3, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d109      	bne.n	8000c8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	035a      	lsls	r2, r3, #13
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	e00b      	b.n	8000ca4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f043 0220 	orr.w	r2, r3, #32
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <HAL_ADC_Init+0x1a8>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6812      	ldr	r2, [r2, #0]
 8000cc6:	68b9      	ldr	r1, [r7, #8]
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cd4:	d003      	beq.n	8000cde <HAL_ADC_Init+0x126>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d104      	bne.n	8000ce8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	051b      	lsls	r3, r3, #20
 8000ce6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_ADC_Init+0x1ac>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d10b      	bne.n	8000d24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f023 0303 	bic.w	r3, r3, #3
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d22:	e018      	b.n	8000d56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	f023 0312 	bic.w	r3, r3, #18
 8000d2c:	f043 0210 	orr.w	r2, r3, #16
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d44:	e007      	b.n	8000d56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f043 0210 	orr.w	r2, r3, #16
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	ffe1f7fd 	.word	0xffe1f7fd
 8000d64:	ff1f0efe 	.word	0xff1f0efe

08000d68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <HAL_ADC_ConfigChannel+0x20>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e0dc      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x1da>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	d81c      	bhi.n	8000dd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	3b05      	subs	r3, #5
 8000daa:	221f      	movs	r2, #31
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4019      	ands	r1, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b05      	subs	r3, #5
 8000dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd0:	e03c      	b.n	8000e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b0c      	cmp	r3, #12
 8000dd8:	d81c      	bhi.n	8000e14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b23      	subs	r3, #35	; 0x23
 8000dec:	221f      	movs	r2, #31
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4019      	ands	r1, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	3b23      	subs	r3, #35	; 0x23
 8000e06:	fa00 f203 	lsl.w	r2, r0, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
 8000e12:	e01b      	b.n	8000e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	3b41      	subs	r3, #65	; 0x41
 8000e26:	221f      	movs	r2, #31
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4019      	ands	r1, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b41      	subs	r3, #65	; 0x41
 8000e40:	fa00 f203 	lsl.w	r2, r0, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	d91c      	bls.n	8000e8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68d9      	ldr	r1, [r3, #12]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	3b1e      	subs	r3, #30
 8000e66:	2207      	movs	r2, #7
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4019      	ands	r1, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3b1e      	subs	r3, #30
 8000e80:	fa00 f203 	lsl.w	r2, r0, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	e019      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6919      	ldr	r1, [r3, #16]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4019      	ands	r1, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6898      	ldr	r0, [r3, #8]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d003      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ece:	2b11      	cmp	r3, #17
 8000ed0:	d132      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d125      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d126      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ef8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b10      	cmp	r3, #16
 8000f00:	d11a      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	0c9a      	lsrs	r2, r3, #18
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f9      	bne.n	8000f1a <HAL_ADC_ConfigChannel+0x1b2>
 8000f26:	e007      	b.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40012400 	.word	0x40012400
 8000f50:	20000018 	.word	0x20000018
 8000f54:	431bde83 	.word	0x431bde83

08000f58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d12e      	bne.n	8000fd0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0201 	bic.w	r2, r2, #1
 8000f80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f82:	f7ff fdeb 	bl	8000b5c <HAL_GetTick>
 8000f86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f88:	e01b      	b.n	8000fc2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f8a:	f7ff fde7 	bl	8000b5c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d914      	bls.n	8000fc2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10d      	bne.n	8000fc2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	f043 0210 	orr.w	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	f043 0201 	orr.w	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e007      	b.n	8000fd2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d0dc      	beq.n	8000f8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff90 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff49 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff5e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff90 	bl	8001094 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5f 	bl	8001040 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffb0 	bl	80010f8 <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b08b      	sub	sp, #44	; 0x2c
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	e148      	b.n	800144a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011b8:	2201      	movs	r2, #1
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 8137 	bne.w	8001444 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4aa3      	ldr	r2, [pc, #652]	; (8001468 <HAL_GPIO_Init+0x2c4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d05e      	beq.n	800129e <HAL_GPIO_Init+0xfa>
 80011e0:	4aa1      	ldr	r2, [pc, #644]	; (8001468 <HAL_GPIO_Init+0x2c4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d875      	bhi.n	80012d2 <HAL_GPIO_Init+0x12e>
 80011e6:	4aa1      	ldr	r2, [pc, #644]	; (800146c <HAL_GPIO_Init+0x2c8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d058      	beq.n	800129e <HAL_GPIO_Init+0xfa>
 80011ec:	4a9f      	ldr	r2, [pc, #636]	; (800146c <HAL_GPIO_Init+0x2c8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d86f      	bhi.n	80012d2 <HAL_GPIO_Init+0x12e>
 80011f2:	4a9f      	ldr	r2, [pc, #636]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d052      	beq.n	800129e <HAL_GPIO_Init+0xfa>
 80011f8:	4a9d      	ldr	r2, [pc, #628]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d869      	bhi.n	80012d2 <HAL_GPIO_Init+0x12e>
 80011fe:	4a9d      	ldr	r2, [pc, #628]	; (8001474 <HAL_GPIO_Init+0x2d0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d04c      	beq.n	800129e <HAL_GPIO_Init+0xfa>
 8001204:	4a9b      	ldr	r2, [pc, #620]	; (8001474 <HAL_GPIO_Init+0x2d0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d863      	bhi.n	80012d2 <HAL_GPIO_Init+0x12e>
 800120a:	4a9b      	ldr	r2, [pc, #620]	; (8001478 <HAL_GPIO_Init+0x2d4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d046      	beq.n	800129e <HAL_GPIO_Init+0xfa>
 8001210:	4a99      	ldr	r2, [pc, #612]	; (8001478 <HAL_GPIO_Init+0x2d4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d85d      	bhi.n	80012d2 <HAL_GPIO_Init+0x12e>
 8001216:	2b12      	cmp	r3, #18
 8001218:	d82a      	bhi.n	8001270 <HAL_GPIO_Init+0xcc>
 800121a:	2b12      	cmp	r3, #18
 800121c:	d859      	bhi.n	80012d2 <HAL_GPIO_Init+0x12e>
 800121e:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <HAL_GPIO_Init+0x80>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	0800129f 	.word	0x0800129f
 8001228:	08001279 	.word	0x08001279
 800122c:	0800128b 	.word	0x0800128b
 8001230:	080012cd 	.word	0x080012cd
 8001234:	080012d3 	.word	0x080012d3
 8001238:	080012d3 	.word	0x080012d3
 800123c:	080012d3 	.word	0x080012d3
 8001240:	080012d3 	.word	0x080012d3
 8001244:	080012d3 	.word	0x080012d3
 8001248:	080012d3 	.word	0x080012d3
 800124c:	080012d3 	.word	0x080012d3
 8001250:	080012d3 	.word	0x080012d3
 8001254:	080012d3 	.word	0x080012d3
 8001258:	080012d3 	.word	0x080012d3
 800125c:	080012d3 	.word	0x080012d3
 8001260:	080012d3 	.word	0x080012d3
 8001264:	080012d3 	.word	0x080012d3
 8001268:	08001281 	.word	0x08001281
 800126c:	08001295 	.word	0x08001295
 8001270:	4a82      	ldr	r2, [pc, #520]	; (800147c <HAL_GPIO_Init+0x2d8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001276:	e02c      	b.n	80012d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e029      	b.n	80012d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	3304      	adds	r3, #4
 8001286:	623b      	str	r3, [r7, #32]
          break;
 8001288:	e024      	b.n	80012d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	3308      	adds	r3, #8
 8001290:	623b      	str	r3, [r7, #32]
          break;
 8001292:	e01f      	b.n	80012d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	330c      	adds	r3, #12
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e01a      	b.n	80012d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012a6:	2304      	movs	r3, #4
 80012a8:	623b      	str	r3, [r7, #32]
          break;
 80012aa:	e013      	b.n	80012d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b4:	2308      	movs	r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	611a      	str	r2, [r3, #16]
          break;
 80012be:	e009      	b.n	80012d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c0:	2308      	movs	r3, #8
 80012c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	615a      	str	r2, [r3, #20]
          break;
 80012ca:	e003      	b.n	80012d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x130>
          break;
 80012d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	d801      	bhi.n	80012de <HAL_GPIO_Init+0x13a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	e001      	b.n	80012e2 <HAL_GPIO_Init+0x13e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3304      	adds	r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2bff      	cmp	r3, #255	; 0xff
 80012e8:	d802      	bhi.n	80012f0 <HAL_GPIO_Init+0x14c>
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	e002      	b.n	80012f6 <HAL_GPIO_Init+0x152>
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	3b08      	subs	r3, #8
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	210f      	movs	r1, #15
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	401a      	ands	r2, r3
 8001308:	6a39      	ldr	r1, [r7, #32]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	431a      	orrs	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8090 	beq.w	8001444 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a55      	ldr	r2, [pc, #340]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800133c:	4a51      	ldr	r2, [pc, #324]	; (8001484 <HAL_GPIO_Init+0x2e0>)
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a49      	ldr	r2, [pc, #292]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d00d      	beq.n	8001384 <HAL_GPIO_Init+0x1e0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a48      	ldr	r2, [pc, #288]	; (800148c <HAL_GPIO_Init+0x2e8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d007      	beq.n	8001380 <HAL_GPIO_Init+0x1dc>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a47      	ldr	r2, [pc, #284]	; (8001490 <HAL_GPIO_Init+0x2ec>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <HAL_GPIO_Init+0x1d8>
 8001378:	2302      	movs	r3, #2
 800137a:	e004      	b.n	8001386 <HAL_GPIO_Init+0x1e2>
 800137c:	2303      	movs	r3, #3
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x1e2>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_GPIO_Init+0x1e2>
 8001384:	2300      	movs	r3, #0
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001396:	493b      	ldr	r1, [pc, #236]	; (8001484 <HAL_GPIO_Init+0x2e0>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b0:	4b38      	ldr	r3, [pc, #224]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013be:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4933      	ldr	r1, [pc, #204]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	492d      	ldr	r1, [pc, #180]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4929      	ldr	r1, [pc, #164]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4923      	ldr	r1, [pc, #140]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	491f      	ldr	r1, [pc, #124]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001418:	4013      	ands	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	4919      	ldr	r1, [pc, #100]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	60cb      	str	r3, [r1, #12]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	4915      	ldr	r1, [pc, #84]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001440:	4013      	ands	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	3301      	adds	r3, #1
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f aeaf 	bne.w	80011b8 <HAL_GPIO_Init+0x14>
  }
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	372c      	adds	r7, #44	; 0x2c
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	10320000 	.word	0x10320000
 800146c:	10310000 	.word	0x10310000
 8001470:	10220000 	.word	0x10220000
 8001474:	10210000 	.word	0x10210000
 8001478:	10120000 	.word	0x10120000
 800147c:	10110000 	.word	0x10110000
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000
 8001488:	40010800 	.word	0x40010800
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40011000 	.word	0x40011000
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e26c      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8087 	beq.w	80015f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e8:	4b92      	ldr	r3, [pc, #584]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d00c      	beq.n	800150e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f4:	4b8f      	ldr	r3, [pc, #572]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d112      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
 8001500:	4b8c      	ldr	r3, [pc, #560]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d10b      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	4b89      	ldr	r3, [pc, #548]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d06c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x12c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d168      	bne.n	80015f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e246      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x76>
 8001530:	4b80      	ldr	r3, [pc, #512]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a7f      	ldr	r2, [pc, #508]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e02e      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7a      	ldr	r2, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b78      	ldr	r3, [pc, #480]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a77      	ldr	r2, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0xbc>
 800156a:	4b72      	ldr	r3, [pc, #456]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a71      	ldr	r2, [pc, #452]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001584:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6a      	ldr	r2, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a67      	ldr	r2, [pc, #412]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fada 	bl	8000b5c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fad6 	bl	8000b5c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1fa      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xe4>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fac6 	bl	8000b5c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fac2 	bl	8000b5c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1e6      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x10c>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x18c>
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x176>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1ba      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4939      	ldr	r1, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e03a      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fa7b 	bl	8000b5c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fa77 	bl	8000b5c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e19b      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4927      	ldr	r1, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa5a 	bl	8000b5c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fa56 	bl	8000b5c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e17a      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d03a      	beq.n	800174c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d019      	beq.n	8001712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_RCC_OscConfig+0x274>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fa3a 	bl	8000b5c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fa36 	bl	8000b5c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e15a      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f000 fac4 	bl	8001c98 <RCC_Delay>
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_RCC_OscConfig+0x274>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fa20 	bl	8000b5c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171e:	e00f      	b.n	8001740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff fa1c 	bl	8000b5c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d908      	bls.n	8001740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e140      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	42420000 	.word	0x42420000
 800173c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	4b9e      	ldr	r3, [pc, #632]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e9      	bne.n	8001720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a6 	beq.w	80018a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b97      	ldr	r3, [pc, #604]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b94      	ldr	r3, [pc, #592]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a93      	ldr	r2, [pc, #588]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b91      	ldr	r3, [pc, #580]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b8e      	ldr	r3, [pc, #568]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a8a      	ldr	r2, [pc, #552]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff f9dd 	bl	8000b5c <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff f9d9 	bl	8000b5c <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0fd      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x312>
 80017cc:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a7a      	ldr	r2, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	e02d      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x334>
 80017e2:	4b76      	ldr	r3, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a75      	ldr	r2, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a72      	ldr	r2, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	e01c      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d10c      	bne.n	800181e <HAL_RCC_OscConfig+0x356>
 8001804:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a6c      	ldr	r2, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a69      	ldr	r2, [pc, #420]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a66      	ldr	r2, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d015      	beq.n	800186a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff f98d 	bl	8000b5c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f989 	bl	8000b5c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0ab      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ee      	beq.n	8001846 <HAL_RCC_OscConfig+0x37e>
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff f977 	bl	8000b5c <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f973 	bl	8000b5c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e095      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d105      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189a:	4b48      	ldr	r3, [pc, #288]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8081 	beq.w	80019b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b0:	4b42      	ldr	r3, [pc, #264]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d061      	beq.n	8001980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d146      	bne.n	8001952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x4fc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f947 	bl	8000b5c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f943 	bl	8000b5c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e067      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	492d      	ldr	r1, [pc, #180]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a19      	ldr	r1, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	430b      	orrs	r3, r1
 800191e:	4927      	ldr	r1, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_OscConfig+0x4fc>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f917 	bl	8000b5c <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f913 	bl	8000b5c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e037      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x46a>
 8001950:	e02f      	b.n	80019b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_RCC_OscConfig+0x4fc>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff f900 	bl	8000b5c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f8fc 	bl	8000b5c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e020      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x498>
 800197e:	e018      	b.n	80019b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e013      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x4f4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40007000 	.word	0x40007000
 80019c4:	42420060 	.word	0x42420060

080019c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0d0      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4965      	ldr	r1, [pc, #404]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b8      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	494d      	ldr	r1, [pc, #308]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d040      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e073      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e06b      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4936      	ldr	r1, [pc, #216]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff f850 	bl	8000b5c <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff f84c 	bl	8000b5c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e053      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d210      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 0207 	bic.w	r2, r3, #7
 8001afe:	4922      	ldr	r1, [pc, #136]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e032      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4916      	ldr	r1, [pc, #88]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b56:	f000 f821 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490a      	ldr	r1, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1cc>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1d0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe ffae 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08002f70 	.word	0x08002f70
 8001b94:	20000018 	.word	0x20000018
 8001b98:	2000001c 	.word	0x2000001c

08001b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b490      	push	{r4, r7}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ba4:	1d3c      	adds	r4, r7, #4
 8001ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bac:	f240 2301 	movw	r3, #513	; 0x201
 8001bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x40>
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x46>
 8001bda:	e02d      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bde:	623b      	str	r3, [r7, #32]
      break;
 8001be0:	e02d      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	0c9b      	lsrs	r3, r3, #18
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bee:	4413      	add	r3, r2
 8001bf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c5b      	lsrs	r3, r3, #17
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c0e:	4413      	add	r3, r2
 8001c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1a:	fb02 f203 	mul.w	r2, r2, r3
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e004      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	623b      	str	r3, [r7, #32]
      break;
 8001c36:	e002      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc90      	pop	{r4, r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	08002f60 	.word	0x08002f60
 8001c50:	40021000 	.word	0x40021000
 8001c54:	007a1200 	.word	0x007a1200
 8001c58:	003d0900 	.word	0x003d0900

08001c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000018 	.word	0x20000018

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c74:	f7ff fff2 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08002f80 	.word	0x08002f80

08001c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <RCC_Delay+0x34>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <RCC_Delay+0x38>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0a5b      	lsrs	r3, r3, #9
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cb4:	bf00      	nop
  }
  while (Delay --);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	60fa      	str	r2, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <RCC_Delay+0x1c>
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000018 	.word	0x20000018
 8001cd0:	10624dd3 	.word	0x10624dd3

08001cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d07d      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10d      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	4b4c      	ldr	r3, [pc, #304]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	61d3      	str	r3, [r2, #28]
 8001d0c:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d118      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d28:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a42      	ldr	r2, [pc, #264]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d34:	f7fe ff12 	bl	8000b5c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	e008      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7fe ff0e 	bl	8000b5c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e06d      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d5a:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d02e      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d027      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d88:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d8e:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d014      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe fedd 	bl	8000b5c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7fe fed9 	bl	8000b5c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e036      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ee      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4917      	ldr	r1, [pc, #92]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	490b      	ldr	r1, [pc, #44]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4904      	ldr	r1, [pc, #16]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	42420440 	.word	0x42420440

08001e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e041      	b.n	8001ed6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fd4a 	bl	8000900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f000 f988 	bl	8002194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_TIM_PWM_Start+0x24>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e022      	b.n	8001f4a <HAL_TIM_PWM_Start+0x6a>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d109      	bne.n	8001f1e <HAL_TIM_PWM_Start+0x3e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	e015      	b.n	8001f4a <HAL_TIM_PWM_Start+0x6a>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d109      	bne.n	8001f38 <HAL_TIM_PWM_Start+0x58>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e008      	b.n	8001f4a <HAL_TIM_PWM_Start+0x6a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e059      	b.n	8002006 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d104      	bne.n	8001f62 <HAL_TIM_PWM_Start+0x82>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f60:	e013      	b.n	8001f8a <HAL_TIM_PWM_Start+0xaa>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d104      	bne.n	8001f72 <HAL_TIM_PWM_Start+0x92>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f70:	e00b      	b.n	8001f8a <HAL_TIM_PWM_Start+0xaa>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d104      	bne.n	8001f82 <HAL_TIM_PWM_Start+0xa2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f80:	e003      	b.n	8001f8a <HAL_TIM_PWM_Start+0xaa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fade 	bl	8002554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_TIM_PWM_Start+0x130>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a16      	ldr	r2, [pc, #88]	; (8002010 <HAL_TIM_PWM_Start+0x130>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_TIM_PWM_Start+0xf0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d004      	beq.n	8001fd0 <HAL_TIM_PWM_Start+0xf0>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_TIM_PWM_Start+0x134>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d010      	beq.n	8002004 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	e007      	b.n	8002004 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40000400 	.word	0x40000400

08002018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800202e:	2302      	movs	r3, #2
 8002030:	e0ac      	b.n	800218c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	f200 809f 	bhi.w	8002180 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002042:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	0800207d 	.word	0x0800207d
 800204c:	08002181 	.word	0x08002181
 8002050:	08002181 	.word	0x08002181
 8002054:	08002181 	.word	0x08002181
 8002058:	080020bd 	.word	0x080020bd
 800205c:	08002181 	.word	0x08002181
 8002060:	08002181 	.word	0x08002181
 8002064:	08002181 	.word	0x08002181
 8002068:	080020ff 	.word	0x080020ff
 800206c:	08002181 	.word	0x08002181
 8002070:	08002181 	.word	0x08002181
 8002074:	08002181 	.word	0x08002181
 8002078:	0800213f 	.word	0x0800213f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f8de 	bl	8002244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0208 	orr.w	r2, r2, #8
 8002096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0204 	bic.w	r2, r2, #4
 80020a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6999      	ldr	r1, [r3, #24]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	619a      	str	r2, [r3, #24]
      break;
 80020ba:	e062      	b.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f924 	bl	8002310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6999      	ldr	r1, [r3, #24]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	021a      	lsls	r2, r3, #8
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	619a      	str	r2, [r3, #24]
      break;
 80020fc:	e041      	b.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f96d 	bl	80023e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0208 	orr.w	r2, r2, #8
 8002118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0204 	bic.w	r2, r2, #4
 8002128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69d9      	ldr	r1, [r3, #28]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	61da      	str	r2, [r3, #28]
      break;
 800213c:	e021      	b.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f9b7 	bl	80024b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69d9      	ldr	r1, [r3, #28]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	021a      	lsls	r2, r3, #8
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	61da      	str	r2, [r3, #28]
      break;
 800217e:	e000      	b.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002180:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <TIM_Base_SetConfig+0xa8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <TIM_Base_SetConfig+0x28>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d003      	beq.n	80021bc <TIM_Base_SetConfig+0x28>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <TIM_Base_SetConfig+0xac>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d108      	bne.n	80021ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <TIM_Base_SetConfig+0xa8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0x52>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0x52>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a17      	ldr	r2, [pc, #92]	; (8002240 <TIM_Base_SetConfig+0xac>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <TIM_Base_SetConfig+0xa8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	615a      	str	r2, [r3, #20]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40000400 	.word	0x40000400

08002244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f023 0201 	bic.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f023 0302 	bic.w	r3, r3, #2
 800228c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a1c      	ldr	r2, [pc, #112]	; (800230c <TIM_OC1_SetConfig+0xc8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d10c      	bne.n	80022ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0308 	bic.w	r3, r3, #8
 80022a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <TIM_OC1_SetConfig+0xc8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d111      	bne.n	80022e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	621a      	str	r2, [r3, #32]
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00

08002310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f023 0210 	bic.w	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f023 0320 	bic.w	r3, r3, #32
 800235a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <TIM_OC2_SetConfig+0xd0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d10d      	bne.n	800238c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800238a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <TIM_OC2_SetConfig+0xd0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d113      	bne.n	80023bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800239a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	621a      	str	r2, [r3, #32]
}
 80023d6:	bf00      	nop
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40012c00 	.word	0x40012c00

080023e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800242c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <TIM_OC3_SetConfig+0xd0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800245c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <TIM_OC3_SetConfig+0xd0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d113      	bne.n	800248e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800246c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	621a      	str	r2, [r3, #32]
}
 80024a8:	bf00      	nop
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00

080024b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	031b      	lsls	r3, r3, #12
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <TIM_OC4_SetConfig+0x98>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d109      	bne.n	800252c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	019b      	lsls	r3, r3, #6
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	621a      	str	r2, [r3, #32]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40012c00 	.word	0x40012c00

08002554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2201      	movs	r2, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e041      	b.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d004      	beq.n	800260c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10c      	bne.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	4313      	orrs	r3, r2
 800261c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400

0800264c <__errno>:
 800264c:	4b01      	ldr	r3, [pc, #4]	; (8002654 <__errno+0x8>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000024 	.word	0x20000024

08002658 <__libc_init_array>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	2600      	movs	r6, #0
 800265c:	4d0c      	ldr	r5, [pc, #48]	; (8002690 <__libc_init_array+0x38>)
 800265e:	4c0d      	ldr	r4, [pc, #52]	; (8002694 <__libc_init_array+0x3c>)
 8002660:	1b64      	subs	r4, r4, r5
 8002662:	10a4      	asrs	r4, r4, #2
 8002664:	42a6      	cmp	r6, r4
 8002666:	d109      	bne.n	800267c <__libc_init_array+0x24>
 8002668:	f000 fc5c 	bl	8002f24 <_init>
 800266c:	2600      	movs	r6, #0
 800266e:	4d0a      	ldr	r5, [pc, #40]	; (8002698 <__libc_init_array+0x40>)
 8002670:	4c0a      	ldr	r4, [pc, #40]	; (800269c <__libc_init_array+0x44>)
 8002672:	1b64      	subs	r4, r4, r5
 8002674:	10a4      	asrs	r4, r4, #2
 8002676:	42a6      	cmp	r6, r4
 8002678:	d105      	bne.n	8002686 <__libc_init_array+0x2e>
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002680:	4798      	blx	r3
 8002682:	3601      	adds	r6, #1
 8002684:	e7ee      	b.n	8002664 <__libc_init_array+0xc>
 8002686:	f855 3b04 	ldr.w	r3, [r5], #4
 800268a:	4798      	blx	r3
 800268c:	3601      	adds	r6, #1
 800268e:	e7f2      	b.n	8002676 <__libc_init_array+0x1e>
 8002690:	08002fbc 	.word	0x08002fbc
 8002694:	08002fbc 	.word	0x08002fbc
 8002698:	08002fbc 	.word	0x08002fbc
 800269c:	08002fc0 	.word	0x08002fc0

080026a0 <memset>:
 80026a0:	4603      	mov	r3, r0
 80026a2:	4402      	add	r2, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <siprintf>:
 80026b0:	b40e      	push	{r1, r2, r3}
 80026b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026b6:	b500      	push	{lr}
 80026b8:	b09c      	sub	sp, #112	; 0x70
 80026ba:	ab1d      	add	r3, sp, #116	; 0x74
 80026bc:	9002      	str	r0, [sp, #8]
 80026be:	9006      	str	r0, [sp, #24]
 80026c0:	9107      	str	r1, [sp, #28]
 80026c2:	9104      	str	r1, [sp, #16]
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <siprintf+0x38>)
 80026c6:	4909      	ldr	r1, [pc, #36]	; (80026ec <siprintf+0x3c>)
 80026c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80026cc:	9105      	str	r1, [sp, #20]
 80026ce:	6800      	ldr	r0, [r0, #0]
 80026d0:	a902      	add	r1, sp, #8
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	f000 f868 	bl	80027a8 <_svfiprintf_r>
 80026d8:	2200      	movs	r2, #0
 80026da:	9b02      	ldr	r3, [sp, #8]
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	b01c      	add	sp, #112	; 0x70
 80026e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80026e4:	b003      	add	sp, #12
 80026e6:	4770      	bx	lr
 80026e8:	20000024 	.word	0x20000024
 80026ec:	ffff0208 	.word	0xffff0208

080026f0 <__ssputs_r>:
 80026f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026f4:	688e      	ldr	r6, [r1, #8]
 80026f6:	4682      	mov	sl, r0
 80026f8:	429e      	cmp	r6, r3
 80026fa:	460c      	mov	r4, r1
 80026fc:	4690      	mov	r8, r2
 80026fe:	461f      	mov	r7, r3
 8002700:	d838      	bhi.n	8002774 <__ssputs_r+0x84>
 8002702:	898a      	ldrh	r2, [r1, #12]
 8002704:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002708:	d032      	beq.n	8002770 <__ssputs_r+0x80>
 800270a:	6825      	ldr	r5, [r4, #0]
 800270c:	6909      	ldr	r1, [r1, #16]
 800270e:	3301      	adds	r3, #1
 8002710:	eba5 0901 	sub.w	r9, r5, r1
 8002714:	6965      	ldr	r5, [r4, #20]
 8002716:	444b      	add	r3, r9
 8002718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800271c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002720:	106d      	asrs	r5, r5, #1
 8002722:	429d      	cmp	r5, r3
 8002724:	bf38      	it	cc
 8002726:	461d      	movcc	r5, r3
 8002728:	0553      	lsls	r3, r2, #21
 800272a:	d531      	bpl.n	8002790 <__ssputs_r+0xa0>
 800272c:	4629      	mov	r1, r5
 800272e:	f000 fb53 	bl	8002dd8 <_malloc_r>
 8002732:	4606      	mov	r6, r0
 8002734:	b950      	cbnz	r0, 800274c <__ssputs_r+0x5c>
 8002736:	230c      	movs	r3, #12
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f8ca 3000 	str.w	r3, [sl]
 8002740:	89a3      	ldrh	r3, [r4, #12]
 8002742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002746:	81a3      	strh	r3, [r4, #12]
 8002748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800274c:	464a      	mov	r2, r9
 800274e:	6921      	ldr	r1, [r4, #16]
 8002750:	f000 face 	bl	8002cf0 <memcpy>
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800275a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275e:	81a3      	strh	r3, [r4, #12]
 8002760:	6126      	str	r6, [r4, #16]
 8002762:	444e      	add	r6, r9
 8002764:	6026      	str	r6, [r4, #0]
 8002766:	463e      	mov	r6, r7
 8002768:	6165      	str	r5, [r4, #20]
 800276a:	eba5 0509 	sub.w	r5, r5, r9
 800276e:	60a5      	str	r5, [r4, #8]
 8002770:	42be      	cmp	r6, r7
 8002772:	d900      	bls.n	8002776 <__ssputs_r+0x86>
 8002774:	463e      	mov	r6, r7
 8002776:	4632      	mov	r2, r6
 8002778:	4641      	mov	r1, r8
 800277a:	6820      	ldr	r0, [r4, #0]
 800277c:	f000 fac6 	bl	8002d0c <memmove>
 8002780:	68a3      	ldr	r3, [r4, #8]
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	1b9b      	subs	r3, r3, r6
 8002786:	4432      	add	r2, r6
 8002788:	2000      	movs	r0, #0
 800278a:	60a3      	str	r3, [r4, #8]
 800278c:	6022      	str	r2, [r4, #0]
 800278e:	e7db      	b.n	8002748 <__ssputs_r+0x58>
 8002790:	462a      	mov	r2, r5
 8002792:	f000 fb7b 	bl	8002e8c <_realloc_r>
 8002796:	4606      	mov	r6, r0
 8002798:	2800      	cmp	r0, #0
 800279a:	d1e1      	bne.n	8002760 <__ssputs_r+0x70>
 800279c:	4650      	mov	r0, sl
 800279e:	6921      	ldr	r1, [r4, #16]
 80027a0:	f000 face 	bl	8002d40 <_free_r>
 80027a4:	e7c7      	b.n	8002736 <__ssputs_r+0x46>
	...

080027a8 <_svfiprintf_r>:
 80027a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ac:	4698      	mov	r8, r3
 80027ae:	898b      	ldrh	r3, [r1, #12]
 80027b0:	4607      	mov	r7, r0
 80027b2:	061b      	lsls	r3, r3, #24
 80027b4:	460d      	mov	r5, r1
 80027b6:	4614      	mov	r4, r2
 80027b8:	b09d      	sub	sp, #116	; 0x74
 80027ba:	d50e      	bpl.n	80027da <_svfiprintf_r+0x32>
 80027bc:	690b      	ldr	r3, [r1, #16]
 80027be:	b963      	cbnz	r3, 80027da <_svfiprintf_r+0x32>
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	f000 fb09 	bl	8002dd8 <_malloc_r>
 80027c6:	6028      	str	r0, [r5, #0]
 80027c8:	6128      	str	r0, [r5, #16]
 80027ca:	b920      	cbnz	r0, 80027d6 <_svfiprintf_r+0x2e>
 80027cc:	230c      	movs	r3, #12
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	e0d1      	b.n	800297a <_svfiprintf_r+0x1d2>
 80027d6:	2340      	movs	r3, #64	; 0x40
 80027d8:	616b      	str	r3, [r5, #20]
 80027da:	2300      	movs	r3, #0
 80027dc:	9309      	str	r3, [sp, #36]	; 0x24
 80027de:	2320      	movs	r3, #32
 80027e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027e4:	2330      	movs	r3, #48	; 0x30
 80027e6:	f04f 0901 	mov.w	r9, #1
 80027ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80027ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002994 <_svfiprintf_r+0x1ec>
 80027f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027f6:	4623      	mov	r3, r4
 80027f8:	469a      	mov	sl, r3
 80027fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027fe:	b10a      	cbz	r2, 8002804 <_svfiprintf_r+0x5c>
 8002800:	2a25      	cmp	r2, #37	; 0x25
 8002802:	d1f9      	bne.n	80027f8 <_svfiprintf_r+0x50>
 8002804:	ebba 0b04 	subs.w	fp, sl, r4
 8002808:	d00b      	beq.n	8002822 <_svfiprintf_r+0x7a>
 800280a:	465b      	mov	r3, fp
 800280c:	4622      	mov	r2, r4
 800280e:	4629      	mov	r1, r5
 8002810:	4638      	mov	r0, r7
 8002812:	f7ff ff6d 	bl	80026f0 <__ssputs_r>
 8002816:	3001      	adds	r0, #1
 8002818:	f000 80aa 	beq.w	8002970 <_svfiprintf_r+0x1c8>
 800281c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800281e:	445a      	add	r2, fp
 8002820:	9209      	str	r2, [sp, #36]	; 0x24
 8002822:	f89a 3000 	ldrb.w	r3, [sl]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80a2 	beq.w	8002970 <_svfiprintf_r+0x1c8>
 800282c:	2300      	movs	r3, #0
 800282e:	f04f 32ff 	mov.w	r2, #4294967295
 8002832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002836:	f10a 0a01 	add.w	sl, sl, #1
 800283a:	9304      	str	r3, [sp, #16]
 800283c:	9307      	str	r3, [sp, #28]
 800283e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002842:	931a      	str	r3, [sp, #104]	; 0x68
 8002844:	4654      	mov	r4, sl
 8002846:	2205      	movs	r2, #5
 8002848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800284c:	4851      	ldr	r0, [pc, #324]	; (8002994 <_svfiprintf_r+0x1ec>)
 800284e:	f000 fa41 	bl	8002cd4 <memchr>
 8002852:	9a04      	ldr	r2, [sp, #16]
 8002854:	b9d8      	cbnz	r0, 800288e <_svfiprintf_r+0xe6>
 8002856:	06d0      	lsls	r0, r2, #27
 8002858:	bf44      	itt	mi
 800285a:	2320      	movmi	r3, #32
 800285c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002860:	0711      	lsls	r1, r2, #28
 8002862:	bf44      	itt	mi
 8002864:	232b      	movmi	r3, #43	; 0x2b
 8002866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800286a:	f89a 3000 	ldrb.w	r3, [sl]
 800286e:	2b2a      	cmp	r3, #42	; 0x2a
 8002870:	d015      	beq.n	800289e <_svfiprintf_r+0xf6>
 8002872:	4654      	mov	r4, sl
 8002874:	2000      	movs	r0, #0
 8002876:	f04f 0c0a 	mov.w	ip, #10
 800287a:	9a07      	ldr	r2, [sp, #28]
 800287c:	4621      	mov	r1, r4
 800287e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002882:	3b30      	subs	r3, #48	; 0x30
 8002884:	2b09      	cmp	r3, #9
 8002886:	d94e      	bls.n	8002926 <_svfiprintf_r+0x17e>
 8002888:	b1b0      	cbz	r0, 80028b8 <_svfiprintf_r+0x110>
 800288a:	9207      	str	r2, [sp, #28]
 800288c:	e014      	b.n	80028b8 <_svfiprintf_r+0x110>
 800288e:	eba0 0308 	sub.w	r3, r0, r8
 8002892:	fa09 f303 	lsl.w	r3, r9, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	46a2      	mov	sl, r4
 800289a:	9304      	str	r3, [sp, #16]
 800289c:	e7d2      	b.n	8002844 <_svfiprintf_r+0x9c>
 800289e:	9b03      	ldr	r3, [sp, #12]
 80028a0:	1d19      	adds	r1, r3, #4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	9103      	str	r1, [sp, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bfbb      	ittet	lt
 80028aa:	425b      	neglt	r3, r3
 80028ac:	f042 0202 	orrlt.w	r2, r2, #2
 80028b0:	9307      	strge	r3, [sp, #28]
 80028b2:	9307      	strlt	r3, [sp, #28]
 80028b4:	bfb8      	it	lt
 80028b6:	9204      	strlt	r2, [sp, #16]
 80028b8:	7823      	ldrb	r3, [r4, #0]
 80028ba:	2b2e      	cmp	r3, #46	; 0x2e
 80028bc:	d10c      	bne.n	80028d8 <_svfiprintf_r+0x130>
 80028be:	7863      	ldrb	r3, [r4, #1]
 80028c0:	2b2a      	cmp	r3, #42	; 0x2a
 80028c2:	d135      	bne.n	8002930 <_svfiprintf_r+0x188>
 80028c4:	9b03      	ldr	r3, [sp, #12]
 80028c6:	3402      	adds	r4, #2
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	9203      	str	r2, [sp, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bfb8      	it	lt
 80028d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80028d6:	9305      	str	r3, [sp, #20]
 80028d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80029a4 <_svfiprintf_r+0x1fc>
 80028dc:	2203      	movs	r2, #3
 80028de:	4650      	mov	r0, sl
 80028e0:	7821      	ldrb	r1, [r4, #0]
 80028e2:	f000 f9f7 	bl	8002cd4 <memchr>
 80028e6:	b140      	cbz	r0, 80028fa <_svfiprintf_r+0x152>
 80028e8:	2340      	movs	r3, #64	; 0x40
 80028ea:	eba0 000a 	sub.w	r0, r0, sl
 80028ee:	fa03 f000 	lsl.w	r0, r3, r0
 80028f2:	9b04      	ldr	r3, [sp, #16]
 80028f4:	3401      	adds	r4, #1
 80028f6:	4303      	orrs	r3, r0
 80028f8:	9304      	str	r3, [sp, #16]
 80028fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028fe:	2206      	movs	r2, #6
 8002900:	4825      	ldr	r0, [pc, #148]	; (8002998 <_svfiprintf_r+0x1f0>)
 8002902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002906:	f000 f9e5 	bl	8002cd4 <memchr>
 800290a:	2800      	cmp	r0, #0
 800290c:	d038      	beq.n	8002980 <_svfiprintf_r+0x1d8>
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <_svfiprintf_r+0x1f4>)
 8002910:	bb1b      	cbnz	r3, 800295a <_svfiprintf_r+0x1b2>
 8002912:	9b03      	ldr	r3, [sp, #12]
 8002914:	3307      	adds	r3, #7
 8002916:	f023 0307 	bic.w	r3, r3, #7
 800291a:	3308      	adds	r3, #8
 800291c:	9303      	str	r3, [sp, #12]
 800291e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002920:	4433      	add	r3, r6
 8002922:	9309      	str	r3, [sp, #36]	; 0x24
 8002924:	e767      	b.n	80027f6 <_svfiprintf_r+0x4e>
 8002926:	460c      	mov	r4, r1
 8002928:	2001      	movs	r0, #1
 800292a:	fb0c 3202 	mla	r2, ip, r2, r3
 800292e:	e7a5      	b.n	800287c <_svfiprintf_r+0xd4>
 8002930:	2300      	movs	r3, #0
 8002932:	f04f 0c0a 	mov.w	ip, #10
 8002936:	4619      	mov	r1, r3
 8002938:	3401      	adds	r4, #1
 800293a:	9305      	str	r3, [sp, #20]
 800293c:	4620      	mov	r0, r4
 800293e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002942:	3a30      	subs	r2, #48	; 0x30
 8002944:	2a09      	cmp	r2, #9
 8002946:	d903      	bls.n	8002950 <_svfiprintf_r+0x1a8>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0c5      	beq.n	80028d8 <_svfiprintf_r+0x130>
 800294c:	9105      	str	r1, [sp, #20]
 800294e:	e7c3      	b.n	80028d8 <_svfiprintf_r+0x130>
 8002950:	4604      	mov	r4, r0
 8002952:	2301      	movs	r3, #1
 8002954:	fb0c 2101 	mla	r1, ip, r1, r2
 8002958:	e7f0      	b.n	800293c <_svfiprintf_r+0x194>
 800295a:	ab03      	add	r3, sp, #12
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	462a      	mov	r2, r5
 8002960:	4638      	mov	r0, r7
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <_svfiprintf_r+0x1f8>)
 8002964:	a904      	add	r1, sp, #16
 8002966:	f3af 8000 	nop.w
 800296a:	1c42      	adds	r2, r0, #1
 800296c:	4606      	mov	r6, r0
 800296e:	d1d6      	bne.n	800291e <_svfiprintf_r+0x176>
 8002970:	89ab      	ldrh	r3, [r5, #12]
 8002972:	065b      	lsls	r3, r3, #25
 8002974:	f53f af2c 	bmi.w	80027d0 <_svfiprintf_r+0x28>
 8002978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800297a:	b01d      	add	sp, #116	; 0x74
 800297c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002980:	ab03      	add	r3, sp, #12
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	462a      	mov	r2, r5
 8002986:	4638      	mov	r0, r7
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <_svfiprintf_r+0x1f8>)
 800298a:	a904      	add	r1, sp, #16
 800298c:	f000 f87c 	bl	8002a88 <_printf_i>
 8002990:	e7eb      	b.n	800296a <_svfiprintf_r+0x1c2>
 8002992:	bf00      	nop
 8002994:	08002f88 	.word	0x08002f88
 8002998:	08002f92 	.word	0x08002f92
 800299c:	00000000 	.word	0x00000000
 80029a0:	080026f1 	.word	0x080026f1
 80029a4:	08002f8e 	.word	0x08002f8e

080029a8 <_printf_common>:
 80029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	4616      	mov	r6, r2
 80029ae:	4699      	mov	r9, r3
 80029b0:	688a      	ldr	r2, [r1, #8]
 80029b2:	690b      	ldr	r3, [r1, #16]
 80029b4:	4607      	mov	r7, r0
 80029b6:	4293      	cmp	r3, r2
 80029b8:	bfb8      	it	lt
 80029ba:	4613      	movlt	r3, r2
 80029bc:	6033      	str	r3, [r6, #0]
 80029be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029c2:	460c      	mov	r4, r1
 80029c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029c8:	b10a      	cbz	r2, 80029ce <_printf_common+0x26>
 80029ca:	3301      	adds	r3, #1
 80029cc:	6033      	str	r3, [r6, #0]
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	0699      	lsls	r1, r3, #26
 80029d2:	bf42      	ittt	mi
 80029d4:	6833      	ldrmi	r3, [r6, #0]
 80029d6:	3302      	addmi	r3, #2
 80029d8:	6033      	strmi	r3, [r6, #0]
 80029da:	6825      	ldr	r5, [r4, #0]
 80029dc:	f015 0506 	ands.w	r5, r5, #6
 80029e0:	d106      	bne.n	80029f0 <_printf_common+0x48>
 80029e2:	f104 0a19 	add.w	sl, r4, #25
 80029e6:	68e3      	ldr	r3, [r4, #12]
 80029e8:	6832      	ldr	r2, [r6, #0]
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	42ab      	cmp	r3, r5
 80029ee:	dc28      	bgt.n	8002a42 <_printf_common+0x9a>
 80029f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029f4:	1e13      	subs	r3, r2, #0
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	bf18      	it	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	0692      	lsls	r2, r2, #26
 80029fe:	d42d      	bmi.n	8002a5c <_printf_common+0xb4>
 8002a00:	4649      	mov	r1, r9
 8002a02:	4638      	mov	r0, r7
 8002a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a08:	47c0      	blx	r8
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	d020      	beq.n	8002a50 <_printf_common+0xa8>
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	68e5      	ldr	r5, [r4, #12]
 8002a12:	f003 0306 	and.w	r3, r3, #6
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf18      	it	ne
 8002a1a:	2500      	movne	r5, #0
 8002a1c:	6832      	ldr	r2, [r6, #0]
 8002a1e:	f04f 0600 	mov.w	r6, #0
 8002a22:	68a3      	ldr	r3, [r4, #8]
 8002a24:	bf08      	it	eq
 8002a26:	1aad      	subeq	r5, r5, r2
 8002a28:	6922      	ldr	r2, [r4, #16]
 8002a2a:	bf08      	it	eq
 8002a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bfc4      	itt	gt
 8002a34:	1a9b      	subgt	r3, r3, r2
 8002a36:	18ed      	addgt	r5, r5, r3
 8002a38:	341a      	adds	r4, #26
 8002a3a:	42b5      	cmp	r5, r6
 8002a3c:	d11a      	bne.n	8002a74 <_printf_common+0xcc>
 8002a3e:	2000      	movs	r0, #0
 8002a40:	e008      	b.n	8002a54 <_printf_common+0xac>
 8002a42:	2301      	movs	r3, #1
 8002a44:	4652      	mov	r2, sl
 8002a46:	4649      	mov	r1, r9
 8002a48:	4638      	mov	r0, r7
 8002a4a:	47c0      	blx	r8
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	d103      	bne.n	8002a58 <_printf_common+0xb0>
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a58:	3501      	adds	r5, #1
 8002a5a:	e7c4      	b.n	80029e6 <_printf_common+0x3e>
 8002a5c:	2030      	movs	r0, #48	; 0x30
 8002a5e:	18e1      	adds	r1, r4, r3
 8002a60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a6a:	4422      	add	r2, r4
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a72:	e7c5      	b.n	8002a00 <_printf_common+0x58>
 8002a74:	2301      	movs	r3, #1
 8002a76:	4622      	mov	r2, r4
 8002a78:	4649      	mov	r1, r9
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	47c0      	blx	r8
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d0e6      	beq.n	8002a50 <_printf_common+0xa8>
 8002a82:	3601      	adds	r6, #1
 8002a84:	e7d9      	b.n	8002a3a <_printf_common+0x92>
	...

08002a88 <_printf_i>:
 8002a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	7e27      	ldrb	r7, [r4, #24]
 8002a90:	4691      	mov	r9, r2
 8002a92:	2f78      	cmp	r7, #120	; 0x78
 8002a94:	4680      	mov	r8, r0
 8002a96:	469a      	mov	sl, r3
 8002a98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a9e:	d807      	bhi.n	8002ab0 <_printf_i+0x28>
 8002aa0:	2f62      	cmp	r7, #98	; 0x62
 8002aa2:	d80a      	bhi.n	8002aba <_printf_i+0x32>
 8002aa4:	2f00      	cmp	r7, #0
 8002aa6:	f000 80d9 	beq.w	8002c5c <_printf_i+0x1d4>
 8002aaa:	2f58      	cmp	r7, #88	; 0x58
 8002aac:	f000 80a4 	beq.w	8002bf8 <_printf_i+0x170>
 8002ab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ab8:	e03a      	b.n	8002b30 <_printf_i+0xa8>
 8002aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002abe:	2b15      	cmp	r3, #21
 8002ac0:	d8f6      	bhi.n	8002ab0 <_printf_i+0x28>
 8002ac2:	a001      	add	r0, pc, #4	; (adr r0, 8002ac8 <_printf_i+0x40>)
 8002ac4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ac8:	08002b21 	.word	0x08002b21
 8002acc:	08002b35 	.word	0x08002b35
 8002ad0:	08002ab1 	.word	0x08002ab1
 8002ad4:	08002ab1 	.word	0x08002ab1
 8002ad8:	08002ab1 	.word	0x08002ab1
 8002adc:	08002ab1 	.word	0x08002ab1
 8002ae0:	08002b35 	.word	0x08002b35
 8002ae4:	08002ab1 	.word	0x08002ab1
 8002ae8:	08002ab1 	.word	0x08002ab1
 8002aec:	08002ab1 	.word	0x08002ab1
 8002af0:	08002ab1 	.word	0x08002ab1
 8002af4:	08002c43 	.word	0x08002c43
 8002af8:	08002b65 	.word	0x08002b65
 8002afc:	08002c25 	.word	0x08002c25
 8002b00:	08002ab1 	.word	0x08002ab1
 8002b04:	08002ab1 	.word	0x08002ab1
 8002b08:	08002c65 	.word	0x08002c65
 8002b0c:	08002ab1 	.word	0x08002ab1
 8002b10:	08002b65 	.word	0x08002b65
 8002b14:	08002ab1 	.word	0x08002ab1
 8002b18:	08002ab1 	.word	0x08002ab1
 8002b1c:	08002c2d 	.word	0x08002c2d
 8002b20:	680b      	ldr	r3, [r1, #0]
 8002b22:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	600a      	str	r2, [r1, #0]
 8002b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0a4      	b.n	8002c7e <_printf_i+0x1f6>
 8002b34:	6825      	ldr	r5, [r4, #0]
 8002b36:	6808      	ldr	r0, [r1, #0]
 8002b38:	062e      	lsls	r6, r5, #24
 8002b3a:	f100 0304 	add.w	r3, r0, #4
 8002b3e:	d50a      	bpl.n	8002b56 <_printf_i+0xce>
 8002b40:	6805      	ldr	r5, [r0, #0]
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	2d00      	cmp	r5, #0
 8002b46:	da03      	bge.n	8002b50 <_printf_i+0xc8>
 8002b48:	232d      	movs	r3, #45	; 0x2d
 8002b4a:	426d      	negs	r5, r5
 8002b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b50:	230a      	movs	r3, #10
 8002b52:	485e      	ldr	r0, [pc, #376]	; (8002ccc <_printf_i+0x244>)
 8002b54:	e019      	b.n	8002b8a <_printf_i+0x102>
 8002b56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b5a:	6805      	ldr	r5, [r0, #0]
 8002b5c:	600b      	str	r3, [r1, #0]
 8002b5e:	bf18      	it	ne
 8002b60:	b22d      	sxthne	r5, r5
 8002b62:	e7ef      	b.n	8002b44 <_printf_i+0xbc>
 8002b64:	680b      	ldr	r3, [r1, #0]
 8002b66:	6825      	ldr	r5, [r4, #0]
 8002b68:	1d18      	adds	r0, r3, #4
 8002b6a:	6008      	str	r0, [r1, #0]
 8002b6c:	0628      	lsls	r0, r5, #24
 8002b6e:	d501      	bpl.n	8002b74 <_printf_i+0xec>
 8002b70:	681d      	ldr	r5, [r3, #0]
 8002b72:	e002      	b.n	8002b7a <_printf_i+0xf2>
 8002b74:	0669      	lsls	r1, r5, #25
 8002b76:	d5fb      	bpl.n	8002b70 <_printf_i+0xe8>
 8002b78:	881d      	ldrh	r5, [r3, #0]
 8002b7a:	2f6f      	cmp	r7, #111	; 0x6f
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2308      	moveq	r3, #8
 8002b80:	230a      	movne	r3, #10
 8002b82:	4852      	ldr	r0, [pc, #328]	; (8002ccc <_printf_i+0x244>)
 8002b84:	2100      	movs	r1, #0
 8002b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b8a:	6866      	ldr	r6, [r4, #4]
 8002b8c:	2e00      	cmp	r6, #0
 8002b8e:	bfa8      	it	ge
 8002b90:	6821      	ldrge	r1, [r4, #0]
 8002b92:	60a6      	str	r6, [r4, #8]
 8002b94:	bfa4      	itt	ge
 8002b96:	f021 0104 	bicge.w	r1, r1, #4
 8002b9a:	6021      	strge	r1, [r4, #0]
 8002b9c:	b90d      	cbnz	r5, 8002ba2 <_printf_i+0x11a>
 8002b9e:	2e00      	cmp	r6, #0
 8002ba0:	d04d      	beq.n	8002c3e <_printf_i+0x1b6>
 8002ba2:	4616      	mov	r6, r2
 8002ba4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ba8:	fb03 5711 	mls	r7, r3, r1, r5
 8002bac:	5dc7      	ldrb	r7, [r0, r7]
 8002bae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bb2:	462f      	mov	r7, r5
 8002bb4:	42bb      	cmp	r3, r7
 8002bb6:	460d      	mov	r5, r1
 8002bb8:	d9f4      	bls.n	8002ba4 <_printf_i+0x11c>
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d10b      	bne.n	8002bd6 <_printf_i+0x14e>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	07df      	lsls	r7, r3, #31
 8002bc2:	d508      	bpl.n	8002bd6 <_printf_i+0x14e>
 8002bc4:	6923      	ldr	r3, [r4, #16]
 8002bc6:	6861      	ldr	r1, [r4, #4]
 8002bc8:	4299      	cmp	r1, r3
 8002bca:	bfde      	ittt	le
 8002bcc:	2330      	movle	r3, #48	; 0x30
 8002bce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bd6:	1b92      	subs	r2, r2, r6
 8002bd8:	6122      	str	r2, [r4, #16]
 8002bda:	464b      	mov	r3, r9
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4640      	mov	r0, r8
 8002be0:	f8cd a000 	str.w	sl, [sp]
 8002be4:	aa03      	add	r2, sp, #12
 8002be6:	f7ff fedf 	bl	80029a8 <_printf_common>
 8002bea:	3001      	adds	r0, #1
 8002bec:	d14c      	bne.n	8002c88 <_printf_i+0x200>
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	b004      	add	sp, #16
 8002bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf8:	4834      	ldr	r0, [pc, #208]	; (8002ccc <_printf_i+0x244>)
 8002bfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bfe:	680e      	ldr	r6, [r1, #0]
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	f856 5b04 	ldr.w	r5, [r6], #4
 8002c06:	061f      	lsls	r7, r3, #24
 8002c08:	600e      	str	r6, [r1, #0]
 8002c0a:	d514      	bpl.n	8002c36 <_printf_i+0x1ae>
 8002c0c:	07d9      	lsls	r1, r3, #31
 8002c0e:	bf44      	itt	mi
 8002c10:	f043 0320 	orrmi.w	r3, r3, #32
 8002c14:	6023      	strmi	r3, [r4, #0]
 8002c16:	b91d      	cbnz	r5, 8002c20 <_printf_i+0x198>
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f023 0320 	bic.w	r3, r3, #32
 8002c1e:	6023      	str	r3, [r4, #0]
 8002c20:	2310      	movs	r3, #16
 8002c22:	e7af      	b.n	8002b84 <_printf_i+0xfc>
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	2378      	movs	r3, #120	; 0x78
 8002c2e:	4828      	ldr	r0, [pc, #160]	; (8002cd0 <_printf_i+0x248>)
 8002c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c34:	e7e3      	b.n	8002bfe <_printf_i+0x176>
 8002c36:	065e      	lsls	r6, r3, #25
 8002c38:	bf48      	it	mi
 8002c3a:	b2ad      	uxthmi	r5, r5
 8002c3c:	e7e6      	b.n	8002c0c <_printf_i+0x184>
 8002c3e:	4616      	mov	r6, r2
 8002c40:	e7bb      	b.n	8002bba <_printf_i+0x132>
 8002c42:	680b      	ldr	r3, [r1, #0]
 8002c44:	6826      	ldr	r6, [r4, #0]
 8002c46:	1d1d      	adds	r5, r3, #4
 8002c48:	6960      	ldr	r0, [r4, #20]
 8002c4a:	600d      	str	r5, [r1, #0]
 8002c4c:	0635      	lsls	r5, r6, #24
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	d501      	bpl.n	8002c56 <_printf_i+0x1ce>
 8002c52:	6018      	str	r0, [r3, #0]
 8002c54:	e002      	b.n	8002c5c <_printf_i+0x1d4>
 8002c56:	0671      	lsls	r1, r6, #25
 8002c58:	d5fb      	bpl.n	8002c52 <_printf_i+0x1ca>
 8002c5a:	8018      	strh	r0, [r3, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	4616      	mov	r6, r2
 8002c60:	6123      	str	r3, [r4, #16]
 8002c62:	e7ba      	b.n	8002bda <_printf_i+0x152>
 8002c64:	680b      	ldr	r3, [r1, #0]
 8002c66:	1d1a      	adds	r2, r3, #4
 8002c68:	600a      	str	r2, [r1, #0]
 8002c6a:	681e      	ldr	r6, [r3, #0]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4630      	mov	r0, r6
 8002c70:	6862      	ldr	r2, [r4, #4]
 8002c72:	f000 f82f 	bl	8002cd4 <memchr>
 8002c76:	b108      	cbz	r0, 8002c7c <_printf_i+0x1f4>
 8002c78:	1b80      	subs	r0, r0, r6
 8002c7a:	6060      	str	r0, [r4, #4]
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	6123      	str	r3, [r4, #16]
 8002c80:	2300      	movs	r3, #0
 8002c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c86:	e7a8      	b.n	8002bda <_printf_i+0x152>
 8002c88:	4632      	mov	r2, r6
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	4640      	mov	r0, r8
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	47d0      	blx	sl
 8002c92:	3001      	adds	r0, #1
 8002c94:	d0ab      	beq.n	8002bee <_printf_i+0x166>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	079b      	lsls	r3, r3, #30
 8002c9a:	d413      	bmi.n	8002cc4 <_printf_i+0x23c>
 8002c9c:	68e0      	ldr	r0, [r4, #12]
 8002c9e:	9b03      	ldr	r3, [sp, #12]
 8002ca0:	4298      	cmp	r0, r3
 8002ca2:	bfb8      	it	lt
 8002ca4:	4618      	movlt	r0, r3
 8002ca6:	e7a4      	b.n	8002bf2 <_printf_i+0x16a>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	4632      	mov	r2, r6
 8002cac:	4649      	mov	r1, r9
 8002cae:	4640      	mov	r0, r8
 8002cb0:	47d0      	blx	sl
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d09b      	beq.n	8002bee <_printf_i+0x166>
 8002cb6:	3501      	adds	r5, #1
 8002cb8:	68e3      	ldr	r3, [r4, #12]
 8002cba:	9903      	ldr	r1, [sp, #12]
 8002cbc:	1a5b      	subs	r3, r3, r1
 8002cbe:	42ab      	cmp	r3, r5
 8002cc0:	dcf2      	bgt.n	8002ca8 <_printf_i+0x220>
 8002cc2:	e7eb      	b.n	8002c9c <_printf_i+0x214>
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	f104 0619 	add.w	r6, r4, #25
 8002cca:	e7f5      	b.n	8002cb8 <_printf_i+0x230>
 8002ccc:	08002f99 	.word	0x08002f99
 8002cd0:	08002faa 	.word	0x08002faa

08002cd4 <memchr>:
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b510      	push	{r4, lr}
 8002cd8:	b2c9      	uxtb	r1, r1
 8002cda:	4402      	add	r2, r0
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	d101      	bne.n	8002ce6 <memchr+0x12>
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e003      	b.n	8002cee <memchr+0x1a>
 8002ce6:	7804      	ldrb	r4, [r0, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	428c      	cmp	r4, r1
 8002cec:	d1f6      	bne.n	8002cdc <memchr+0x8>
 8002cee:	bd10      	pop	{r4, pc}

08002cf0 <memcpy>:
 8002cf0:	440a      	add	r2, r1
 8002cf2:	4291      	cmp	r1, r2
 8002cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cf8:	d100      	bne.n	8002cfc <memcpy+0xc>
 8002cfa:	4770      	bx	lr
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d02:	4291      	cmp	r1, r2
 8002d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d08:	d1f9      	bne.n	8002cfe <memcpy+0xe>
 8002d0a:	bd10      	pop	{r4, pc}

08002d0c <memmove>:
 8002d0c:	4288      	cmp	r0, r1
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	eb01 0402 	add.w	r4, r1, r2
 8002d14:	d902      	bls.n	8002d1c <memmove+0x10>
 8002d16:	4284      	cmp	r4, r0
 8002d18:	4623      	mov	r3, r4
 8002d1a:	d807      	bhi.n	8002d2c <memmove+0x20>
 8002d1c:	1e43      	subs	r3, r0, #1
 8002d1e:	42a1      	cmp	r1, r4
 8002d20:	d008      	beq.n	8002d34 <memmove+0x28>
 8002d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d2a:	e7f8      	b.n	8002d1e <memmove+0x12>
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	4402      	add	r2, r0
 8002d30:	428a      	cmp	r2, r1
 8002d32:	d100      	bne.n	8002d36 <memmove+0x2a>
 8002d34:	bd10      	pop	{r4, pc}
 8002d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d3e:	e7f7      	b.n	8002d30 <memmove+0x24>

08002d40 <_free_r>:
 8002d40:	b538      	push	{r3, r4, r5, lr}
 8002d42:	4605      	mov	r5, r0
 8002d44:	2900      	cmp	r1, #0
 8002d46:	d043      	beq.n	8002dd0 <_free_r+0x90>
 8002d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d4c:	1f0c      	subs	r4, r1, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bfb8      	it	lt
 8002d52:	18e4      	addlt	r4, r4, r3
 8002d54:	f000 f8d0 	bl	8002ef8 <__malloc_lock>
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <_free_r+0x94>)
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	b933      	cbnz	r3, 8002d6e <_free_r+0x2e>
 8002d60:	6063      	str	r3, [r4, #4]
 8002d62:	6014      	str	r4, [r2, #0]
 8002d64:	4628      	mov	r0, r5
 8002d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d6a:	f000 b8cb 	b.w	8002f04 <__malloc_unlock>
 8002d6e:	42a3      	cmp	r3, r4
 8002d70:	d90a      	bls.n	8002d88 <_free_r+0x48>
 8002d72:	6821      	ldr	r1, [r4, #0]
 8002d74:	1862      	adds	r2, r4, r1
 8002d76:	4293      	cmp	r3, r2
 8002d78:	bf01      	itttt	eq
 8002d7a:	681a      	ldreq	r2, [r3, #0]
 8002d7c:	685b      	ldreq	r3, [r3, #4]
 8002d7e:	1852      	addeq	r2, r2, r1
 8002d80:	6022      	streq	r2, [r4, #0]
 8002d82:	6063      	str	r3, [r4, #4]
 8002d84:	6004      	str	r4, [r0, #0]
 8002d86:	e7ed      	b.n	8002d64 <_free_r+0x24>
 8002d88:	461a      	mov	r2, r3
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	b10b      	cbz	r3, 8002d92 <_free_r+0x52>
 8002d8e:	42a3      	cmp	r3, r4
 8002d90:	d9fa      	bls.n	8002d88 <_free_r+0x48>
 8002d92:	6811      	ldr	r1, [r2, #0]
 8002d94:	1850      	adds	r0, r2, r1
 8002d96:	42a0      	cmp	r0, r4
 8002d98:	d10b      	bne.n	8002db2 <_free_r+0x72>
 8002d9a:	6820      	ldr	r0, [r4, #0]
 8002d9c:	4401      	add	r1, r0
 8002d9e:	1850      	adds	r0, r2, r1
 8002da0:	4283      	cmp	r3, r0
 8002da2:	6011      	str	r1, [r2, #0]
 8002da4:	d1de      	bne.n	8002d64 <_free_r+0x24>
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4401      	add	r1, r0
 8002dac:	6011      	str	r1, [r2, #0]
 8002dae:	6053      	str	r3, [r2, #4]
 8002db0:	e7d8      	b.n	8002d64 <_free_r+0x24>
 8002db2:	d902      	bls.n	8002dba <_free_r+0x7a>
 8002db4:	230c      	movs	r3, #12
 8002db6:	602b      	str	r3, [r5, #0]
 8002db8:	e7d4      	b.n	8002d64 <_free_r+0x24>
 8002dba:	6820      	ldr	r0, [r4, #0]
 8002dbc:	1821      	adds	r1, r4, r0
 8002dbe:	428b      	cmp	r3, r1
 8002dc0:	bf01      	itttt	eq
 8002dc2:	6819      	ldreq	r1, [r3, #0]
 8002dc4:	685b      	ldreq	r3, [r3, #4]
 8002dc6:	1809      	addeq	r1, r1, r0
 8002dc8:	6021      	streq	r1, [r4, #0]
 8002dca:	6063      	str	r3, [r4, #4]
 8002dcc:	6054      	str	r4, [r2, #4]
 8002dce:	e7c9      	b.n	8002d64 <_free_r+0x24>
 8002dd0:	bd38      	pop	{r3, r4, r5, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200000a8 	.word	0x200000a8

08002dd8 <_malloc_r>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	1ccd      	adds	r5, r1, #3
 8002ddc:	f025 0503 	bic.w	r5, r5, #3
 8002de0:	3508      	adds	r5, #8
 8002de2:	2d0c      	cmp	r5, #12
 8002de4:	bf38      	it	cc
 8002de6:	250c      	movcc	r5, #12
 8002de8:	2d00      	cmp	r5, #0
 8002dea:	4606      	mov	r6, r0
 8002dec:	db01      	blt.n	8002df2 <_malloc_r+0x1a>
 8002dee:	42a9      	cmp	r1, r5
 8002df0:	d903      	bls.n	8002dfa <_malloc_r+0x22>
 8002df2:	230c      	movs	r3, #12
 8002df4:	6033      	str	r3, [r6, #0]
 8002df6:	2000      	movs	r0, #0
 8002df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dfa:	f000 f87d 	bl	8002ef8 <__malloc_lock>
 8002dfe:	4921      	ldr	r1, [pc, #132]	; (8002e84 <_malloc_r+0xac>)
 8002e00:	680a      	ldr	r2, [r1, #0]
 8002e02:	4614      	mov	r4, r2
 8002e04:	b99c      	cbnz	r4, 8002e2e <_malloc_r+0x56>
 8002e06:	4f20      	ldr	r7, [pc, #128]	; (8002e88 <_malloc_r+0xb0>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b923      	cbnz	r3, 8002e16 <_malloc_r+0x3e>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f000 f862 	bl	8002ed8 <_sbrk_r>
 8002e14:	6038      	str	r0, [r7, #0]
 8002e16:	4629      	mov	r1, r5
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f000 f85d 	bl	8002ed8 <_sbrk_r>
 8002e1e:	1c43      	adds	r3, r0, #1
 8002e20:	d123      	bne.n	8002e6a <_malloc_r+0x92>
 8002e22:	230c      	movs	r3, #12
 8002e24:	4630      	mov	r0, r6
 8002e26:	6033      	str	r3, [r6, #0]
 8002e28:	f000 f86c 	bl	8002f04 <__malloc_unlock>
 8002e2c:	e7e3      	b.n	8002df6 <_malloc_r+0x1e>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	1b5b      	subs	r3, r3, r5
 8002e32:	d417      	bmi.n	8002e64 <_malloc_r+0x8c>
 8002e34:	2b0b      	cmp	r3, #11
 8002e36:	d903      	bls.n	8002e40 <_malloc_r+0x68>
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	441c      	add	r4, r3
 8002e3c:	6025      	str	r5, [r4, #0]
 8002e3e:	e004      	b.n	8002e4a <_malloc_r+0x72>
 8002e40:	6863      	ldr	r3, [r4, #4]
 8002e42:	42a2      	cmp	r2, r4
 8002e44:	bf0c      	ite	eq
 8002e46:	600b      	streq	r3, [r1, #0]
 8002e48:	6053      	strne	r3, [r2, #4]
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f000 f85a 	bl	8002f04 <__malloc_unlock>
 8002e50:	f104 000b 	add.w	r0, r4, #11
 8002e54:	1d23      	adds	r3, r4, #4
 8002e56:	f020 0007 	bic.w	r0, r0, #7
 8002e5a:	1ac2      	subs	r2, r0, r3
 8002e5c:	d0cc      	beq.n	8002df8 <_malloc_r+0x20>
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	50a3      	str	r3, [r4, r2]
 8002e62:	e7c9      	b.n	8002df8 <_malloc_r+0x20>
 8002e64:	4622      	mov	r2, r4
 8002e66:	6864      	ldr	r4, [r4, #4]
 8002e68:	e7cc      	b.n	8002e04 <_malloc_r+0x2c>
 8002e6a:	1cc4      	adds	r4, r0, #3
 8002e6c:	f024 0403 	bic.w	r4, r4, #3
 8002e70:	42a0      	cmp	r0, r4
 8002e72:	d0e3      	beq.n	8002e3c <_malloc_r+0x64>
 8002e74:	1a21      	subs	r1, r4, r0
 8002e76:	4630      	mov	r0, r6
 8002e78:	f000 f82e 	bl	8002ed8 <_sbrk_r>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d1dd      	bne.n	8002e3c <_malloc_r+0x64>
 8002e80:	e7cf      	b.n	8002e22 <_malloc_r+0x4a>
 8002e82:	bf00      	nop
 8002e84:	200000a8 	.word	0x200000a8
 8002e88:	200000ac 	.word	0x200000ac

08002e8c <_realloc_r>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	4607      	mov	r7, r0
 8002e90:	4614      	mov	r4, r2
 8002e92:	460e      	mov	r6, r1
 8002e94:	b921      	cbnz	r1, 8002ea0 <_realloc_r+0x14>
 8002e96:	4611      	mov	r1, r2
 8002e98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e9c:	f7ff bf9c 	b.w	8002dd8 <_malloc_r>
 8002ea0:	b922      	cbnz	r2, 8002eac <_realloc_r+0x20>
 8002ea2:	f7ff ff4d 	bl	8002d40 <_free_r>
 8002ea6:	4625      	mov	r5, r4
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eac:	f000 f830 	bl	8002f10 <_malloc_usable_size_r>
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d20f      	bcs.n	8002ed4 <_realloc_r+0x48>
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	f7ff ff8e 	bl	8002dd8 <_malloc_r>
 8002ebc:	4605      	mov	r5, r0
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d0f2      	beq.n	8002ea8 <_realloc_r+0x1c>
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	f7ff ff13 	bl	8002cf0 <memcpy>
 8002eca:	4631      	mov	r1, r6
 8002ecc:	4638      	mov	r0, r7
 8002ece:	f7ff ff37 	bl	8002d40 <_free_r>
 8002ed2:	e7e9      	b.n	8002ea8 <_realloc_r+0x1c>
 8002ed4:	4635      	mov	r5, r6
 8002ed6:	e7e7      	b.n	8002ea8 <_realloc_r+0x1c>

08002ed8 <_sbrk_r>:
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	2300      	movs	r3, #0
 8002edc:	4d05      	ldr	r5, [pc, #20]	; (8002ef4 <_sbrk_r+0x1c>)
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	f7fd fd80 	bl	80009e8 <_sbrk>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d102      	bne.n	8002ef2 <_sbrk_r+0x1a>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b103      	cbz	r3, 8002ef2 <_sbrk_r+0x1a>
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	2000012c 	.word	0x2000012c

08002ef8 <__malloc_lock>:
 8002ef8:	4801      	ldr	r0, [pc, #4]	; (8002f00 <__malloc_lock+0x8>)
 8002efa:	f000 b811 	b.w	8002f20 <__retarget_lock_acquire_recursive>
 8002efe:	bf00      	nop
 8002f00:	20000134 	.word	0x20000134

08002f04 <__malloc_unlock>:
 8002f04:	4801      	ldr	r0, [pc, #4]	; (8002f0c <__malloc_unlock+0x8>)
 8002f06:	f000 b80c 	b.w	8002f22 <__retarget_lock_release_recursive>
 8002f0a:	bf00      	nop
 8002f0c:	20000134 	.word	0x20000134

08002f10 <_malloc_usable_size_r>:
 8002f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f14:	1f18      	subs	r0, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bfbc      	itt	lt
 8002f1a:	580b      	ldrlt	r3, [r1, r0]
 8002f1c:	18c0      	addlt	r0, r0, r3
 8002f1e:	4770      	bx	lr

08002f20 <__retarget_lock_acquire_recursive>:
 8002f20:	4770      	bx	lr

08002f22 <__retarget_lock_release_recursive>:
 8002f22:	4770      	bx	lr

08002f24 <_init>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr

08002f30 <_fini>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr
