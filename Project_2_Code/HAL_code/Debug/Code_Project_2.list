
Code_Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004470  08004470  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004470  08004470  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004470  08004470  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000088  08004500  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004500  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c659  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5d  00000000  00000000  0002c70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001833a  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c374  00000000  00000000  00047dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4c1  00000000  00000000  0005414e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df60f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b8  00000000  00000000  000df664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	080043c8 	.word	0x080043c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	080043c8 	.word	0x080043c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <__aeabi_frsub>:
 800076c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000770:	e002      	b.n	8000778 <__addsf3>
 8000772:	bf00      	nop

08000774 <__aeabi_fsub>:
 8000774:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000778 <__addsf3>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	bf1f      	itttt	ne
 800077c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000780:	ea92 0f03 	teqne	r2, r3
 8000784:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000788:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078c:	d06a      	beq.n	8000864 <__addsf3+0xec>
 800078e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000792:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000796:	bfc1      	itttt	gt
 8000798:	18d2      	addgt	r2, r2, r3
 800079a:	4041      	eorgt	r1, r0
 800079c:	4048      	eorgt	r0, r1
 800079e:	4041      	eorgt	r1, r0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	2b19      	cmp	r3, #25
 80007a6:	bf88      	it	hi
 80007a8:	4770      	bxhi	lr
 80007aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4240      	negne	r0, r0
 80007ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4249      	negne	r1, r1
 80007ca:	ea92 0f03 	teq	r2, r3
 80007ce:	d03f      	beq.n	8000850 <__addsf3+0xd8>
 80007d0:	f1a2 0201 	sub.w	r2, r2, #1
 80007d4:	fa41 fc03 	asr.w	ip, r1, r3
 80007d8:	eb10 000c 	adds.w	r0, r0, ip
 80007dc:	f1c3 0320 	rsb	r3, r3, #32
 80007e0:	fa01 f103 	lsl.w	r1, r1, r3
 80007e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__addsf3+0x78>
 80007ea:	4249      	negs	r1, r1
 80007ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007f4:	d313      	bcc.n	800081e <__addsf3+0xa6>
 80007f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007fa:	d306      	bcc.n	800080a <__addsf3+0x92>
 80007fc:	0840      	lsrs	r0, r0, #1
 80007fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000802:	f102 0201 	add.w	r2, r2, #1
 8000806:	2afe      	cmp	r2, #254	; 0xfe
 8000808:	d251      	bcs.n	80008ae <__addsf3+0x136>
 800080a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800080e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000812:	bf08      	it	eq
 8000814:	f020 0001 	biceq.w	r0, r0, #1
 8000818:	ea40 0003 	orr.w	r0, r0, r3
 800081c:	4770      	bx	lr
 800081e:	0049      	lsls	r1, r1, #1
 8000820:	eb40 0000 	adc.w	r0, r0, r0
 8000824:	3a01      	subs	r2, #1
 8000826:	bf28      	it	cs
 8000828:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800082c:	d2ed      	bcs.n	800080a <__addsf3+0x92>
 800082e:	fab0 fc80 	clz	ip, r0
 8000832:	f1ac 0c08 	sub.w	ip, ip, #8
 8000836:	ebb2 020c 	subs.w	r2, r2, ip
 800083a:	fa00 f00c 	lsl.w	r0, r0, ip
 800083e:	bfaa      	itet	ge
 8000840:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000844:	4252      	neglt	r2, r2
 8000846:	4318      	orrge	r0, r3
 8000848:	bfbc      	itt	lt
 800084a:	40d0      	lsrlt	r0, r2
 800084c:	4318      	orrlt	r0, r3
 800084e:	4770      	bx	lr
 8000850:	f092 0f00 	teq	r2, #0
 8000854:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000858:	bf06      	itte	eq
 800085a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800085e:	3201      	addeq	r2, #1
 8000860:	3b01      	subne	r3, #1
 8000862:	e7b5      	b.n	80007d0 <__addsf3+0x58>
 8000864:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000868:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800086c:	bf18      	it	ne
 800086e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000872:	d021      	beq.n	80008b8 <__addsf3+0x140>
 8000874:	ea92 0f03 	teq	r2, r3
 8000878:	d004      	beq.n	8000884 <__addsf3+0x10c>
 800087a:	f092 0f00 	teq	r2, #0
 800087e:	bf08      	it	eq
 8000880:	4608      	moveq	r0, r1
 8000882:	4770      	bx	lr
 8000884:	ea90 0f01 	teq	r0, r1
 8000888:	bf1c      	itt	ne
 800088a:	2000      	movne	r0, #0
 800088c:	4770      	bxne	lr
 800088e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000892:	d104      	bne.n	800089e <__addsf3+0x126>
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	bf28      	it	cs
 8000898:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008a2:	bf3c      	itt	cc
 80008a4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008a8:	4770      	bxcc	lr
 80008aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008ae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008b6:	4770      	bx	lr
 80008b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008bc:	bf16      	itet	ne
 80008be:	4608      	movne	r0, r1
 80008c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c4:	4601      	movne	r1, r0
 80008c6:	0242      	lsls	r2, r0, #9
 80008c8:	bf06      	itte	eq
 80008ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ce:	ea90 0f01 	teqeq	r0, r1
 80008d2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_ui2f>:
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e004      	b.n	80008e8 <__aeabi_i2f+0x8>
 80008de:	bf00      	nop

080008e0 <__aeabi_i2f>:
 80008e0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008e4:	bf48      	it	mi
 80008e6:	4240      	negmi	r0, r0
 80008e8:	ea5f 0c00 	movs.w	ip, r0
 80008ec:	bf08      	it	eq
 80008ee:	4770      	bxeq	lr
 80008f0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008f4:	4601      	mov	r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	e01c      	b.n	8000936 <__aeabi_l2f+0x2a>

080008fc <__aeabi_ul2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e00a      	b.n	8000920 <__aeabi_l2f+0x14>
 800090a:	bf00      	nop

0800090c <__aeabi_l2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000918:	d502      	bpl.n	8000920 <__aeabi_l2f+0x14>
 800091a:	4240      	negs	r0, r0
 800091c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000920:	ea5f 0c01 	movs.w	ip, r1
 8000924:	bf02      	ittt	eq
 8000926:	4684      	moveq	ip, r0
 8000928:	4601      	moveq	r1, r0
 800092a:	2000      	moveq	r0, #0
 800092c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000930:	bf08      	it	eq
 8000932:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000936:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800093a:	fabc f28c 	clz	r2, ip
 800093e:	3a08      	subs	r2, #8
 8000940:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000944:	db10      	blt.n	8000968 <__aeabi_l2f+0x5c>
 8000946:	fa01 fc02 	lsl.w	ip, r1, r2
 800094a:	4463      	add	r3, ip
 800094c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000950:	f1c2 0220 	rsb	r2, r2, #32
 8000954:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000958:	fa20 f202 	lsr.w	r2, r0, r2
 800095c:	eb43 0002 	adc.w	r0, r3, r2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f102 0220 	add.w	r2, r2, #32
 800096c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000970:	f1c2 0220 	rsb	r2, r2, #32
 8000974:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000978:	fa21 f202 	lsr.w	r2, r1, r2
 800097c:	eb43 0002 	adc.w	r0, r3, r2
 8000980:	bf08      	it	eq
 8000982:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000986:	4770      	bx	lr

08000988 <__aeabi_fmul>:
 8000988:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800098c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000990:	bf1e      	ittt	ne
 8000992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000996:	ea92 0f0c 	teqne	r2, ip
 800099a:	ea93 0f0c 	teqne	r3, ip
 800099e:	d06f      	beq.n	8000a80 <__aeabi_fmul+0xf8>
 80009a0:	441a      	add	r2, r3
 80009a2:	ea80 0c01 	eor.w	ip, r0, r1
 80009a6:	0240      	lsls	r0, r0, #9
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ae:	d01e      	beq.n	80009ee <__aeabi_fmul+0x66>
 80009b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009bc:	fba0 3101 	umull	r3, r1, r0, r1
 80009c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009c8:	bf3e      	ittt	cc
 80009ca:	0049      	lslcc	r1, r1, #1
 80009cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	ea40 0001 	orr.w	r0, r0, r1
 80009d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009da:	2afd      	cmp	r2, #253	; 0xfd
 80009dc:	d81d      	bhi.n	8000a1a <__aeabi_fmul+0x92>
 80009de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	4770      	bx	lr
 80009ee:	f090 0f00 	teq	r0, #0
 80009f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f6:	bf08      	it	eq
 80009f8:	0249      	lsleq	r1, r1, #9
 80009fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a02:	3a7f      	subs	r2, #127	; 0x7f
 8000a04:	bfc2      	ittt	gt
 8000a06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0e:	4770      	bxgt	lr
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	dc5d      	bgt.n	8000ad8 <__aeabi_fmul+0x150>
 8000a1c:	f112 0f19 	cmn.w	r2, #25
 8000a20:	bfdc      	itt	le
 8000a22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a26:	4770      	bxle	lr
 8000a28:	f1c2 0200 	rsb	r2, r2, #0
 8000a2c:	0041      	lsls	r1, r0, #1
 8000a2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a32:	f1c2 0220 	rsb	r2, r2, #32
 8000a36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3e:	f140 0000 	adc.w	r0, r0, #0
 8000a42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a46:	bf08      	it	eq
 8000a48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4c:	4770      	bx	lr
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fmul+0xce>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fmul+0xe6>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e78f      	b.n	80009a0 <__aeabi_fmul+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	bf18      	it	ne
 8000a8a:	ea93 0f0c 	teqne	r3, ip
 8000a8e:	d00a      	beq.n	8000aa6 <__aeabi_fmul+0x11e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a9a:	d1d8      	bne.n	8000a4e <__aeabi_fmul+0xc6>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f090 0f00 	teq	r0, #0
 8000aaa:	bf17      	itett	ne
 8000aac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	f091 0f00 	teqne	r1, #0
 8000ab6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aba:	d014      	beq.n	8000ae6 <__aeabi_fmul+0x15e>
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_fmul+0x13e>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d10f      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ac6:	ea93 0f0c 	teq	r3, ip
 8000aca:	d103      	bne.n	8000ad4 <__aeabi_fmul+0x14c>
 8000acc:	024b      	lsls	r3, r1, #9
 8000ace:	bf18      	it	ne
 8000ad0:	4608      	movne	r0, r1
 8000ad2:	d108      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ad4:	ea80 0001 	eor.w	r0, r0, r1
 8000ad8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_fdiv>:
 8000af0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af8:	bf1e      	ittt	ne
 8000afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afe:	ea92 0f0c 	teqne	r2, ip
 8000b02:	ea93 0f0c 	teqne	r3, ip
 8000b06:	d069      	beq.n	8000bdc <__aeabi_fdiv+0xec>
 8000b08:	eba2 0203 	sub.w	r2, r2, r3
 8000b0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b10:	0249      	lsls	r1, r1, #9
 8000b12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b16:	d037      	beq.n	8000b88 <__aeabi_fdiv+0x98>
 8000b18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf38      	it	cc
 8000b2c:	005b      	lslcc	r3, r3, #1
 8000b2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf24      	itt	cs
 8000b3a:	1a5b      	subcs	r3, r3, r1
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b44:	bf24      	itt	cs
 8000b46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b52:	bf24      	itt	cs
 8000b54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b60:	bf24      	itt	cs
 8000b62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b72:	d1e0      	bne.n	8000b36 <__aeabi_fdiv+0x46>
 8000b74:	2afd      	cmp	r2, #253	; 0xfd
 8000b76:	f63f af50 	bhi.w	8000a1a <__aeabi_fmul+0x92>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b90:	327f      	adds	r2, #127	; 0x7f
 8000b92:	bfc2      	ittt	gt
 8000b94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9c:	4770      	bxgt	lr
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	e737      	b.n	8000a1a <__aeabi_fmul+0x92>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bb2:	bf02      	ittt	eq
 8000bb4:	0040      	lsleq	r0, r0, #1
 8000bb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bba:	3a01      	subeq	r2, #1
 8000bbc:	d0f9      	beq.n	8000bb2 <__aeabi_fdiv+0xc2>
 8000bbe:	ea40 000c 	orr.w	r0, r0, ip
 8000bc2:	f093 0f00 	teq	r3, #0
 8000bc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0049      	lsleq	r1, r1, #1
 8000bce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bd2:	3b01      	subeq	r3, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fdiv+0xda>
 8000bd6:	ea41 010c 	orr.w	r1, r1, ip
 8000bda:	e795      	b.n	8000b08 <__aeabi_fdiv+0x18>
 8000bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be0:	ea92 0f0c 	teq	r2, ip
 8000be4:	d108      	bne.n	8000bf8 <__aeabi_fdiv+0x108>
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	f47f af7d 	bne.w	8000ae6 <__aeabi_fmul+0x15e>
 8000bec:	ea93 0f0c 	teq	r3, ip
 8000bf0:	f47f af70 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000bf8:	ea93 0f0c 	teq	r3, ip
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_fdiv+0x118>
 8000bfe:	024b      	lsls	r3, r1, #9
 8000c00:	f43f af4c 	beq.w	8000a9c <__aeabi_fmul+0x114>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e76e      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c12:	d1ca      	bne.n	8000baa <__aeabi_fdiv+0xba>
 8000c14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c18:	f47f af5c 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000c1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	f47f af3c 	bne.w	8000a9c <__aeabi_fmul+0x114>
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c26:	bf00      	nop

08000c28 <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	    Lcd_configure();
 8000c2c:	f000 f8ba 	bl	8000da4 <Lcd_configure>
			lcd_write_command(0x33);
 8000c30:	2033      	movs	r0, #51	; 0x33
 8000c32:	f000 f95b 	bl	8000eec <lcd_write_command>
			lcd_write_command(0x32);
 8000c36:	2032      	movs	r0, #50	; 0x32
 8000c38:	f000 f958 	bl	8000eec <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8000c3c:	2028      	movs	r0, #40	; 0x28
 8000c3e:	f000 f955 	bl	8000eec <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 f952 	bl	8000eec <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000c48:	200c      	movs	r0, #12
 8000c4a:	f000 f94f 	bl	8000eec <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 8000c4e:	2006      	movs	r0, #6
 8000c50:	f000 f94c 	bl	8000eec <lcd_write_command>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4906      	ldr	r1, [pc, #24]	; (8000c80 <Lcd_write_int+0x28>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 ff73 	bl	8003b54 <siprintf>
	Lcd_write_string(buffer);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f806 	bl	8000c84 <Lcd_write_string>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	080043e0 	.word	0x080043e0

08000c84 <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e009      	b.n	8000ca6 <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f946 	bl	8000f2c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	7bfc      	ldrb	r4, [r7, #15]
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fa51 	bl	8000150 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	d3ee      	bcc.n	8000c92 <Lcd_write_string+0xe>
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}

08000cbe <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d107      	bne.n	8000ce4 <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f905 	bl	8000eec <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 8000ce2:	e00a      	b.n	8000cfa <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	3340      	adds	r3, #64	; 0x40
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f8f9 	bl	8000eec <lcd_write_command>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <Lcd_display>:
/*****
** Display temperature, speed
******/

void Lcd_display(uint8_t temperatute, uint16_t speed)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	80bb      	strh	r3, [r7, #4]
	Lcd_gotoxy(0, 0);
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ffd1 	bl	8000cbe <Lcd_gotoxy>
	//write Temperature
	Lcd_write_string("Temp :");
 8000d1c:	481c      	ldr	r0, [pc, #112]	; (8000d90 <Lcd_display+0x8c>)
 8000d1e:	f7ff ffb1 	bl	8000c84 <Lcd_write_string>
	Lcd_gotoxy(6, 0);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2006      	movs	r0, #6
 8000d26:	f7ff ffca 	bl	8000cbe <Lcd_gotoxy>
	Lcd_write_string("      ");
 8000d2a:	481a      	ldr	r0, [pc, #104]	; (8000d94 <Lcd_display+0x90>)
 8000d2c:	f7ff ffaa 	bl	8000c84 <Lcd_write_string>
	Lcd_gotoxy(6, 0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2006      	movs	r0, #6
 8000d34:	f7ff ffc3 	bl	8000cbe <Lcd_gotoxy>
	Lcd_write_int((int)temperatute);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff8c 	bl	8000c58 <Lcd_write_int>
	Lcd_gotoxy(12, 0);
 8000d40:	2100      	movs	r1, #0
 8000d42:	200c      	movs	r0, #12
 8000d44:	f7ff ffbb 	bl	8000cbe <Lcd_gotoxy>
	Lcd_write_string("C");
 8000d48:	4813      	ldr	r0, [pc, #76]	; (8000d98 <Lcd_display+0x94>)
 8000d4a:	f7ff ff9b 	bl	8000c84 <Lcd_write_string>

	//write Speed
	Lcd_gotoxy(0, 1);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ffb4 	bl	8000cbe <Lcd_gotoxy>
	Lcd_write_string("Speed:");
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <Lcd_display+0x98>)
 8000d58:	f7ff ff94 	bl	8000c84 <Lcd_write_string>
	Lcd_gotoxy(6, 1);
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	2006      	movs	r0, #6
 8000d60:	f7ff ffad 	bl	8000cbe <Lcd_gotoxy>
	Lcd_write_string("      ");
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <Lcd_display+0x90>)
 8000d66:	f7ff ff8d 	bl	8000c84 <Lcd_write_string>
	Lcd_gotoxy(6, 1);
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2006      	movs	r0, #6
 8000d6e:	f7ff ffa6 	bl	8000cbe <Lcd_gotoxy>
	Lcd_write_int((int)speed);
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff6f 	bl	8000c58 <Lcd_write_int>
	Lcd_gotoxy(12, 1);
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	200c      	movs	r0, #12
 8000d7e:	f7ff ff9e 	bl	8000cbe <Lcd_gotoxy>
	Lcd_write_string("rpm");
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <Lcd_display+0x9c>)
 8000d84:	f7ff ff7e 	bl	8000c84 <Lcd_write_string>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	080043e4 	.word	0x080043e4
 8000d94:	080043ec 	.word	0x080043ec
 8000d98:	080043f4 	.word	0x080043f4
 8000d9c:	080043f8 	.word	0x080043f8
 8000da0:	08004400 	.word	0x08004400

08000da4 <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <Lcd_configure+0x140>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <Lcd_configure+0x140>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <Lcd_configure+0x140>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <Lcd_configure+0x140>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a43      	ldr	r2, [pc, #268]	; (8000ee4 <Lcd_configure+0x140>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <Lcd_configure+0x140>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <Lcd_configure+0x140>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a3d      	ldr	r2, [pc, #244]	; (8000ee4 <Lcd_configure+0x140>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <Lcd_configure+0x140>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 8000e00:	2301      	movs	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4834      	ldr	r0, [pc, #208]	; (8000ee8 <Lcd_configure+0x144>)
 8000e18:	f001 f98c 	bl	8002134 <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 8000e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	482c      	ldr	r0, [pc, #176]	; (8000ee8 <Lcd_configure+0x144>)
 8000e36:	f001 f97d 	bl	8002134 <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <Lcd_configure+0x144>)
 8000e54:	f001 f96e 	bl	8002134 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <Lcd_configure+0x144>)
 8000e60:	f001 fae2 	bl	8002428 <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481a      	ldr	r0, [pc, #104]	; (8000ee8 <Lcd_configure+0x144>)
 8000e7e:	f001 f959 	bl	8002134 <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <Lcd_configure+0x144>)
 8000e9c:	f001 f94a 	bl	8002134 <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 8000ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ea4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <Lcd_configure+0x144>)
 8000eba:	f001 f93b 	bl	8002134 <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 8000ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <Lcd_configure+0x144>)
 8000ed8:	f001 f92c 	bl	8002134 <HAL_GPIO_Init>
	
}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2101      	movs	r1, #1
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <lcd_write_command+0x3c>)
 8000efc:	f001 fa94 	bl	8002428 <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2104      	movs	r1, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f82f 	bl	8000f6c <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2104      	movs	r1, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f827 	bl	8000f6c <lcd_write>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40010c00 	.word	0x40010c00

08000f2c <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 8000f36:	2201      	movs	r2, #1
 8000f38:	2101      	movs	r1, #1
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <lcd_write_data+0x3c>)
 8000f3c:	f001 fa74 	bl	8002428 <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2104      	movs	r1, #4
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f80f 	bl	8000f6c <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2104      	movs	r1, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f807 	bl	8000f6c <lcd_write>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e023      	b.n	8000fca <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	fa42 f303 	asr.w	r3, r2, r3
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <lcd_write+0x8c>)
 8000f96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <lcd_write+0x90>)
 8000f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f001 fa3f 	bl	8002428 <HAL_GPIO_WritePin>
 8000faa:	e00b      	b.n	8000fc4 <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <lcd_write+0x8c>)
 8000fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <lcd_write+0x90>)
 8000fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f001 fa32 	bl	8002428 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d3d7      	bcc.n	8000f82 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <lcd_write+0x94>)
 8000fda:	f001 fa25 	bl	8002428 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fb74 	bl	80016cc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <lcd_write+0x94>)
 8000fec:	f001 fa1c 	bl	8002428 <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000010 	.word	0x20000010
 8001000:	40010c00 	.word	0x40010c00
 8001004:	00000000 	.word	0x00000000

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fafb 	bl	8001608 <HAL_Init>

  /* USER CODE BEGIN Init */
  Lcd_Init();
 8001012:	f7ff fe09 	bl	8000c28 <Lcd_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f861 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 f961 	bl	80012e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800101e:	f000 f8ad 	bl	800117c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001022:	f000 f8e9 	bl	80011f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Lcd_display(10, 1000);
 8001026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800102a:	200a      	movs	r0, #10
 800102c:	f7ff fe6a 	bl	8000d04 <Lcd_display>

  TIM2_PWM_Set_Duty(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f000 f96b 	bl	800130c <TIM2_PWM_Set_Duty>
  TIM2_PWM_Set_Frequency(2000);
 8001036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800103a:	f000 f985 	bl	8001348 <TIM2_PWM_Set_Frequency>
  if( HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800103e:	2104      	movs	r1, #4
 8001040:	4823      	ldr	r0, [pc, #140]	; (80010d0 <main+0xc8>)
 8001042:	f002 f845 	bl	80030d0 <HAL_TIM_PWM_Start>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <main+0x48>
  {
	  Error_Handler();
 800104c:	f000 f992 	bl	8001374 <Error_Handler>
//		  TIM2_PWM_Set_Duty(duty);
//		  HAL_Delay(50);
//		  duty += 5;
//	  }
//	  duty = 0;
	HAL_ADC_Start(&hadc1);
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <main+0xcc>)
 8001052:	f000 fc37 	bl	80018c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001056:	f04f 31ff 	mov.w	r1, #4294967295
 800105a:	481e      	ldr	r0, [pc, #120]	; (80010d4 <main+0xcc>)
 800105c:	f000 fce0 	bl	8001a20 <HAL_ADC_PollForConversion>
	temperature = ((float)HAL_ADC_GetValue(&hadc1) / 4096) * 3.3 * 100;
 8001060:	481c      	ldr	r0, [pc, #112]	; (80010d4 <main+0xcc>)
 8001062:	f000 fde3 	bl	8001c2c <HAL_ADC_GetValue>
 8001066:	4603      	mov	r3, r0
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fc35 	bl	80008d8 <__aeabi_ui2f>
 800106e:	4603      	mov	r3, r0
 8001070:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd3b 	bl	8000af0 <__aeabi_fdiv>
 800107a:	4603      	mov	r3, r0
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fafd 	bl	800067c <__aeabi_f2d>
 8001082:	a311      	add	r3, pc, #68	; (adr r3, 80010c8 <main+0xc0>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f86a 	bl	8000160 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <main+0xd0>)
 800109a:	f7ff f861 	bl	8000160 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fb41 	bl	800072c <__aeabi_d2uiz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	Lcd_display(temperature, 2205);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f640 019d 	movw	r1, #2205	; 0x89d
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe25 	bl	8000d04 <Lcd_display>
	HAL_Delay(1000);
 80010ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010be:	f000 fb05 	bl	80016cc <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 80010c2:	e7c5      	b.n	8001050 <main+0x48>
 80010c4:	f3af 8000 	nop.w
 80010c8:	66666666 	.word	0x66666666
 80010cc:	400a6666 	.word	0x400a6666
 80010d0:	200000e0 	.word	0x200000e0
 80010d4:	200000b0 	.word	0x200000b0
 80010d8:	40590000 	.word	0x40590000

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fd2a 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001114:	2310      	movs	r3, #16
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001120:	4618      	mov	r0, r3
 8001122:	f001 f999 	bl	8002458 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800112c:	f000 f922 	bl	8001374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fc04 	bl	8002958 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001156:	f000 f90d 	bl	8001374 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800115a:	2302      	movs	r3, #2
 800115c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fd91 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001170:	f000 f900 	bl	8001374 <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3750      	adds	r7, #80	; 0x50
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_ADC1_Init+0x74>)
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <MX_ADC1_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_ADC1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_ADC1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011ba:	f000 faab 	bl	8001714 <HAL_ADC_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 f8d6 	bl	8001374 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011da:	f000 fd33 	bl	8001c44 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011e4:	f000 f8c6 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000b0 	.word	0x200000b0
 80011f4:	40012400 	.word	0x40012400

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_TIM2_Init+0xe4>)
 800122a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_TIM2_Init+0xe4>)
 8001232:	224f      	movs	r2, #79	; 0x4f
 8001234:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_TIM2_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_TIM2_Init+0xe4>)
 800123e:	2263      	movs	r2, #99	; 0x63
 8001240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_TIM2_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_TIM2_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124e:	4823      	ldr	r0, [pc, #140]	; (80012dc <MX_TIM2_Init+0xe4>)
 8001250:	f001 fe96 	bl	8002f80 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800125a:	f000 f88b 	bl	8001374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4619      	mov	r1, r3
 800126a:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_TIM2_Init+0xe4>)
 800126c:	f002 f88a 	bl	8003384 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001276:	f000 f87d 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM2_Init+0xe4>)
 800127c:	f001 fecf 	bl	800301e <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001286:	f000 f875 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_TIM2_Init+0xe4>)
 800129a:	f002 fbd1 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f000 f866 	bl	8001374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80012ac:	230a      	movs	r3, #10
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2204      	movs	r2, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM2_Init+0xe4>)
 80012c0:	f001 ffa2 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012ca:	f000 f853 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM2_Init+0xe4>)
 80012d0:	f000 f8e0 	bl	8001494 <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000e0 	.word	0x200000e0

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_GPIO_Init+0x28>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <MX_GPIO_Init+0x28>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <MX_GPIO_Init+0x28>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000

0800130c <TIM2_PWM_Set_Duty>:
  * @brief GPIO Initialization Function
  * @param Duty(%) 0 -> 100. % High voltage
  * @retval None
  */
void TIM2_PWM_Set_Duty(uint8_t duty)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	uint16_t compare = (htim2.Init.Period + 1) * duty / 100;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <TIM2_PWM_Set_Duty+0x34>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <TIM2_PWM_Set_Duty+0x38>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	095b      	lsrs	r3, r3, #5
 800132a:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <TIM2_PWM_Set_Duty+0x34>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	89fa      	ldrh	r2, [r7, #14]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200000e0 	.word	0x200000e0
 8001344:	51eb851f 	.word	0x51eb851f

08001348 <TIM2_PWM_Set_Frequency>:
  * @brief GPIO Initialization Function
  * @param frequency(Hz); 2 < f < 80000
  * @retval None
  */
void TIM2_PWM_Set_Frequency(uint32_t frequency)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// Fixed Period = 99
	// frequency = f_timer / [(Period + 1) * (Psc + 1)]
	// -> Psc = f_timer / (100 * frequency) - 1;
	uint32_t f_timer = HAL_RCC_GetPCLK1Freq() * 1; 	 //1 is APB1 time multiplier value
 8001350:	f001 fc56 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8001354:	60f8      	str	r0, [r7, #12]
	TIM2->PSC = f_timer / (100 * frequency) - 1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2264      	movs	r2, #100	; 0x64
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001368:	3b01      	subs	r3, #1
 800136a:	6293      	str	r3, [r2, #40]	; 0x28

}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	e7fe      	b.n	800137c <Error_Handler+0x8>
	...

08001380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_MspInit+0x5c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_MspInit+0x5c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_MspInit+0x5c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_MspInit+0x5c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MspInit+0x5c>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_MspInit+0x5c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_MspInit+0x60>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_MspInit+0x60>)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000

080013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_ADC_MspInit+0x6c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d121      	bne.n	8001448 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001434:	2304      	movs	r3, #4
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4619      	mov	r1, r3
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_ADC_MspInit+0x74>)
 8001444:	f000 fe76 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40012400 	.word	0x40012400
 8001454:	40021000 	.word	0x40021000
 8001458:	40010800 	.word	0x40010800

0800145c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d10b      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_TIM_Base_MspInit+0x34>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_TIM_Base_MspInit+0x34>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_TIM_Base_MspInit+0x34>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b2:	d117      	bne.n	80014e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_TIM_MspPostInit+0x58>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <HAL_TIM_MspPostInit+0x58>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_TIM_MspPostInit+0x58>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <HAL_TIM_MspPostInit+0x5c>)
 80014e0:	f000 fe28 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f8ab 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f002 fabc 	bl	8003af0 <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20002800 	.word	0x20002800
 80015a4:	00000400 	.word	0x00000400
 80015a8:	200000a4 	.word	0x200000a4
 80015ac:	20000140 	.word	0x20000140

080015b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	; (80015f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e2:	f7ff ffe5 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f002 fa89 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7ff fd0d 	bl	8001008 <main>
  bx lr
 80015ee:	4770      	bx	lr
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80015f8:	08004478 	.word	0x08004478
  ldr r2, =_sbss
 80015fc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001600:	2000013c 	.word	0x2000013c

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 fd57 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	200f      	movs	r0, #15
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff feac 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fd61 	bl	800211a <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 fd37 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000018 	.word	0x20000018
 800168c:	20000020 	.word	0x20000020
 8001690:	2000001c 	.word	0x2000001c

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x1c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x20>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_IncTick+0x20>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000020 	.word	0x20000020
 80016b4:	20000128 	.word	0x20000128

080016b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_GetTick+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000128 	.word	0x20000128

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fff0 	bl	80016b8 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffe0 	bl	80016b8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000020 	.word	0x20000020

08001714 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0be      	b.n	80018b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fe46 	bl	80013e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fbc5 	bl	8001ee8 <ADC_ConversionStop_Disable>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8099 	bne.w	80018a2 <HAL_ADC_Init+0x18e>
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8095 	bne.w	80018a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001780:	f023 0302 	bic.w	r3, r3, #2
 8001784:	f043 0202 	orr.w	r2, r3, #2
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001794:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7b1b      	ldrb	r3, [r3, #12]
 800179a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800179c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ac:	d003      	beq.n	80017b6 <HAL_ADC_Init+0xa2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_ADC_Init+0xa8>
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	e000      	b.n	80017be <HAL_ADC_Init+0xaa>
 80017bc:	2300      	movs	r3, #0
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7d1b      	ldrb	r3, [r3, #20]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d119      	bne.n	8001800 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	3b01      	subs	r3, #1
 80017da:	035a      	lsls	r2, r3, #13
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e00b      	b.n	8001800 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_ADC_Init+0x1a8>)
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	430b      	orrs	r3, r1
 8001826:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001830:	d003      	beq.n	800183a <HAL_ADC_Init+0x126>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d104      	bne.n	8001844 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	3b01      	subs	r3, #1
 8001840:	051b      	lsls	r3, r3, #20
 8001842:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	430a      	orrs	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_ADC_Init+0x1ac>)
 8001860:	4013      	ands	r3, r2
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	429a      	cmp	r2, r3
 8001866:	d10b      	bne.n	8001880 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800187e:	e018      	b.n	80018b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	f023 0312 	bic.w	r3, r3, #18
 8001888:	f043 0210 	orr.w	r2, r3, #16
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018a0:	e007      	b.n	80018b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	f043 0210 	orr.w	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	ffe1f7fd 	.word	0xffe1f7fd
 80018c0:	ff1f0efe 	.word	0xff1f0efe

080018c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Start+0x1a>
 80018da:	2302      	movs	r3, #2
 80018dc:	e098      	b.n	8001a10 <HAL_ADC_Start+0x14c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 faa4 	bl	8001e34 <ADC_Enable>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8087 	bne.w	8001a06 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a41      	ldr	r2, [pc, #260]	; (8001a18 <HAL_ADC_Start+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d105      	bne.n	8001922 <HAL_ADC_Start+0x5e>
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_ADC_Start+0x158>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d115      	bne.n	800194e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d026      	beq.n	800198a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001944:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194c:	e01d      	b.n	800198a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2f      	ldr	r2, [pc, #188]	; (8001a1c <HAL_ADC_Start+0x158>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_ADC_Start+0xaa>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2b      	ldr	r2, [pc, #172]	; (8001a18 <HAL_ADC_Start+0x154>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10d      	bne.n	800198a <HAL_ADC_Start+0xc6>
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_ADC_Start+0x158>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001982:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f023 0206 	bic.w	r2, r3, #6
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a2:	e002      	b.n	80019aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f06f 0202 	mvn.w	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019ca:	d113      	bne.n	80019f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019d0:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_ADC_Start+0x154>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d105      	bne.n	80019e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_ADC_Start+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d108      	bne.n	80019f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	e00c      	b.n	8001a0e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e003      	b.n	8001a0e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40012800 	.word	0x40012800
 8001a1c:	40012400 	.word	0x40012400

08001a20 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a36:	f7ff fe3f 	bl	80016b8 <HAL_GetTick>
 8001a3a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	f043 0220 	orr.w	r2, r3, #32
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0d3      	b.n	8001c0a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d131      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d12a      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a7e:	e021      	b.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a86:	d01d      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x7e>
 8001a8e:	f7ff fe13 	bl	80016b8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d212      	bcs.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0a2      	b.n	8001c0a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0d6      	beq.n	8001a80 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ad2:	e070      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	; (8001c14 <HAL_ADC_PollForConversion+0x1f4>)
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f001 f98d 	bl	8002df8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <HAL_ADC_PollForConversion+0x1f8>)
 8001aec:	400b      	ands	r3, r1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x104>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68d9      	ldr	r1, [r3, #12]
 8001af8:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <HAL_ADC_PollForConversion+0x1fc>)
 8001afa:	400b      	ands	r3, r1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d111      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x104>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_ADC_PollForConversion+0x200>)
 8001b08:	400b      	ands	r3, r1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x100>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68d9      	ldr	r1, [r3, #12]
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_ADC_PollForConversion+0x204>)
 8001b16:	400b      	ands	r3, r1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x100>
 8001b1c:	2314      	movs	r3, #20
 8001b1e:	e020      	b.n	8001b62 <HAL_ADC_PollForConversion+0x142>
 8001b20:	2329      	movs	r3, #41	; 0x29
 8001b22:	e01e      	b.n	8001b62 <HAL_ADC_PollForConversion+0x142>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_ADC_PollForConversion+0x200>)
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x120>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68d9      	ldr	r1, [r3, #12]
 8001b38:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <HAL_ADC_PollForConversion+0x204>)
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00d      	beq.n	8001b5c <HAL_ADC_PollForConversion+0x13c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <HAL_ADC_PollForConversion+0x208>)
 8001b48:	400b      	ands	r3, r1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x140>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68d9      	ldr	r1, [r3, #12]
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <HAL_ADC_PollForConversion+0x208>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x140>
 8001b5c:	2354      	movs	r3, #84	; 0x54
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_PollForConversion+0x142>
 8001b60:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b68:	e021      	b.n	8001bae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d01a      	beq.n	8001ba8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_ADC_PollForConversion+0x168>
 8001b78:	f7ff fd9e 	bl	80016b8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d20f      	bcs.n	8001ba8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d90b      	bls.n	8001ba8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e030      	b.n	8001c0a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d8d9      	bhi.n	8001b6a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0212 	mvn.w	r2, #18
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bd6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bda:	d115      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000018 	.word	0x20000018
 8001c18:	24924924 	.word	0x24924924
 8001c1c:	00924924 	.word	0x00924924
 8001c20:	12492492 	.word	0x12492492
 8001c24:	00492492 	.word	0x00492492
 8001c28:	00249249 	.word	0x00249249

08001c2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x20>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0dc      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1da>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d81c      	bhi.n	8001cae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	3b05      	subs	r3, #5
 8001c86:	221f      	movs	r2, #31
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4019      	ands	r1, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b05      	subs	r3, #5
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34
 8001cac:	e03c      	b.n	8001d28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d81c      	bhi.n	8001cf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b23      	subs	r3, #35	; 0x23
 8001cc8:	221f      	movs	r2, #31
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4019      	ands	r1, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b23      	subs	r3, #35	; 0x23
 8001ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
 8001cee:	e01b      	b.n	8001d28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b41      	subs	r3, #65	; 0x41
 8001d02:	221f      	movs	r2, #31
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4019      	ands	r1, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b41      	subs	r3, #65	; 0x41
 8001d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d91c      	bls.n	8001d6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68d9      	ldr	r1, [r3, #12]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4019      	ands	r1, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6898      	ldr	r0, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b1e      	subs	r3, #30
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	e019      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6919      	ldr	r1, [r3, #16]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4019      	ands	r1, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6898      	ldr	r0, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	fa00 f203 	lsl.w	r2, r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d003      	beq.n	8001dae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001daa:	2b11      	cmp	r3, #17
 8001dac:	d132      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_ADC_ConfigChannel+0x1e4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d125      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d126      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d11a      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_ADC_ConfigChannel+0x1e8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_ADC_ConfigChannel+0x1ec>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	0c9a      	lsrs	r2, r3, #18
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df4:	e002      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x1b2>
 8001e02:	e007      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f043 0220 	orr.w	r2, r3, #32
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40012400 	.word	0x40012400
 8001e2c:	20000018 	.word	0x20000018
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d040      	beq.n	8001ed4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <ADC_Enable+0xac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <ADC_Enable+0xb0>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	0c9b      	lsrs	r3, r3, #18
 8001e6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e70:	e002      	b.n	8001e78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e7e:	f7ff fc1b 	bl	80016b8 <HAL_GetTick>
 8001e82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e84:	e01f      	b.n	8001ec6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e86:	f7ff fc17 	bl	80016b8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d918      	bls.n	8001ec6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d011      	beq.n	8001ec6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f043 0210 	orr.w	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e007      	b.n	8001ed6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d1d8      	bne.n	8001e86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000018 	.word	0x20000018
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d12e      	bne.n	8001f60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f12:	f7ff fbd1 	bl	80016b8 <HAL_GetTick>
 8001f16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f18:	e01b      	b.n	8001f52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f1a:	f7ff fbcd 	bl	80016b8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d914      	bls.n	8001f52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10d      	bne.n	8001f52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e007      	b.n	8001f62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d0dc      	beq.n	8001f1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff90 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff49 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff5e 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff90 	bl	8002024 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5f 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffb0 	bl	8002088 <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b08b      	sub	sp, #44	; 0x2c
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002146:	e148      	b.n	80023da <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002148:	2201      	movs	r2, #1
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 8137 	bne.w	80023d4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4aa3      	ldr	r2, [pc, #652]	; (80023f8 <HAL_GPIO_Init+0x2c4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d05e      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 8002170:	4aa1      	ldr	r2, [pc, #644]	; (80023f8 <HAL_GPIO_Init+0x2c4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d875      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 8002176:	4aa1      	ldr	r2, [pc, #644]	; (80023fc <HAL_GPIO_Init+0x2c8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d058      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 800217c:	4a9f      	ldr	r2, [pc, #636]	; (80023fc <HAL_GPIO_Init+0x2c8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d86f      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 8002182:	4a9f      	ldr	r2, [pc, #636]	; (8002400 <HAL_GPIO_Init+0x2cc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d052      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 8002188:	4a9d      	ldr	r2, [pc, #628]	; (8002400 <HAL_GPIO_Init+0x2cc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d869      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 800218e:	4a9d      	ldr	r2, [pc, #628]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d04c      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 8002194:	4a9b      	ldr	r2, [pc, #620]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d863      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 800219a:	4a9b      	ldr	r2, [pc, #620]	; (8002408 <HAL_GPIO_Init+0x2d4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d046      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 80021a0:	4a99      	ldr	r2, [pc, #612]	; (8002408 <HAL_GPIO_Init+0x2d4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d85d      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d82a      	bhi.n	8002200 <HAL_GPIO_Init+0xcc>
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d859      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <HAL_GPIO_Init+0x80>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	0800222f 	.word	0x0800222f
 80021b8:	08002209 	.word	0x08002209
 80021bc:	0800221b 	.word	0x0800221b
 80021c0:	0800225d 	.word	0x0800225d
 80021c4:	08002263 	.word	0x08002263
 80021c8:	08002263 	.word	0x08002263
 80021cc:	08002263 	.word	0x08002263
 80021d0:	08002263 	.word	0x08002263
 80021d4:	08002263 	.word	0x08002263
 80021d8:	08002263 	.word	0x08002263
 80021dc:	08002263 	.word	0x08002263
 80021e0:	08002263 	.word	0x08002263
 80021e4:	08002263 	.word	0x08002263
 80021e8:	08002263 	.word	0x08002263
 80021ec:	08002263 	.word	0x08002263
 80021f0:	08002263 	.word	0x08002263
 80021f4:	08002263 	.word	0x08002263
 80021f8:	08002211 	.word	0x08002211
 80021fc:	08002225 	.word	0x08002225
 8002200:	4a82      	ldr	r2, [pc, #520]	; (800240c <HAL_GPIO_Init+0x2d8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002206:	e02c      	b.n	8002262 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	623b      	str	r3, [r7, #32]
          break;
 800220e:	e029      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	3304      	adds	r3, #4
 8002216:	623b      	str	r3, [r7, #32]
          break;
 8002218:	e024      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	3308      	adds	r3, #8
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e01f      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	330c      	adds	r3, #12
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e01a      	b.n	8002264 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002236:	2304      	movs	r3, #4
 8002238:	623b      	str	r3, [r7, #32]
          break;
 800223a:	e013      	b.n	8002264 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	611a      	str	r2, [r3, #16]
          break;
 800224e:	e009      	b.n	8002264 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002250:	2308      	movs	r3, #8
 8002252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	615a      	str	r2, [r3, #20]
          break;
 800225a:	e003      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x130>
          break;
 8002262:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2bff      	cmp	r3, #255	; 0xff
 8002268:	d801      	bhi.n	800226e <HAL_GPIO_Init+0x13a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	e001      	b.n	8002272 <HAL_GPIO_Init+0x13e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d802      	bhi.n	8002280 <HAL_GPIO_Init+0x14c>
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x152>
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	3b08      	subs	r3, #8
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	210f      	movs	r1, #15
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	6a39      	ldr	r1, [r7, #32]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8090 	beq.w	80023d4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b4:	4b56      	ldr	r3, [pc, #344]	; (8002410 <HAL_GPIO_Init+0x2dc>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a55      	ldr	r2, [pc, #340]	; (8002410 <HAL_GPIO_Init+0x2dc>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_GPIO_Init+0x2dc>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <HAL_GPIO_Init+0x2e0>)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a49      	ldr	r2, [pc, #292]	; (8002418 <HAL_GPIO_Init+0x2e4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00d      	beq.n	8002314 <HAL_GPIO_Init+0x1e0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a48      	ldr	r2, [pc, #288]	; (800241c <HAL_GPIO_Init+0x2e8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x1dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a47      	ldr	r2, [pc, #284]	; (8002420 <HAL_GPIO_Init+0x2ec>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_GPIO_Init+0x1d8>
 8002308:	2302      	movs	r3, #2
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x1e2>
 800230c:	2303      	movs	r3, #3
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x1e2>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x1e2>
 8002314:	2300      	movs	r3, #0
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002326:	493b      	ldr	r1, [pc, #236]	; (8002414 <HAL_GPIO_Init+0x2e0>)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4937      	ldr	r1, [pc, #220]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234e:	4b35      	ldr	r3, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4933      	ldr	r1, [pc, #204]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002358:	4013      	ands	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002368:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	492d      	ldr	r1, [pc, #180]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	4929      	ldr	r1, [pc, #164]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002380:	4013      	ands	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4923      	ldr	r1, [pc, #140]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	491f      	ldr	r1, [pc, #124]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4919      	ldr	r1, [pc, #100]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4915      	ldr	r1, [pc, #84]	; (8002424 <HAL_GPIO_Init+0x2f0>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	3301      	adds	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f aeaf 	bne.w	8002148 <HAL_GPIO_Init+0x14>
  }
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	372c      	adds	r7, #44	; 0x2c
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	10320000 	.word	0x10320000
 80023fc:	10310000 	.word	0x10310000
 8002400:	10220000 	.word	0x10220000
 8002404:	10210000 	.word	0x10210000
 8002408:	10120000 	.word	0x10120000
 800240c:	10110000 	.word	0x10110000
 8002410:	40021000 	.word	0x40021000
 8002414:	40010000 	.word	0x40010000
 8002418:	40010800 	.word	0x40010800
 800241c:	40010c00 	.word	0x40010c00
 8002420:	40011000 	.word	0x40011000
 8002424:	40010400 	.word	0x40010400

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	611a      	str	r2, [r3, #16]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e26c      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8087 	beq.w	8002586 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002478:	4b92      	ldr	r3, [pc, #584]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b04      	cmp	r3, #4
 8002482:	d00c      	beq.n	800249e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002484:	4b8f      	ldr	r3, [pc, #572]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d112      	bne.n	80024b6 <HAL_RCC_OscConfig+0x5e>
 8002490:	4b8c      	ldr	r3, [pc, #560]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d10b      	bne.n	80024b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249e:	4b89      	ldr	r3, [pc, #548]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d06c      	beq.n	8002584 <HAL_RCC_OscConfig+0x12c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d168      	bne.n	8002584 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e246      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x76>
 80024c0:	4b80      	ldr	r3, [pc, #512]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a7f      	ldr	r2, [pc, #508]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e02e      	b.n	800252c <HAL_RCC_OscConfig+0xd4>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x98>
 80024d6:	4b7b      	ldr	r3, [pc, #492]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7a      	ldr	r2, [pc, #488]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b78      	ldr	r3, [pc, #480]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a77      	ldr	r2, [pc, #476]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0xd4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0xbc>
 80024fa:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a71      	ldr	r2, [pc, #452]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b6f      	ldr	r3, [pc, #444]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6e      	ldr	r2, [pc, #440]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xd4>
 8002514:	4b6b      	ldr	r3, [pc, #428]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6a      	ldr	r2, [pc, #424]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a67      	ldr	r2, [pc, #412]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff f8c0 	bl	80016b8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff f8bc 	bl	80016b8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1fa      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xe4>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff f8ac 	bl	80016b8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff f8a8 	bl	80016b8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1e6      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x10c>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002592:	4b4c      	ldr	r3, [pc, #304]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800259e:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d11c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x18c>
 80025aa:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d116      	bne.n	80025e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_RCC_OscConfig+0x176>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e1ba      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4939      	ldr	r1, [pc, #228]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	e03a      	b.n	800265a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x270>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7ff f861 	bl	80016b8 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fa:	f7ff f85d 	bl	80016b8 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e19b      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4927      	ldr	r1, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_RCC_OscConfig+0x270>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff f840 	bl	80016b8 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263c:	f7ff f83c 	bl	80016b8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e17a      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d03a      	beq.n	80026dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d019      	beq.n	80026a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7ff f820 	bl	80016b8 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7ff f81c 	bl	80016b8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e15a      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_RCC_OscConfig+0x26c>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800269a:	2001      	movs	r0, #1
 800269c:	f000 fad8 	bl	8002c50 <RCC_Delay>
 80026a0:	e01c      	b.n	80026dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a8:	f7ff f806 	bl	80016b8 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ae:	e00f      	b.n	80026d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7ff f802 	bl	80016b8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d908      	bls.n	80026d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e140      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	42420000 	.word	0x42420000
 80026cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b9e      	ldr	r3, [pc, #632]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e9      	bne.n	80026b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80a6 	beq.w	8002836 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b97      	ldr	r3, [pc, #604]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10d      	bne.n	8002716 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	4b94      	ldr	r3, [pc, #592]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a93      	ldr	r2, [pc, #588]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	61d3      	str	r3, [r2, #28]
 8002706:	4b91      	ldr	r3, [pc, #580]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b8e      	ldr	r3, [pc, #568]	; (8002950 <HAL_RCC_OscConfig+0x4f8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x4f8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a8a      	ldr	r2, [pc, #552]	; (8002950 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7fe ffc3 	bl	80016b8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe ffbf 	bl	80016b8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	; 0x64
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0fd      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x312>
 800275c:	4b7b      	ldr	r3, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4a7a      	ldr	r2, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6213      	str	r3, [r2, #32]
 8002768:	e02d      	b.n	80027c6 <HAL_RCC_OscConfig+0x36e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x334>
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a75      	ldr	r2, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a72      	ldr	r2, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	6213      	str	r3, [r2, #32]
 800278a:	e01c      	b.n	80027c6 <HAL_RCC_OscConfig+0x36e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d10c      	bne.n	80027ae <HAL_RCC_OscConfig+0x356>
 8002794:	4b6d      	ldr	r3, [pc, #436]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a6c      	ldr	r2, [pc, #432]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a69      	ldr	r2, [pc, #420]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	e00b      	b.n	80027c6 <HAL_RCC_OscConfig+0x36e>
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4a66      	ldr	r2, [pc, #408]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6213      	str	r3, [r2, #32]
 80027ba:	4b64      	ldr	r3, [pc, #400]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4a63      	ldr	r2, [pc, #396]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d015      	beq.n	80027fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7fe ff73 	bl	80016b8 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe ff6f 	bl	80016b8 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0ab      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ee      	beq.n	80027d6 <HAL_RCC_OscConfig+0x37e>
 80027f8:	e014      	b.n	8002824 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fe ff5d 	bl	80016b8 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe ff59 	bl	80016b8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e095      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ee      	bne.n	8002802 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b48      	ldr	r3, [pc, #288]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	4a47      	ldr	r2, [pc, #284]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8081 	beq.w	8002942 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d061      	beq.n	8002910 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d146      	bne.n	80028e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_OscConfig+0x4fc>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe ff2d 	bl	80016b8 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002862:	f7fe ff29 	bl	80016b8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e067      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f0      	bne.n	8002862 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d108      	bne.n	800289c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	492d      	ldr	r1, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a19      	ldr	r1, [r3, #32]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	430b      	orrs	r3, r1
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_RCC_OscConfig+0x4fc>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fefd 	bl	80016b8 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fef9 	bl	80016b8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e037      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x46a>
 80028e0:	e02f      	b.n	8002942 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_RCC_OscConfig+0x4fc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fee6 	bl	80016b8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fee2 	bl	80016b8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e020      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x498>
 800290e:	e018      	b.n	8002942 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e013      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x4f4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	429a      	cmp	r2, r3
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	40007000 	.word	0x40007000
 8002954:	42420060 	.word	0x42420060

08002958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0d0      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	4965      	ldr	r1, [pc, #404]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b63      	ldr	r3, [pc, #396]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b8      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	494d      	ldr	r1, [pc, #308]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d040      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07f      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e073      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e06b      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4936      	ldr	r1, [pc, #216]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fe36 	bl	80016b8 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fe32 	bl	80016b8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e053      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d210      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0207 	bic.w	r2, r3, #7
 8002a8e:	4922      	ldr	r1, [pc, #136]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4916      	ldr	r1, [pc, #88]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490e      	ldr	r1, [pc, #56]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae6:	f000 f821 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490a      	ldr	r1, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1cc>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1d0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fd94 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40022000 	.word	0x40022000
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08004424 	.word	0x08004424
 8002b24:	20000018 	.word	0x20000018
 8002b28:	2000001c 	.word	0x2000001c

08002b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b490      	push	{r4, r7}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b34:	1d3c      	adds	r4, r7, #4
 8002b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b3c:	f240 2301 	movw	r3, #513	; 0x201
 8002b40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d002      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x40>
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x46>
 8002b6a:	e02d      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6e:	623b      	str	r3, [r7, #32]
      break;
 8002b70:	e02d      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b7e:	4413      	add	r3, r2
 8002b80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b90:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c5b      	lsrs	r3, r3, #17
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ba4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002baa:	fb02 f203 	mul.w	r2, r2, r3
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	e004      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	623b      	str	r3, [r7, #32]
      break;
 8002bc6:	e002      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bca:	623b      	str	r3, [r7, #32]
      break;
 8002bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bce:	6a3b      	ldr	r3, [r7, #32]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc90      	pop	{r4, r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	08004404 	.word	0x08004404
 8002be0:	40021000 	.word	0x40021000
 8002be4:	007a1200 	.word	0x007a1200
 8002be8:	003d0900 	.word	0x003d0900

08002bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf0:	4b02      	ldr	r3, [pc, #8]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000018 	.word	0x20000018

08002c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c04:	f7ff fff2 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4903      	ldr	r1, [pc, #12]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08004434 	.word	0x08004434

08002c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c2c:	f7ff ffde 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	0adb      	lsrs	r3, r3, #11
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08004434 	.word	0x08004434

08002c50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <RCC_Delay+0x34>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <RCC_Delay+0x38>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0a5b      	lsrs	r3, r3, #9
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c6c:	bf00      	nop
  }
  while (Delay --);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	60fa      	str	r2, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f9      	bne.n	8002c6c <RCC_Delay+0x1c>
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	20000018 	.word	0x20000018
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d07d      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cac:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	4a4b      	ldr	r2, [pc, #300]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	61d3      	str	r3, [r2, #28]
 8002cc4:	4b49      	ldr	r3, [pc, #292]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d118      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a42      	ldr	r2, [pc, #264]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cec:	f7fe fce4 	bl	80016b8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	e008      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe fce0 	bl	80016b8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e06d      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02e      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d027      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d30:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d46:	4a29      	ldr	r2, [pc, #164]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d014      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fe fcaf 	bl	80016b8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fcab 	bl	80016b8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e036      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ee      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4917      	ldr	r1, [pc, #92]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	4a13      	ldr	r2, [pc, #76]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	490b      	ldr	r1, [pc, #44]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42420440 	.word	0x42420440

08002df8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b08d      	sub	sp, #52	; 0x34
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e00:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e02:	f107 040c 	add.w	r4, r7, #12
 8002e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e0c:	f240 2301 	movw	r3, #513	; 0x201
 8002e10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	f200 8091 	bhi.w	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d04c      	beq.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d07c      	beq.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e40:	e089      	b.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002e42:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e48:	4b49      	ldr	r3, [pc, #292]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8082 	beq.w	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e62:	4413      	add	r3, r2
 8002e64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e68:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d018      	beq.n	8002ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e74:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c5b      	lsrs	r3, r3, #17
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e82:	4413      	add	r3, r2
 8002e84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e94:	4a37      	ldr	r2, [pc, #220]	; (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	4a33      	ldr	r2, [pc, #204]	; (8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ebc:	d102      	bne.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ec2:	e04a      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ed2:	e042      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee4:	d108      	bne.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef6:	e01f      	b.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f02:	d109      	bne.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002f10:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f16:	e00f      	b.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f22:	d11c      	bne.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d016      	beq.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002f30:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f36:	e012      	b.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002f38:	e011      	b.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f3a:	f7ff fe75 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0b9b      	lsrs	r3, r3, #14
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f54:	e004      	b.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f5e:	bf00      	nop
    }
  }
  return (frequency);
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3734      	adds	r7, #52	; 0x34
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	08004414 	.word	0x08004414
 8002f70:	40021000 	.word	0x40021000
 8002f74:	007a1200 	.word	0x007a1200
 8002f78:	003d0900 	.word	0x003d0900
 8002f7c:	aaaaaaab 	.word	0xaaaaaaab

08002f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e041      	b.n	8003016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fe fa58 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f000 faa4 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e041      	b.n	80030b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f839 	bl	80030bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f000 fa55 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_TIM_PWM_Start+0x24>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e022      	b.n	800313a <HAL_TIM_PWM_Start+0x6a>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d109      	bne.n	800310e <HAL_TIM_PWM_Start+0x3e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e015      	b.n	800313a <HAL_TIM_PWM_Start+0x6a>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d109      	bne.n	8003128 <HAL_TIM_PWM_Start+0x58>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e008      	b.n	800313a <HAL_TIM_PWM_Start+0x6a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e059      	b.n	80031f6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0x82>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	e013      	b.n	800317a <HAL_TIM_PWM_Start+0xaa>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0x92>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003160:	e00b      	b.n	800317a <HAL_TIM_PWM_Start+0xaa>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xa2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003170:	e003      	b.n	800317a <HAL_TIM_PWM_Start+0xaa>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2201      	movs	r2, #1
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fc38 	bl	80039f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_TIM_PWM_Start+0x130>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d107      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a16      	ldr	r2, [pc, #88]	; (8003200 <HAL_TIM_PWM_Start+0x130>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_TIM_PWM_Start+0xf0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_PWM_Start+0xf0>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <HAL_TIM_PWM_Start+0x134>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d010      	beq.n	80031f4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	e007      	b.n	80031f4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400

08003208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800321e:	2302      	movs	r3, #2
 8003220:	e0ac      	b.n	800337c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	f200 809f 	bhi.w	8003370 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800326d 	.word	0x0800326d
 800323c:	08003371 	.word	0x08003371
 8003240:	08003371 	.word	0x08003371
 8003244:	08003371 	.word	0x08003371
 8003248:	080032ad 	.word	0x080032ad
 800324c:	08003371 	.word	0x08003371
 8003250:	08003371 	.word	0x08003371
 8003254:	08003371 	.word	0x08003371
 8003258:	080032ef 	.word	0x080032ef
 800325c:	08003371 	.word	0x08003371
 8003260:	08003371 	.word	0x08003371
 8003264:	08003371 	.word	0x08003371
 8003268:	0800332f 	.word	0x0800332f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f9a2 	bl	80035bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
      break;
 80032aa:	e062      	b.n	8003372 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f9e8 	bl	8003688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
      break;
 80032ec:	e041      	b.n	8003372 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fa31 	bl	800375c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0204 	bic.w	r2, r2, #4
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	61da      	str	r2, [r3, #28]
      break;
 800332c:	e021      	b.n	8003372 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fa7b 	bl	8003830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	61da      	str	r2, [r3, #28]
      break;
 800336e:	e000      	b.n	8003372 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003370:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_TIM_ConfigClockSource+0x18>
 8003398:	2302      	movs	r3, #2
 800339a:	e0b3      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x180>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d4:	d03e      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0xd0>
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	f200 8087 	bhi.w	80034ec <HAL_TIM_ConfigClockSource+0x168>
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	f000 8085 	beq.w	80034f0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ea:	d87f      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
 80033ec:	2b70      	cmp	r3, #112	; 0x70
 80033ee:	d01a      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xa2>
 80033f0:	2b70      	cmp	r3, #112	; 0x70
 80033f2:	d87b      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
 80033f4:	2b60      	cmp	r3, #96	; 0x60
 80033f6:	d050      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x116>
 80033f8:	2b60      	cmp	r3, #96	; 0x60
 80033fa:	d877      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
 80033fc:	2b50      	cmp	r3, #80	; 0x50
 80033fe:	d03c      	beq.n	800347a <HAL_TIM_ConfigClockSource+0xf6>
 8003400:	2b50      	cmp	r3, #80	; 0x50
 8003402:	d873      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d058      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x136>
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d86f      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
 800340c:	2b30      	cmp	r3, #48	; 0x30
 800340e:	d064      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x156>
 8003410:	2b30      	cmp	r3, #48	; 0x30
 8003412:	d86b      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
 8003414:	2b20      	cmp	r3, #32
 8003416:	d060      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x156>
 8003418:	2b20      	cmp	r3, #32
 800341a:	d867      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05c      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x156>
 8003420:	2b10      	cmp	r3, #16
 8003422:	d05a      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003424:	e062      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f000 fac0 	bl	80039ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003448:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
      break;
 8003452:	e04e      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f000 faa9 	bl	80039ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003476:	609a      	str	r2, [r3, #8]
      break;
 8003478:	e03b      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f000 fa20 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2150      	movs	r1, #80	; 0x50
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fa77 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003498:	e02b      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 fa3e 	bl	8003928 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2160      	movs	r1, #96	; 0x60
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fa67 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80034b8:	e01b      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 fa00 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa57 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f000 fa4e 	bl	8003986 <TIM_ITRx_SetConfig>
        break;
 80034ea:	e002      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <TIM_Base_SetConfig+0xa8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x28>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x28>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <TIM_Base_SetConfig+0xac>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <TIM_Base_SetConfig+0xa8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_Base_SetConfig+0x52>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d003      	beq.n	800355e <TIM_Base_SetConfig+0x52>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <TIM_Base_SetConfig+0xac>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d108      	bne.n	8003570 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <TIM_Base_SetConfig+0xa8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	615a      	str	r2, [r3, #20]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400

080035bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 0302 	bic.w	r3, r3, #2
 8003604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10c      	bne.n	8003632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0308 	bic.w	r3, r3, #8
 800361e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a13      	ldr	r2, [pc, #76]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00

08003688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0210 	bic.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0320 	bic.w	r3, r3, #32
 80036d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <TIM_OC2_SetConfig+0xd0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10d      	bne.n	8003704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a14      	ldr	r2, [pc, #80]	; (8003758 <TIM_OC2_SetConfig+0xd0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d113      	bne.n	8003734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00

0800375c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <TIM_OC3_SetConfig+0xd0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a14      	ldr	r2, [pc, #80]	; (800382c <TIM_OC3_SetConfig+0xd0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d113      	bne.n	8003806 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40012c00 	.word	0x40012c00

08003830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	031b      	lsls	r3, r3, #12
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <TIM_OC4_SetConfig+0x98>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d109      	bne.n	80038a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	019b      	lsls	r3, r3, #6
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	40012c00 	.word	0x40012c00

080038cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0201 	bic.w	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 030a 	bic.w	r3, r3, #10
 8003908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	031b      	lsls	r3, r3, #12
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f043 0307 	orr.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	021a      	lsls	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	431a      	orrs	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e041      	b.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a10      	ldr	r2, [pc, #64]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10c      	bne.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000024 	.word	0x20000024

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	2600      	movs	r6, #0
 8003b00:	4d0c      	ldr	r5, [pc, #48]	; (8003b34 <__libc_init_array+0x38>)
 8003b02:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	f000 fc5c 	bl	80043c8 <_init>
 8003b10:	2600      	movs	r6, #0
 8003b12:	4d0a      	ldr	r5, [pc, #40]	; (8003b3c <__libc_init_array+0x40>)
 8003b14:	4c0a      	ldr	r4, [pc, #40]	; (8003b40 <__libc_init_array+0x44>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08004470 	.word	0x08004470
 8003b38:	08004470 	.word	0x08004470
 8003b3c:	08004470 	.word	0x08004470
 8003b40:	08004474 	.word	0x08004474

08003b44 <memset>:
 8003b44:	4603      	mov	r3, r0
 8003b46:	4402      	add	r2, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <siprintf>:
 8003b54:	b40e      	push	{r1, r2, r3}
 8003b56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b5a:	b500      	push	{lr}
 8003b5c:	b09c      	sub	sp, #112	; 0x70
 8003b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b60:	9002      	str	r0, [sp, #8]
 8003b62:	9006      	str	r0, [sp, #24]
 8003b64:	9107      	str	r1, [sp, #28]
 8003b66:	9104      	str	r1, [sp, #16]
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <siprintf+0x38>)
 8003b6a:	4909      	ldr	r1, [pc, #36]	; (8003b90 <siprintf+0x3c>)
 8003b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b70:	9105      	str	r1, [sp, #20]
 8003b72:	6800      	ldr	r0, [r0, #0]
 8003b74:	a902      	add	r1, sp, #8
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	f000 f868 	bl	8003c4c <_svfiprintf_r>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	9b02      	ldr	r3, [sp, #8]
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	b01c      	add	sp, #112	; 0x70
 8003b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b88:	b003      	add	sp, #12
 8003b8a:	4770      	bx	lr
 8003b8c:	20000024 	.word	0x20000024
 8003b90:	ffff0208 	.word	0xffff0208

08003b94 <__ssputs_r>:
 8003b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	688e      	ldr	r6, [r1, #8]
 8003b9a:	4682      	mov	sl, r0
 8003b9c:	429e      	cmp	r6, r3
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	4690      	mov	r8, r2
 8003ba2:	461f      	mov	r7, r3
 8003ba4:	d838      	bhi.n	8003c18 <__ssputs_r+0x84>
 8003ba6:	898a      	ldrh	r2, [r1, #12]
 8003ba8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bac:	d032      	beq.n	8003c14 <__ssputs_r+0x80>
 8003bae:	6825      	ldr	r5, [r4, #0]
 8003bb0:	6909      	ldr	r1, [r1, #16]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	eba5 0901 	sub.w	r9, r5, r1
 8003bb8:	6965      	ldr	r5, [r4, #20]
 8003bba:	444b      	add	r3, r9
 8003bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bc4:	106d      	asrs	r5, r5, #1
 8003bc6:	429d      	cmp	r5, r3
 8003bc8:	bf38      	it	cc
 8003bca:	461d      	movcc	r5, r3
 8003bcc:	0553      	lsls	r3, r2, #21
 8003bce:	d531      	bpl.n	8003c34 <__ssputs_r+0xa0>
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	f000 fb53 	bl	800427c <_malloc_r>
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	b950      	cbnz	r0, 8003bf0 <__ssputs_r+0x5c>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	f8ca 3000 	str.w	r3, [sl]
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf0:	464a      	mov	r2, r9
 8003bf2:	6921      	ldr	r1, [r4, #16]
 8003bf4:	f000 face 	bl	8004194 <memcpy>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c02:	81a3      	strh	r3, [r4, #12]
 8003c04:	6126      	str	r6, [r4, #16]
 8003c06:	444e      	add	r6, r9
 8003c08:	6026      	str	r6, [r4, #0]
 8003c0a:	463e      	mov	r6, r7
 8003c0c:	6165      	str	r5, [r4, #20]
 8003c0e:	eba5 0509 	sub.w	r5, r5, r9
 8003c12:	60a5      	str	r5, [r4, #8]
 8003c14:	42be      	cmp	r6, r7
 8003c16:	d900      	bls.n	8003c1a <__ssputs_r+0x86>
 8003c18:	463e      	mov	r6, r7
 8003c1a:	4632      	mov	r2, r6
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	6820      	ldr	r0, [r4, #0]
 8003c20:	f000 fac6 	bl	80041b0 <memmove>
 8003c24:	68a3      	ldr	r3, [r4, #8]
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	1b9b      	subs	r3, r3, r6
 8003c2a:	4432      	add	r2, r6
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	60a3      	str	r3, [r4, #8]
 8003c30:	6022      	str	r2, [r4, #0]
 8003c32:	e7db      	b.n	8003bec <__ssputs_r+0x58>
 8003c34:	462a      	mov	r2, r5
 8003c36:	f000 fb7b 	bl	8004330 <_realloc_r>
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d1e1      	bne.n	8003c04 <__ssputs_r+0x70>
 8003c40:	4650      	mov	r0, sl
 8003c42:	6921      	ldr	r1, [r4, #16]
 8003c44:	f000 face 	bl	80041e4 <_free_r>
 8003c48:	e7c7      	b.n	8003bda <__ssputs_r+0x46>
	...

08003c4c <_svfiprintf_r>:
 8003c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c50:	4698      	mov	r8, r3
 8003c52:	898b      	ldrh	r3, [r1, #12]
 8003c54:	4607      	mov	r7, r0
 8003c56:	061b      	lsls	r3, r3, #24
 8003c58:	460d      	mov	r5, r1
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	b09d      	sub	sp, #116	; 0x74
 8003c5e:	d50e      	bpl.n	8003c7e <_svfiprintf_r+0x32>
 8003c60:	690b      	ldr	r3, [r1, #16]
 8003c62:	b963      	cbnz	r3, 8003c7e <_svfiprintf_r+0x32>
 8003c64:	2140      	movs	r1, #64	; 0x40
 8003c66:	f000 fb09 	bl	800427c <_malloc_r>
 8003c6a:	6028      	str	r0, [r5, #0]
 8003c6c:	6128      	str	r0, [r5, #16]
 8003c6e:	b920      	cbnz	r0, 8003c7a <_svfiprintf_r+0x2e>
 8003c70:	230c      	movs	r3, #12
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	e0d1      	b.n	8003e1e <_svfiprintf_r+0x1d2>
 8003c7a:	2340      	movs	r3, #64	; 0x40
 8003c7c:	616b      	str	r3, [r5, #20]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9309      	str	r3, [sp, #36]	; 0x24
 8003c82:	2320      	movs	r3, #32
 8003c84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c88:	2330      	movs	r3, #48	; 0x30
 8003c8a:	f04f 0901 	mov.w	r9, #1
 8003c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e38 <_svfiprintf_r+0x1ec>
 8003c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	469a      	mov	sl, r3
 8003c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ca2:	b10a      	cbz	r2, 8003ca8 <_svfiprintf_r+0x5c>
 8003ca4:	2a25      	cmp	r2, #37	; 0x25
 8003ca6:	d1f9      	bne.n	8003c9c <_svfiprintf_r+0x50>
 8003ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cac:	d00b      	beq.n	8003cc6 <_svfiprintf_r+0x7a>
 8003cae:	465b      	mov	r3, fp
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	f7ff ff6d 	bl	8003b94 <__ssputs_r>
 8003cba:	3001      	adds	r0, #1
 8003cbc:	f000 80aa 	beq.w	8003e14 <_svfiprintf_r+0x1c8>
 8003cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cc2:	445a      	add	r2, fp
 8003cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8003cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80a2 	beq.w	8003e14 <_svfiprintf_r+0x1c8>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cda:	f10a 0a01 	add.w	sl, sl, #1
 8003cde:	9304      	str	r3, [sp, #16]
 8003ce0:	9307      	str	r3, [sp, #28]
 8003ce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ce6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ce8:	4654      	mov	r4, sl
 8003cea:	2205      	movs	r2, #5
 8003cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf0:	4851      	ldr	r0, [pc, #324]	; (8003e38 <_svfiprintf_r+0x1ec>)
 8003cf2:	f000 fa41 	bl	8004178 <memchr>
 8003cf6:	9a04      	ldr	r2, [sp, #16]
 8003cf8:	b9d8      	cbnz	r0, 8003d32 <_svfiprintf_r+0xe6>
 8003cfa:	06d0      	lsls	r0, r2, #27
 8003cfc:	bf44      	itt	mi
 8003cfe:	2320      	movmi	r3, #32
 8003d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d04:	0711      	lsls	r1, r2, #28
 8003d06:	bf44      	itt	mi
 8003d08:	232b      	movmi	r3, #43	; 0x2b
 8003d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d12:	2b2a      	cmp	r3, #42	; 0x2a
 8003d14:	d015      	beq.n	8003d42 <_svfiprintf_r+0xf6>
 8003d16:	4654      	mov	r4, sl
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f04f 0c0a 	mov.w	ip, #10
 8003d1e:	9a07      	ldr	r2, [sp, #28]
 8003d20:	4621      	mov	r1, r4
 8003d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d26:	3b30      	subs	r3, #48	; 0x30
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	d94e      	bls.n	8003dca <_svfiprintf_r+0x17e>
 8003d2c:	b1b0      	cbz	r0, 8003d5c <_svfiprintf_r+0x110>
 8003d2e:	9207      	str	r2, [sp, #28]
 8003d30:	e014      	b.n	8003d5c <_svfiprintf_r+0x110>
 8003d32:	eba0 0308 	sub.w	r3, r0, r8
 8003d36:	fa09 f303 	lsl.w	r3, r9, r3
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	46a2      	mov	sl, r4
 8003d3e:	9304      	str	r3, [sp, #16]
 8003d40:	e7d2      	b.n	8003ce8 <_svfiprintf_r+0x9c>
 8003d42:	9b03      	ldr	r3, [sp, #12]
 8003d44:	1d19      	adds	r1, r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	9103      	str	r1, [sp, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bfbb      	ittet	lt
 8003d4e:	425b      	neglt	r3, r3
 8003d50:	f042 0202 	orrlt.w	r2, r2, #2
 8003d54:	9307      	strge	r3, [sp, #28]
 8003d56:	9307      	strlt	r3, [sp, #28]
 8003d58:	bfb8      	it	lt
 8003d5a:	9204      	strlt	r2, [sp, #16]
 8003d5c:	7823      	ldrb	r3, [r4, #0]
 8003d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d60:	d10c      	bne.n	8003d7c <_svfiprintf_r+0x130>
 8003d62:	7863      	ldrb	r3, [r4, #1]
 8003d64:	2b2a      	cmp	r3, #42	; 0x2a
 8003d66:	d135      	bne.n	8003dd4 <_svfiprintf_r+0x188>
 8003d68:	9b03      	ldr	r3, [sp, #12]
 8003d6a:	3402      	adds	r4, #2
 8003d6c:	1d1a      	adds	r2, r3, #4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	9203      	str	r2, [sp, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bfb8      	it	lt
 8003d76:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e48 <_svfiprintf_r+0x1fc>
 8003d80:	2203      	movs	r2, #3
 8003d82:	4650      	mov	r0, sl
 8003d84:	7821      	ldrb	r1, [r4, #0]
 8003d86:	f000 f9f7 	bl	8004178 <memchr>
 8003d8a:	b140      	cbz	r0, 8003d9e <_svfiprintf_r+0x152>
 8003d8c:	2340      	movs	r3, #64	; 0x40
 8003d8e:	eba0 000a 	sub.w	r0, r0, sl
 8003d92:	fa03 f000 	lsl.w	r0, r3, r0
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	3401      	adds	r4, #1
 8003d9a:	4303      	orrs	r3, r0
 8003d9c:	9304      	str	r3, [sp, #16]
 8003d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da2:	2206      	movs	r2, #6
 8003da4:	4825      	ldr	r0, [pc, #148]	; (8003e3c <_svfiprintf_r+0x1f0>)
 8003da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003daa:	f000 f9e5 	bl	8004178 <memchr>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d038      	beq.n	8003e24 <_svfiprintf_r+0x1d8>
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <_svfiprintf_r+0x1f4>)
 8003db4:	bb1b      	cbnz	r3, 8003dfe <_svfiprintf_r+0x1b2>
 8003db6:	9b03      	ldr	r3, [sp, #12]
 8003db8:	3307      	adds	r3, #7
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	9303      	str	r3, [sp, #12]
 8003dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc4:	4433      	add	r3, r6
 8003dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc8:	e767      	b.n	8003c9a <_svfiprintf_r+0x4e>
 8003dca:	460c      	mov	r4, r1
 8003dcc:	2001      	movs	r0, #1
 8003dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dd2:	e7a5      	b.n	8003d20 <_svfiprintf_r+0xd4>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f04f 0c0a 	mov.w	ip, #10
 8003dda:	4619      	mov	r1, r3
 8003ddc:	3401      	adds	r4, #1
 8003dde:	9305      	str	r3, [sp, #20]
 8003de0:	4620      	mov	r0, r4
 8003de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003de6:	3a30      	subs	r2, #48	; 0x30
 8003de8:	2a09      	cmp	r2, #9
 8003dea:	d903      	bls.n	8003df4 <_svfiprintf_r+0x1a8>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0c5      	beq.n	8003d7c <_svfiprintf_r+0x130>
 8003df0:	9105      	str	r1, [sp, #20]
 8003df2:	e7c3      	b.n	8003d7c <_svfiprintf_r+0x130>
 8003df4:	4604      	mov	r4, r0
 8003df6:	2301      	movs	r3, #1
 8003df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dfc:	e7f0      	b.n	8003de0 <_svfiprintf_r+0x194>
 8003dfe:	ab03      	add	r3, sp, #12
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	462a      	mov	r2, r5
 8003e04:	4638      	mov	r0, r7
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <_svfiprintf_r+0x1f8>)
 8003e08:	a904      	add	r1, sp, #16
 8003e0a:	f3af 8000 	nop.w
 8003e0e:	1c42      	adds	r2, r0, #1
 8003e10:	4606      	mov	r6, r0
 8003e12:	d1d6      	bne.n	8003dc2 <_svfiprintf_r+0x176>
 8003e14:	89ab      	ldrh	r3, [r5, #12]
 8003e16:	065b      	lsls	r3, r3, #25
 8003e18:	f53f af2c 	bmi.w	8003c74 <_svfiprintf_r+0x28>
 8003e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e1e:	b01d      	add	sp, #116	; 0x74
 8003e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e24:	ab03      	add	r3, sp, #12
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	462a      	mov	r2, r5
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <_svfiprintf_r+0x1f8>)
 8003e2e:	a904      	add	r1, sp, #16
 8003e30:	f000 f87c 	bl	8003f2c <_printf_i>
 8003e34:	e7eb      	b.n	8003e0e <_svfiprintf_r+0x1c2>
 8003e36:	bf00      	nop
 8003e38:	0800443c 	.word	0x0800443c
 8003e3c:	08004446 	.word	0x08004446
 8003e40:	00000000 	.word	0x00000000
 8003e44:	08003b95 	.word	0x08003b95
 8003e48:	08004442 	.word	0x08004442

08003e4c <_printf_common>:
 8003e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	4616      	mov	r6, r2
 8003e52:	4699      	mov	r9, r3
 8003e54:	688a      	ldr	r2, [r1, #8]
 8003e56:	690b      	ldr	r3, [r1, #16]
 8003e58:	4607      	mov	r7, r0
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	bfb8      	it	lt
 8003e5e:	4613      	movlt	r3, r2
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e66:	460c      	mov	r4, r1
 8003e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e6c:	b10a      	cbz	r2, 8003e72 <_printf_common+0x26>
 8003e6e:	3301      	adds	r3, #1
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	0699      	lsls	r1, r3, #26
 8003e76:	bf42      	ittt	mi
 8003e78:	6833      	ldrmi	r3, [r6, #0]
 8003e7a:	3302      	addmi	r3, #2
 8003e7c:	6033      	strmi	r3, [r6, #0]
 8003e7e:	6825      	ldr	r5, [r4, #0]
 8003e80:	f015 0506 	ands.w	r5, r5, #6
 8003e84:	d106      	bne.n	8003e94 <_printf_common+0x48>
 8003e86:	f104 0a19 	add.w	sl, r4, #25
 8003e8a:	68e3      	ldr	r3, [r4, #12]
 8003e8c:	6832      	ldr	r2, [r6, #0]
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	42ab      	cmp	r3, r5
 8003e92:	dc28      	bgt.n	8003ee6 <_printf_common+0x9a>
 8003e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e98:	1e13      	subs	r3, r2, #0
 8003e9a:	6822      	ldr	r2, [r4, #0]
 8003e9c:	bf18      	it	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	0692      	lsls	r2, r2, #26
 8003ea2:	d42d      	bmi.n	8003f00 <_printf_common+0xb4>
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eac:	47c0      	blx	r8
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d020      	beq.n	8003ef4 <_printf_common+0xa8>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	68e5      	ldr	r5, [r4, #12]
 8003eb6:	f003 0306 	and.w	r3, r3, #6
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf18      	it	ne
 8003ebe:	2500      	movne	r5, #0
 8003ec0:	6832      	ldr	r2, [r6, #0]
 8003ec2:	f04f 0600 	mov.w	r6, #0
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	bf08      	it	eq
 8003eca:	1aad      	subeq	r5, r5, r2
 8003ecc:	6922      	ldr	r2, [r4, #16]
 8003ece:	bf08      	it	eq
 8003ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	bfc4      	itt	gt
 8003ed8:	1a9b      	subgt	r3, r3, r2
 8003eda:	18ed      	addgt	r5, r5, r3
 8003edc:	341a      	adds	r4, #26
 8003ede:	42b5      	cmp	r5, r6
 8003ee0:	d11a      	bne.n	8003f18 <_printf_common+0xcc>
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	e008      	b.n	8003ef8 <_printf_common+0xac>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4652      	mov	r2, sl
 8003eea:	4649      	mov	r1, r9
 8003eec:	4638      	mov	r0, r7
 8003eee:	47c0      	blx	r8
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d103      	bne.n	8003efc <_printf_common+0xb0>
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003efc:	3501      	adds	r5, #1
 8003efe:	e7c4      	b.n	8003e8a <_printf_common+0x3e>
 8003f00:	2030      	movs	r0, #48	; 0x30
 8003f02:	18e1      	adds	r1, r4, r3
 8003f04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f0e:	4422      	add	r2, r4
 8003f10:	3302      	adds	r3, #2
 8003f12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f16:	e7c5      	b.n	8003ea4 <_printf_common+0x58>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	4638      	mov	r0, r7
 8003f20:	47c0      	blx	r8
 8003f22:	3001      	adds	r0, #1
 8003f24:	d0e6      	beq.n	8003ef4 <_printf_common+0xa8>
 8003f26:	3601      	adds	r6, #1
 8003f28:	e7d9      	b.n	8003ede <_printf_common+0x92>
	...

08003f2c <_printf_i>:
 8003f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	7e27      	ldrb	r7, [r4, #24]
 8003f34:	4691      	mov	r9, r2
 8003f36:	2f78      	cmp	r7, #120	; 0x78
 8003f38:	4680      	mov	r8, r0
 8003f3a:	469a      	mov	sl, r3
 8003f3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f42:	d807      	bhi.n	8003f54 <_printf_i+0x28>
 8003f44:	2f62      	cmp	r7, #98	; 0x62
 8003f46:	d80a      	bhi.n	8003f5e <_printf_i+0x32>
 8003f48:	2f00      	cmp	r7, #0
 8003f4a:	f000 80d9 	beq.w	8004100 <_printf_i+0x1d4>
 8003f4e:	2f58      	cmp	r7, #88	; 0x58
 8003f50:	f000 80a4 	beq.w	800409c <_printf_i+0x170>
 8003f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f5c:	e03a      	b.n	8003fd4 <_printf_i+0xa8>
 8003f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f62:	2b15      	cmp	r3, #21
 8003f64:	d8f6      	bhi.n	8003f54 <_printf_i+0x28>
 8003f66:	a001      	add	r0, pc, #4	; (adr r0, 8003f6c <_printf_i+0x40>)
 8003f68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003f55 	.word	0x08003f55
 8003f78:	08003f55 	.word	0x08003f55
 8003f7c:	08003f55 	.word	0x08003f55
 8003f80:	08003f55 	.word	0x08003f55
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003f55 	.word	0x08003f55
 8003f8c:	08003f55 	.word	0x08003f55
 8003f90:	08003f55 	.word	0x08003f55
 8003f94:	08003f55 	.word	0x08003f55
 8003f98:	080040e7 	.word	0x080040e7
 8003f9c:	08004009 	.word	0x08004009
 8003fa0:	080040c9 	.word	0x080040c9
 8003fa4:	08003f55 	.word	0x08003f55
 8003fa8:	08003f55 	.word	0x08003f55
 8003fac:	08004109 	.word	0x08004109
 8003fb0:	08003f55 	.word	0x08003f55
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08003f55 	.word	0x08003f55
 8003fbc:	08003f55 	.word	0x08003f55
 8003fc0:	080040d1 	.word	0x080040d1
 8003fc4:	680b      	ldr	r3, [r1, #0]
 8003fc6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	600a      	str	r2, [r1, #0]
 8003fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0a4      	b.n	8004122 <_printf_i+0x1f6>
 8003fd8:	6825      	ldr	r5, [r4, #0]
 8003fda:	6808      	ldr	r0, [r1, #0]
 8003fdc:	062e      	lsls	r6, r5, #24
 8003fde:	f100 0304 	add.w	r3, r0, #4
 8003fe2:	d50a      	bpl.n	8003ffa <_printf_i+0xce>
 8003fe4:	6805      	ldr	r5, [r0, #0]
 8003fe6:	600b      	str	r3, [r1, #0]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	da03      	bge.n	8003ff4 <_printf_i+0xc8>
 8003fec:	232d      	movs	r3, #45	; 0x2d
 8003fee:	426d      	negs	r5, r5
 8003ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff4:	230a      	movs	r3, #10
 8003ff6:	485e      	ldr	r0, [pc, #376]	; (8004170 <_printf_i+0x244>)
 8003ff8:	e019      	b.n	800402e <_printf_i+0x102>
 8003ffa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ffe:	6805      	ldr	r5, [r0, #0]
 8004000:	600b      	str	r3, [r1, #0]
 8004002:	bf18      	it	ne
 8004004:	b22d      	sxthne	r5, r5
 8004006:	e7ef      	b.n	8003fe8 <_printf_i+0xbc>
 8004008:	680b      	ldr	r3, [r1, #0]
 800400a:	6825      	ldr	r5, [r4, #0]
 800400c:	1d18      	adds	r0, r3, #4
 800400e:	6008      	str	r0, [r1, #0]
 8004010:	0628      	lsls	r0, r5, #24
 8004012:	d501      	bpl.n	8004018 <_printf_i+0xec>
 8004014:	681d      	ldr	r5, [r3, #0]
 8004016:	e002      	b.n	800401e <_printf_i+0xf2>
 8004018:	0669      	lsls	r1, r5, #25
 800401a:	d5fb      	bpl.n	8004014 <_printf_i+0xe8>
 800401c:	881d      	ldrh	r5, [r3, #0]
 800401e:	2f6f      	cmp	r7, #111	; 0x6f
 8004020:	bf0c      	ite	eq
 8004022:	2308      	moveq	r3, #8
 8004024:	230a      	movne	r3, #10
 8004026:	4852      	ldr	r0, [pc, #328]	; (8004170 <_printf_i+0x244>)
 8004028:	2100      	movs	r1, #0
 800402a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800402e:	6866      	ldr	r6, [r4, #4]
 8004030:	2e00      	cmp	r6, #0
 8004032:	bfa8      	it	ge
 8004034:	6821      	ldrge	r1, [r4, #0]
 8004036:	60a6      	str	r6, [r4, #8]
 8004038:	bfa4      	itt	ge
 800403a:	f021 0104 	bicge.w	r1, r1, #4
 800403e:	6021      	strge	r1, [r4, #0]
 8004040:	b90d      	cbnz	r5, 8004046 <_printf_i+0x11a>
 8004042:	2e00      	cmp	r6, #0
 8004044:	d04d      	beq.n	80040e2 <_printf_i+0x1b6>
 8004046:	4616      	mov	r6, r2
 8004048:	fbb5 f1f3 	udiv	r1, r5, r3
 800404c:	fb03 5711 	mls	r7, r3, r1, r5
 8004050:	5dc7      	ldrb	r7, [r0, r7]
 8004052:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004056:	462f      	mov	r7, r5
 8004058:	42bb      	cmp	r3, r7
 800405a:	460d      	mov	r5, r1
 800405c:	d9f4      	bls.n	8004048 <_printf_i+0x11c>
 800405e:	2b08      	cmp	r3, #8
 8004060:	d10b      	bne.n	800407a <_printf_i+0x14e>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	07df      	lsls	r7, r3, #31
 8004066:	d508      	bpl.n	800407a <_printf_i+0x14e>
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	6861      	ldr	r1, [r4, #4]
 800406c:	4299      	cmp	r1, r3
 800406e:	bfde      	ittt	le
 8004070:	2330      	movle	r3, #48	; 0x30
 8004072:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004076:	f106 36ff 	addle.w	r6, r6, #4294967295
 800407a:	1b92      	subs	r2, r2, r6
 800407c:	6122      	str	r2, [r4, #16]
 800407e:	464b      	mov	r3, r9
 8004080:	4621      	mov	r1, r4
 8004082:	4640      	mov	r0, r8
 8004084:	f8cd a000 	str.w	sl, [sp]
 8004088:	aa03      	add	r2, sp, #12
 800408a:	f7ff fedf 	bl	8003e4c <_printf_common>
 800408e:	3001      	adds	r0, #1
 8004090:	d14c      	bne.n	800412c <_printf_i+0x200>
 8004092:	f04f 30ff 	mov.w	r0, #4294967295
 8004096:	b004      	add	sp, #16
 8004098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409c:	4834      	ldr	r0, [pc, #208]	; (8004170 <_printf_i+0x244>)
 800409e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040a2:	680e      	ldr	r6, [r1, #0]
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80040aa:	061f      	lsls	r7, r3, #24
 80040ac:	600e      	str	r6, [r1, #0]
 80040ae:	d514      	bpl.n	80040da <_printf_i+0x1ae>
 80040b0:	07d9      	lsls	r1, r3, #31
 80040b2:	bf44      	itt	mi
 80040b4:	f043 0320 	orrmi.w	r3, r3, #32
 80040b8:	6023      	strmi	r3, [r4, #0]
 80040ba:	b91d      	cbnz	r5, 80040c4 <_printf_i+0x198>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	2310      	movs	r3, #16
 80040c6:	e7af      	b.n	8004028 <_printf_i+0xfc>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	f043 0320 	orr.w	r3, r3, #32
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	2378      	movs	r3, #120	; 0x78
 80040d2:	4828      	ldr	r0, [pc, #160]	; (8004174 <_printf_i+0x248>)
 80040d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040d8:	e7e3      	b.n	80040a2 <_printf_i+0x176>
 80040da:	065e      	lsls	r6, r3, #25
 80040dc:	bf48      	it	mi
 80040de:	b2ad      	uxthmi	r5, r5
 80040e0:	e7e6      	b.n	80040b0 <_printf_i+0x184>
 80040e2:	4616      	mov	r6, r2
 80040e4:	e7bb      	b.n	800405e <_printf_i+0x132>
 80040e6:	680b      	ldr	r3, [r1, #0]
 80040e8:	6826      	ldr	r6, [r4, #0]
 80040ea:	1d1d      	adds	r5, r3, #4
 80040ec:	6960      	ldr	r0, [r4, #20]
 80040ee:	600d      	str	r5, [r1, #0]
 80040f0:	0635      	lsls	r5, r6, #24
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	d501      	bpl.n	80040fa <_printf_i+0x1ce>
 80040f6:	6018      	str	r0, [r3, #0]
 80040f8:	e002      	b.n	8004100 <_printf_i+0x1d4>
 80040fa:	0671      	lsls	r1, r6, #25
 80040fc:	d5fb      	bpl.n	80040f6 <_printf_i+0x1ca>
 80040fe:	8018      	strh	r0, [r3, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	4616      	mov	r6, r2
 8004104:	6123      	str	r3, [r4, #16]
 8004106:	e7ba      	b.n	800407e <_printf_i+0x152>
 8004108:	680b      	ldr	r3, [r1, #0]
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	600a      	str	r2, [r1, #0]
 800410e:	681e      	ldr	r6, [r3, #0]
 8004110:	2100      	movs	r1, #0
 8004112:	4630      	mov	r0, r6
 8004114:	6862      	ldr	r2, [r4, #4]
 8004116:	f000 f82f 	bl	8004178 <memchr>
 800411a:	b108      	cbz	r0, 8004120 <_printf_i+0x1f4>
 800411c:	1b80      	subs	r0, r0, r6
 800411e:	6060      	str	r0, [r4, #4]
 8004120:	6863      	ldr	r3, [r4, #4]
 8004122:	6123      	str	r3, [r4, #16]
 8004124:	2300      	movs	r3, #0
 8004126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412a:	e7a8      	b.n	800407e <_printf_i+0x152>
 800412c:	4632      	mov	r2, r6
 800412e:	4649      	mov	r1, r9
 8004130:	4640      	mov	r0, r8
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	47d0      	blx	sl
 8004136:	3001      	adds	r0, #1
 8004138:	d0ab      	beq.n	8004092 <_printf_i+0x166>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	079b      	lsls	r3, r3, #30
 800413e:	d413      	bmi.n	8004168 <_printf_i+0x23c>
 8004140:	68e0      	ldr	r0, [r4, #12]
 8004142:	9b03      	ldr	r3, [sp, #12]
 8004144:	4298      	cmp	r0, r3
 8004146:	bfb8      	it	lt
 8004148:	4618      	movlt	r0, r3
 800414a:	e7a4      	b.n	8004096 <_printf_i+0x16a>
 800414c:	2301      	movs	r3, #1
 800414e:	4632      	mov	r2, r6
 8004150:	4649      	mov	r1, r9
 8004152:	4640      	mov	r0, r8
 8004154:	47d0      	blx	sl
 8004156:	3001      	adds	r0, #1
 8004158:	d09b      	beq.n	8004092 <_printf_i+0x166>
 800415a:	3501      	adds	r5, #1
 800415c:	68e3      	ldr	r3, [r4, #12]
 800415e:	9903      	ldr	r1, [sp, #12]
 8004160:	1a5b      	subs	r3, r3, r1
 8004162:	42ab      	cmp	r3, r5
 8004164:	dcf2      	bgt.n	800414c <_printf_i+0x220>
 8004166:	e7eb      	b.n	8004140 <_printf_i+0x214>
 8004168:	2500      	movs	r5, #0
 800416a:	f104 0619 	add.w	r6, r4, #25
 800416e:	e7f5      	b.n	800415c <_printf_i+0x230>
 8004170:	0800444d 	.word	0x0800444d
 8004174:	0800445e 	.word	0x0800445e

08004178 <memchr>:
 8004178:	4603      	mov	r3, r0
 800417a:	b510      	push	{r4, lr}
 800417c:	b2c9      	uxtb	r1, r1
 800417e:	4402      	add	r2, r0
 8004180:	4293      	cmp	r3, r2
 8004182:	4618      	mov	r0, r3
 8004184:	d101      	bne.n	800418a <memchr+0x12>
 8004186:	2000      	movs	r0, #0
 8004188:	e003      	b.n	8004192 <memchr+0x1a>
 800418a:	7804      	ldrb	r4, [r0, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	428c      	cmp	r4, r1
 8004190:	d1f6      	bne.n	8004180 <memchr+0x8>
 8004192:	bd10      	pop	{r4, pc}

08004194 <memcpy>:
 8004194:	440a      	add	r2, r1
 8004196:	4291      	cmp	r1, r2
 8004198:	f100 33ff 	add.w	r3, r0, #4294967295
 800419c:	d100      	bne.n	80041a0 <memcpy+0xc>
 800419e:	4770      	bx	lr
 80041a0:	b510      	push	{r4, lr}
 80041a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a6:	4291      	cmp	r1, r2
 80041a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ac:	d1f9      	bne.n	80041a2 <memcpy+0xe>
 80041ae:	bd10      	pop	{r4, pc}

080041b0 <memmove>:
 80041b0:	4288      	cmp	r0, r1
 80041b2:	b510      	push	{r4, lr}
 80041b4:	eb01 0402 	add.w	r4, r1, r2
 80041b8:	d902      	bls.n	80041c0 <memmove+0x10>
 80041ba:	4284      	cmp	r4, r0
 80041bc:	4623      	mov	r3, r4
 80041be:	d807      	bhi.n	80041d0 <memmove+0x20>
 80041c0:	1e43      	subs	r3, r0, #1
 80041c2:	42a1      	cmp	r1, r4
 80041c4:	d008      	beq.n	80041d8 <memmove+0x28>
 80041c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ce:	e7f8      	b.n	80041c2 <memmove+0x12>
 80041d0:	4601      	mov	r1, r0
 80041d2:	4402      	add	r2, r0
 80041d4:	428a      	cmp	r2, r1
 80041d6:	d100      	bne.n	80041da <memmove+0x2a>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041e2:	e7f7      	b.n	80041d4 <memmove+0x24>

080041e4 <_free_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4605      	mov	r5, r0
 80041e8:	2900      	cmp	r1, #0
 80041ea:	d043      	beq.n	8004274 <_free_r+0x90>
 80041ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f0:	1f0c      	subs	r4, r1, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bfb8      	it	lt
 80041f6:	18e4      	addlt	r4, r4, r3
 80041f8:	f000 f8d0 	bl	800439c <__malloc_lock>
 80041fc:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <_free_r+0x94>)
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	4610      	mov	r0, r2
 8004202:	b933      	cbnz	r3, 8004212 <_free_r+0x2e>
 8004204:	6063      	str	r3, [r4, #4]
 8004206:	6014      	str	r4, [r2, #0]
 8004208:	4628      	mov	r0, r5
 800420a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800420e:	f000 b8cb 	b.w	80043a8 <__malloc_unlock>
 8004212:	42a3      	cmp	r3, r4
 8004214:	d90a      	bls.n	800422c <_free_r+0x48>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	1862      	adds	r2, r4, r1
 800421a:	4293      	cmp	r3, r2
 800421c:	bf01      	itttt	eq
 800421e:	681a      	ldreq	r2, [r3, #0]
 8004220:	685b      	ldreq	r3, [r3, #4]
 8004222:	1852      	addeq	r2, r2, r1
 8004224:	6022      	streq	r2, [r4, #0]
 8004226:	6063      	str	r3, [r4, #4]
 8004228:	6004      	str	r4, [r0, #0]
 800422a:	e7ed      	b.n	8004208 <_free_r+0x24>
 800422c:	461a      	mov	r2, r3
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	b10b      	cbz	r3, 8004236 <_free_r+0x52>
 8004232:	42a3      	cmp	r3, r4
 8004234:	d9fa      	bls.n	800422c <_free_r+0x48>
 8004236:	6811      	ldr	r1, [r2, #0]
 8004238:	1850      	adds	r0, r2, r1
 800423a:	42a0      	cmp	r0, r4
 800423c:	d10b      	bne.n	8004256 <_free_r+0x72>
 800423e:	6820      	ldr	r0, [r4, #0]
 8004240:	4401      	add	r1, r0
 8004242:	1850      	adds	r0, r2, r1
 8004244:	4283      	cmp	r3, r0
 8004246:	6011      	str	r1, [r2, #0]
 8004248:	d1de      	bne.n	8004208 <_free_r+0x24>
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4401      	add	r1, r0
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	e7d8      	b.n	8004208 <_free_r+0x24>
 8004256:	d902      	bls.n	800425e <_free_r+0x7a>
 8004258:	230c      	movs	r3, #12
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	e7d4      	b.n	8004208 <_free_r+0x24>
 800425e:	6820      	ldr	r0, [r4, #0]
 8004260:	1821      	adds	r1, r4, r0
 8004262:	428b      	cmp	r3, r1
 8004264:	bf01      	itttt	eq
 8004266:	6819      	ldreq	r1, [r3, #0]
 8004268:	685b      	ldreq	r3, [r3, #4]
 800426a:	1809      	addeq	r1, r1, r0
 800426c:	6021      	streq	r1, [r4, #0]
 800426e:	6063      	str	r3, [r4, #4]
 8004270:	6054      	str	r4, [r2, #4]
 8004272:	e7c9      	b.n	8004208 <_free_r+0x24>
 8004274:	bd38      	pop	{r3, r4, r5, pc}
 8004276:	bf00      	nop
 8004278:	200000a8 	.word	0x200000a8

0800427c <_malloc_r>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	1ccd      	adds	r5, r1, #3
 8004280:	f025 0503 	bic.w	r5, r5, #3
 8004284:	3508      	adds	r5, #8
 8004286:	2d0c      	cmp	r5, #12
 8004288:	bf38      	it	cc
 800428a:	250c      	movcc	r5, #12
 800428c:	2d00      	cmp	r5, #0
 800428e:	4606      	mov	r6, r0
 8004290:	db01      	blt.n	8004296 <_malloc_r+0x1a>
 8004292:	42a9      	cmp	r1, r5
 8004294:	d903      	bls.n	800429e <_malloc_r+0x22>
 8004296:	230c      	movs	r3, #12
 8004298:	6033      	str	r3, [r6, #0]
 800429a:	2000      	movs	r0, #0
 800429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800429e:	f000 f87d 	bl	800439c <__malloc_lock>
 80042a2:	4921      	ldr	r1, [pc, #132]	; (8004328 <_malloc_r+0xac>)
 80042a4:	680a      	ldr	r2, [r1, #0]
 80042a6:	4614      	mov	r4, r2
 80042a8:	b99c      	cbnz	r4, 80042d2 <_malloc_r+0x56>
 80042aa:	4f20      	ldr	r7, [pc, #128]	; (800432c <_malloc_r+0xb0>)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	b923      	cbnz	r3, 80042ba <_malloc_r+0x3e>
 80042b0:	4621      	mov	r1, r4
 80042b2:	4630      	mov	r0, r6
 80042b4:	f000 f862 	bl	800437c <_sbrk_r>
 80042b8:	6038      	str	r0, [r7, #0]
 80042ba:	4629      	mov	r1, r5
 80042bc:	4630      	mov	r0, r6
 80042be:	f000 f85d 	bl	800437c <_sbrk_r>
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	d123      	bne.n	800430e <_malloc_r+0x92>
 80042c6:	230c      	movs	r3, #12
 80042c8:	4630      	mov	r0, r6
 80042ca:	6033      	str	r3, [r6, #0]
 80042cc:	f000 f86c 	bl	80043a8 <__malloc_unlock>
 80042d0:	e7e3      	b.n	800429a <_malloc_r+0x1e>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	1b5b      	subs	r3, r3, r5
 80042d6:	d417      	bmi.n	8004308 <_malloc_r+0x8c>
 80042d8:	2b0b      	cmp	r3, #11
 80042da:	d903      	bls.n	80042e4 <_malloc_r+0x68>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	441c      	add	r4, r3
 80042e0:	6025      	str	r5, [r4, #0]
 80042e2:	e004      	b.n	80042ee <_malloc_r+0x72>
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	42a2      	cmp	r2, r4
 80042e8:	bf0c      	ite	eq
 80042ea:	600b      	streq	r3, [r1, #0]
 80042ec:	6053      	strne	r3, [r2, #4]
 80042ee:	4630      	mov	r0, r6
 80042f0:	f000 f85a 	bl	80043a8 <__malloc_unlock>
 80042f4:	f104 000b 	add.w	r0, r4, #11
 80042f8:	1d23      	adds	r3, r4, #4
 80042fa:	f020 0007 	bic.w	r0, r0, #7
 80042fe:	1ac2      	subs	r2, r0, r3
 8004300:	d0cc      	beq.n	800429c <_malloc_r+0x20>
 8004302:	1a1b      	subs	r3, r3, r0
 8004304:	50a3      	str	r3, [r4, r2]
 8004306:	e7c9      	b.n	800429c <_malloc_r+0x20>
 8004308:	4622      	mov	r2, r4
 800430a:	6864      	ldr	r4, [r4, #4]
 800430c:	e7cc      	b.n	80042a8 <_malloc_r+0x2c>
 800430e:	1cc4      	adds	r4, r0, #3
 8004310:	f024 0403 	bic.w	r4, r4, #3
 8004314:	42a0      	cmp	r0, r4
 8004316:	d0e3      	beq.n	80042e0 <_malloc_r+0x64>
 8004318:	1a21      	subs	r1, r4, r0
 800431a:	4630      	mov	r0, r6
 800431c:	f000 f82e 	bl	800437c <_sbrk_r>
 8004320:	3001      	adds	r0, #1
 8004322:	d1dd      	bne.n	80042e0 <_malloc_r+0x64>
 8004324:	e7cf      	b.n	80042c6 <_malloc_r+0x4a>
 8004326:	bf00      	nop
 8004328:	200000a8 	.word	0x200000a8
 800432c:	200000ac 	.word	0x200000ac

08004330 <_realloc_r>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	4607      	mov	r7, r0
 8004334:	4614      	mov	r4, r2
 8004336:	460e      	mov	r6, r1
 8004338:	b921      	cbnz	r1, 8004344 <_realloc_r+0x14>
 800433a:	4611      	mov	r1, r2
 800433c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004340:	f7ff bf9c 	b.w	800427c <_malloc_r>
 8004344:	b922      	cbnz	r2, 8004350 <_realloc_r+0x20>
 8004346:	f7ff ff4d 	bl	80041e4 <_free_r>
 800434a:	4625      	mov	r5, r4
 800434c:	4628      	mov	r0, r5
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004350:	f000 f830 	bl	80043b4 <_malloc_usable_size_r>
 8004354:	42a0      	cmp	r0, r4
 8004356:	d20f      	bcs.n	8004378 <_realloc_r+0x48>
 8004358:	4621      	mov	r1, r4
 800435a:	4638      	mov	r0, r7
 800435c:	f7ff ff8e 	bl	800427c <_malloc_r>
 8004360:	4605      	mov	r5, r0
 8004362:	2800      	cmp	r0, #0
 8004364:	d0f2      	beq.n	800434c <_realloc_r+0x1c>
 8004366:	4631      	mov	r1, r6
 8004368:	4622      	mov	r2, r4
 800436a:	f7ff ff13 	bl	8004194 <memcpy>
 800436e:	4631      	mov	r1, r6
 8004370:	4638      	mov	r0, r7
 8004372:	f7ff ff37 	bl	80041e4 <_free_r>
 8004376:	e7e9      	b.n	800434c <_realloc_r+0x1c>
 8004378:	4635      	mov	r5, r6
 800437a:	e7e7      	b.n	800434c <_realloc_r+0x1c>

0800437c <_sbrk_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	2300      	movs	r3, #0
 8004380:	4d05      	ldr	r5, [pc, #20]	; (8004398 <_sbrk_r+0x1c>)
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fd f8dc 	bl	8001544 <_sbrk>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_sbrk_r+0x1a>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_sbrk_r+0x1a>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	2000012c 	.word	0x2000012c

0800439c <__malloc_lock>:
 800439c:	4801      	ldr	r0, [pc, #4]	; (80043a4 <__malloc_lock+0x8>)
 800439e:	f000 b811 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 80043a2:	bf00      	nop
 80043a4:	20000134 	.word	0x20000134

080043a8 <__malloc_unlock>:
 80043a8:	4801      	ldr	r0, [pc, #4]	; (80043b0 <__malloc_unlock+0x8>)
 80043aa:	f000 b80c 	b.w	80043c6 <__retarget_lock_release_recursive>
 80043ae:	bf00      	nop
 80043b0:	20000134 	.word	0x20000134

080043b4 <_malloc_usable_size_r>:
 80043b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b8:	1f18      	subs	r0, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfbc      	itt	lt
 80043be:	580b      	ldrlt	r3, [r1, r0]
 80043c0:	18c0      	addlt	r0, r0, r3
 80043c2:	4770      	bx	lr

080043c4 <__retarget_lock_acquire_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_release_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <_init>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr

080043d4 <_fini>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr
